{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.layers.image.image","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"sd\">\"\"\"Image class.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">ndimage</span> <span class=\"k\">as</span> <span class=\"n\">ndi</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">...utils</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils._dtype</span> <span class=\"kn\">import</span> <span class=\"n\">get_dtype_limits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.colormaps</span> <span class=\"kn\">import</span> <span class=\"n\">AVAILABLE_COLORMAPS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..base</span> <span class=\"kn\">import</span> <span class=\"n\">Layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..intensity_mixin</span> <span class=\"kn\">import</span> <span class=\"n\">IntensityVisualizationMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.layer_utils</span> <span class=\"kn\">import</span> <span class=\"n\">calc_data_range</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.plane</span> <span class=\"kn\">import</span> <span class=\"n\">SlicingPlane</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._image_constants</span> <span class=\"kn\">import</span> <span class=\"n\">Interpolation</span><span class=\"p\">,</span> <span class=\"n\">Interpolation3D</span><span class=\"p\">,</span> <span class=\"n\">Rendering</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._image_slice</span> <span class=\"kn\">import</span> <span class=\"n\">ImageSlice</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._image_slice_data</span> <span class=\"kn\">import</span> <span class=\"n\">ImageSliceData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._image_utils</span> <span class=\"kn\">import</span> <span class=\"n\">guess_multiscale</span><span class=\"p\">,</span> <span class=\"n\">guess_rgb</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">...components.experimental.chunk</span> <span class=\"kn\">import</span> <span class=\"n\">ChunkRequest</span>\n\n\n<span class=\"c1\"># It is important to contain at least one abstractmethod to properly exclude this class</span>\n<span class=\"c1\"># in creating NAMES set inside of napari.layers.__init__</span>\n<span class=\"c1\"># Mixin must come before Layer</span>\n<span class=\"k\">class</span> <span class=\"nc\">_ImageBase</span><span class=\"p\">(</span><span class=\"n\">IntensityVisualizationMixin</span><span class=\"p\">,</span> <span class=\"n\">Layer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Image layer.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : array or list of array</span>\n<span class=\"sd\">        Image data. Can be N &gt;= 2 dimensional. If the last dimension has length</span>\n<span class=\"sd\">        3 or 4 can be interpreted as RGB or RGBA if rgb is `True`. If a</span>\n<span class=\"sd\">        list and arrays are decreasing in shape then the data is treated as</span>\n<span class=\"sd\">        a multiscale image. Please note multiscale rendering is only</span>\n<span class=\"sd\">        supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">        displayed.</span>\n<span class=\"sd\">    rgb : bool</span>\n<span class=\"sd\">        Whether the image is rgb RGB or RGBA. If not specified by user and</span>\n<span class=\"sd\">        the last dimension of the data has length 3 or 4 it will be set as</span>\n<span class=\"sd\">        `True`. If `False` the image is interpreted as a luminance image.</span>\n<span class=\"sd\">    colormap : str, napari.utils.Colormap, tuple, dict</span>\n<span class=\"sd\">        Colormap to use for luminance images. If a string must be the name</span>\n<span class=\"sd\">        of a supported colormap from vispy or matplotlib. If a tuple the</span>\n<span class=\"sd\">        first value must be a string to assign as a name to a colormap and</span>\n<span class=\"sd\">        the second item must be a Colormap. If a dict the key must be a</span>\n<span class=\"sd\">        string to assign as a name to a colormap and the value must be a</span>\n<span class=\"sd\">        Colormap.</span>\n<span class=\"sd\">    contrast_limits : list (2,)</span>\n<span class=\"sd\">        Color limits to be used for determining the colormap bounds for</span>\n<span class=\"sd\">        luminance images. If not passed is calculated as the min and max of</span>\n<span class=\"sd\">        the image.</span>\n<span class=\"sd\">    gamma : float</span>\n<span class=\"sd\">        Gamma correction for determining colormap linearity. Defaults to 1.</span>\n<span class=\"sd\">    interpolation : str</span>\n<span class=\"sd\">        Interpolation mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">        modes.</span>\n<span class=\"sd\">    rendering : str</span>\n<span class=\"sd\">        Rendering mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">        modes.</span>\n<span class=\"sd\">    iso_threshold : float</span>\n<span class=\"sd\">        Threshold for isosurface.</span>\n<span class=\"sd\">    attenuation : float</span>\n<span class=\"sd\">        Attenuation rate for attenuated maximum intensity projection.</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        Name of the layer.</span>\n<span class=\"sd\">    metadata : dict</span>\n<span class=\"sd\">        Layer metadata.</span>\n<span class=\"sd\">    scale : tuple of float</span>\n<span class=\"sd\">        Scale factors for the layer.</span>\n<span class=\"sd\">    translate : tuple of float</span>\n<span class=\"sd\">        Translation values for the layer.</span>\n<span class=\"sd\">    rotate : float, 3-tuple of float, or n-D array.</span>\n<span class=\"sd\">        If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">        angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">        pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">        assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">        np.degrees if needed.</span>\n<span class=\"sd\">    shear : 1-D array or n-D array</span>\n<span class=\"sd\">        Either a vector of upper triangular values, or an nD shear matrix with</span>\n<span class=\"sd\">        ones along the main diagonal.</span>\n<span class=\"sd\">    affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">        (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">        The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">        the final column is a length N translation vector and a 1 or a napari</span>\n<span class=\"sd\">        `Affine` transform object. Applied as an extra transform on top of the</span>\n<span class=\"sd\">        provided scale, rotate, and shear values.</span>\n<span class=\"sd\">    opacity : float</span>\n<span class=\"sd\">        Opacity of the layer visual, between 0.0 and 1.0.</span>\n<span class=\"sd\">    blending : str</span>\n<span class=\"sd\">        One of a list of preset blending modes that determines how RGB and</span>\n<span class=\"sd\">        alpha values of the layer visual get mixed. Allowed values are</span>\n<span class=\"sd\">        {'opaque', 'translucent', and 'additive'}.</span>\n<span class=\"sd\">    visible : bool</span>\n<span class=\"sd\">        Whether the layer visual is currently being displayed.</span>\n<span class=\"sd\">    multiscale : bool</span>\n<span class=\"sd\">        Whether the data is a multiscale image or not. Multiscale data is</span>\n<span class=\"sd\">        represented by a list of array like image data. If not specified by</span>\n<span class=\"sd\">        the user and if the data is a list of arrays that decrease in shape</span>\n<span class=\"sd\">        then it will be taken to be multiscale. The first image in the list</span>\n<span class=\"sd\">        should be the largest. Please note multiscale rendering is only</span>\n<span class=\"sd\">        supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">        displayed.</span>\n<span class=\"sd\">    experimental_slicing_plane : dict or SlicingPlane</span>\n<span class=\"sd\">        Properties defining plane rendering in 3D. Properties are defined in</span>\n<span class=\"sd\">        data coordinates. Valid dictionary keys are</span>\n<span class=\"sd\">        {'position', 'normal', 'thickness', and 'enabled'}.</span>\n<span class=\"sd\">    experimental_clipping_planes : list of dicts, list of ClippingPlane, or ClippingPlaneList</span>\n<span class=\"sd\">        Each dict defines a clipping plane in 3D in data coordinates.</span>\n<span class=\"sd\">        Valid dictionary keys are {'position', 'normal', and 'enabled'}.</span>\n<span class=\"sd\">        Values on the negative side of the normal are discarded if the plane is enabled.</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : array or list of array</span>\n<span class=\"sd\">        Image data. Can be N dimensional. If the last dimension has length</span>\n<span class=\"sd\">        3 or 4 can be interpreted as RGB or RGBA if rgb is `True`. If a list</span>\n<span class=\"sd\">        and arrays are decreasing in shape then the data is treated as a</span>\n<span class=\"sd\">        multiscale image. Please note multiscale rendering is only</span>\n<span class=\"sd\">        supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">        displayed.</span>\n<span class=\"sd\">    metadata : dict</span>\n<span class=\"sd\">        Image metadata.</span>\n<span class=\"sd\">    rgb : bool</span>\n<span class=\"sd\">        Whether the image is rgb RGB or RGBA if rgb. If not</span>\n<span class=\"sd\">        specified by user and the last dimension of the data has length 3 or 4</span>\n<span class=\"sd\">        it will be set as `True`. If `False` the image is interpreted as a</span>\n<span class=\"sd\">        luminance image.</span>\n<span class=\"sd\">    multiscale : bool</span>\n<span class=\"sd\">        Whether the data is a multiscale image or not. Multiscale data is</span>\n<span class=\"sd\">        represented by a list of array like image data. The first image in the</span>\n<span class=\"sd\">        list should be the largest. Please note multiscale rendering is only</span>\n<span class=\"sd\">        supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">        displayed.</span>\n<span class=\"sd\">    colormap : 2-tuple of str, napari.utils.Colormap</span>\n<span class=\"sd\">        The first is the name of the current colormap, and the second value is</span>\n<span class=\"sd\">        the colormap. Colormaps are used for luminance images, if the image is</span>\n<span class=\"sd\">        rgb the colormap is ignored.</span>\n<span class=\"sd\">    colormaps : tuple of str</span>\n<span class=\"sd\">        Names of the available colormaps.</span>\n<span class=\"sd\">    contrast_limits : list (2,) of float</span>\n<span class=\"sd\">        Color limits to be used for determining the colormap bounds for</span>\n<span class=\"sd\">        luminance images. If the image is rgb the contrast_limits is ignored.</span>\n<span class=\"sd\">    contrast_limits_range : list (2,) of float</span>\n<span class=\"sd\">        Range for the color limits for luminance images. If the image is</span>\n<span class=\"sd\">        rgb the contrast_limits_range is ignored.</span>\n<span class=\"sd\">    gamma : float</span>\n<span class=\"sd\">        Gamma correction for determining colormap linearity.</span>\n<span class=\"sd\">    interpolation : str</span>\n<span class=\"sd\">        Interpolation mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">        modes.</span>\n<span class=\"sd\">    rendering : str</span>\n<span class=\"sd\">        Rendering mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">        modes.</span>\n<span class=\"sd\">    iso_threshold : float</span>\n<span class=\"sd\">        Threshold for isosurface.</span>\n<span class=\"sd\">    attenuation : float</span>\n<span class=\"sd\">        Attenuation rate for attenuated maximum intensity projection.</span>\n<span class=\"sd\">    experimental_slicing_plane : SlicingPlane or dict</span>\n<span class=\"sd\">        Properties defining plane rendering in 3D. Valid dictionary keys are</span>\n<span class=\"sd\">        {'position', 'normal', 'thickness', and 'enabled'}.</span>\n<span class=\"sd\">    experimental_clipping_planes : ClippingPlaneList</span>\n<span class=\"sd\">        Clipping planes defined in data coordinates, used to clip the volume.</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    _data_view : array (N, M), (N, M, 3), or (N, M, 4)</span>\n<span class=\"sd\">        Image data for the currently viewed slice. Must be 2D image data, but</span>\n<span class=\"sd\">        can be multidimensional for RGB or RGBA images if multidimensional is</span>\n<span class=\"sd\">        `True`.</span>\n<span class=\"sd\">    _colorbar : array</span>\n<span class=\"sd\">        Colorbar for current colormap.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">_colormaps</span> <span class=\"o\">=</span> <span class=\"n\">AVAILABLE_COLORMAPS</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">'gray'</span><span class=\"p\">,</span>\n        <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'nearest'</span><span class=\"p\">,</span>\n        <span class=\"n\">rendering</span><span class=\"o\">=</span><span class=\"s1\">'mip'</span><span class=\"p\">,</span>\n        <span class=\"n\">iso_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">attenuation</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"s1\">'translucent'</span><span class=\"p\">,</span>\n        <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">multiscale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_slicing_plane</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneratorType</span><span class=\"p\">):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'ndim'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Image data must have at least 2 dimensions.'</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine if data is a multiscale</span>\n        <span class=\"k\">if</span> <span class=\"n\">multiscale</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">multiscale</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">guess_multiscale</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine initial shape</span>\n        <span class=\"k\">if</span> <span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"n\">init_shape</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">init_shape</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n\n        <span class=\"c1\"># Determine if rgb</span>\n        <span class=\"k\">if</span> <span class=\"n\">rgb</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">guess_rgb</span><span class=\"p\">(</span><span class=\"n\">init_shape</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine dimensionality of the data</span>\n        <span class=\"k\">if</span> <span class=\"n\">rgb</span><span class=\"p\">:</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">init_shape</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">init_shape</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">ndim</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n            <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">scale</span><span class=\"p\">,</span>\n            <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"n\">translate</span><span class=\"p\">,</span>\n            <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"n\">rotate</span><span class=\"p\">,</span>\n            <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"n\">shear</span><span class=\"p\">,</span>\n            <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n            <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">opacity</span><span class=\"p\">,</span>\n            <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"n\">blending</span><span class=\"p\">,</span>\n            <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"n\">visible</span><span class=\"p\">,</span>\n            <span class=\"n\">multiscale</span><span class=\"o\">=</span><span class=\"n\">multiscale</span><span class=\"p\">,</span>\n            <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"n\">experimental_clipping_planes</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n            <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">rendering</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">iso_threshold</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">attenuation</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"n\">rgb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># Determine which level of the multiscale to use for the thumbnail.</span>\n            <span class=\"c1\"># Pick the smallest level with at least one axis &gt;= 64. This is</span>\n            <span class=\"c1\"># done to prevent the thumbnail from being from one of the very</span>\n            <span class=\"c1\"># low resolution layers and therefore being very blurred.</span>\n            <span class=\"n\">big_enough_levels</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">greater_equal</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">data</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">big_enough_levels</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">big_enough_levels</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">displayed_axes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_axes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">displayed_axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span>\n        <span class=\"p\">][</span><span class=\"n\">displayed_axes</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_new_empty_slice</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Set contrast limits, colormaps and plane parameters</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gamma</span> <span class=\"o\">=</span> <span class=\"n\">gamma</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iso_threshold</span> <span class=\"o\">=</span> <span class=\"n\">iso_threshold</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attenuation</span> <span class=\"o\">=</span> <span class=\"n\">attenuation</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_slicing_plane</span> <span class=\"o\">=</span> <span class=\"n\">SlicingPlane</span><span class=\"p\">(</span>\n            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">contrast_limits</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">):</span>\n                <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'dtype'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">issubdtype</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">integer</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits_range</span> <span class=\"o\">=</span> <span class=\"n\">get_dtype_limits</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits_range</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits_range</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_calc_data_range</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits_range</span> <span class=\"o\">=</span> <span class=\"n\">contrast_limits</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_contrast_limits</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits_range</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_contrast_limits</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interpolation</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"n\">Interpolation</span><span class=\"o\">.</span><span class=\"n\">NEAREST</span><span class=\"p\">,</span>\n            <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                <span class=\"n\">Interpolation3D</span><span class=\"o\">.</span><span class=\"n\">NEAREST</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'Labels'</span>\n                <span class=\"k\">else</span> <span class=\"n\">Interpolation3D</span><span class=\"o\">.</span><span class=\"n\">LINEAR</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"n\">interpolation</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendering</span> <span class=\"o\">=</span> <span class=\"n\">rendering</span>\n        <span class=\"k\">if</span> <span class=\"n\">experimental_slicing_plane</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">experimental_slicing_plane</span> <span class=\"o\">=</span> <span class=\"n\">experimental_slicing_plane</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">experimental_slicing_plane</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">experimental_slicing_plane</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Trigger generation of view slice and thumbnail</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_new_empty_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initialize the current slice to an empty image.\"\"\"</span>\n        <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">_weakref_hide</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span> <span class=\"o\">=</span> <span class=\"n\">ImageSlice</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_empty_image</span><span class=\"p\">(),</span> <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">_raw_to_displayed</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_empty</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_empty_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get empty image to use as the default before data is loaded.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the order of the displayed dimensions.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if rgb need to keep the final axis fixed during the</span>\n            <span class=\"c1\"># transpose. The index of the final axis depends on how many</span>\n            <span class=\"c1\"># axes are displayed.</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed_order</span> <span class=\"o\">+</span> <span class=\"p\">(</span>\n                <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed_order</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed_order</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_data_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Viewable image for the current slice. (compatibility)\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">view</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_data_raw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Raw image for the current slice. (compatibility)\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">raw</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_calc_data_range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'data'</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">'data'</span><span class=\"p\">:</span>\n            <span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span>\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">'slice'</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">view</span>  <span class=\"c1\"># ugh</span>\n            <span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span> <span class=\"k\">else</span> <span class=\"n\">data</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"mode must be either 'data' or 'slice', got </span><span class=\"si\">{</span><span class=\"n\">mode</span><span class=\"si\">!r}</span><span class=\"s2\">\"</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">calc_data_range</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dtype</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"array: Image data.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"nd\">@data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_keep_autoscale</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_contrast_limits</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Determine number of dimensions of the layer.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layer in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_data : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">)),</span> <span class=\"n\">shape</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"int: Current level of multiscale, or 0 if image.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span>\n\n    <span class=\"nd\">@data_level</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span> <span class=\"o\">==</span> <span class=\"n\">level</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span> <span class=\"o\">=</span> <span class=\"n\">level</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">level_shapes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"array: Shapes of each level of the multiscale or just of image.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n                <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">im</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"k\">for</span> <span class=\"n\">im</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n                <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">shapes</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">downsample_factors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"list: Downsample factors for each level of the multiscale.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">iso_threshold</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"float: threshold for isosurface.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iso_threshold</span>\n\n    <span class=\"nd\">@iso_threshold</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">iso_threshold</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iso_threshold</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_thumbnail</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">iso_threshold</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">attenuation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"float: attenuation rate for attenuated_mip rendering.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attenuation</span>\n\n    <span class=\"nd\">@attenuation</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">attenuation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attenuation</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_thumbnail</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">attenuation</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interpolation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return current interpolation mode.</span>\n\n<span class=\"sd\">        Selects a preset interpolation mode in vispy that determines how volume</span>\n<span class=\"sd\">        is displayed.  Makes use of the two Texture2D interpolation methods and</span>\n<span class=\"sd\">        the available interpolation methods defined in</span>\n<span class=\"sd\">        vispy/gloo/glsl/misc/spatial_filters.frag</span>\n\n<span class=\"sd\">        Options include:</span>\n<span class=\"sd\">        'bessel', 'bicubic', 'bilinear', 'blackman', 'catrom', 'gaussian',</span>\n<span class=\"sd\">        'hamming', 'hanning', 'hermite', 'kaiser', 'lanczos', 'mitchell',</span>\n<span class=\"sd\">        'nearest', 'spline16', 'spline36'</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The current interpolation mode</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interpolation</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@interpolation</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interpolation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set current interpolation mode.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interpolation</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Interpolation3D</span><span class=\"p\">(</span>\n                <span class=\"n\">interpolation</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interpolation</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Interpolation</span><span class=\"p\">(</span><span class=\"n\">interpolation</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">interpolation</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interpolation</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rendering</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return current rendering mode.</span>\n\n<span class=\"sd\">        Selects a preset rendering mode in vispy that determines how</span>\n<span class=\"sd\">        volume is displayed.  Options include:</span>\n\n<span class=\"sd\">        * ``translucent``: voxel colors are blended along the view ray until</span>\n<span class=\"sd\">          the result is opaque.</span>\n<span class=\"sd\">        * ``mip``: maximum intensity projection. Cast a ray and display the</span>\n<span class=\"sd\">          maximum value that was encountered.</span>\n<span class=\"sd\">        * ``additive``: voxel colors are added along the view ray until the</span>\n<span class=\"sd\">          result is saturated.</span>\n<span class=\"sd\">        * ``iso``: isosurface. Cast a ray until a certain threshold is</span>\n<span class=\"sd\">          encountered. At that location, lighning calculations are performed to</span>\n<span class=\"sd\">          give the visual appearance of a surface.</span>\n<span class=\"sd\">        * ``attenuated_mip``: attenuated maximum intensity projection. Cast a</span>\n<span class=\"sd\">          ray and attenuate values based on integral of encountered values,</span>\n<span class=\"sd\">          display the maximum value that was encountered after attenuation.</span>\n<span class=\"sd\">          This will make nearer objects appear more prominent.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The current rendering mode</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rendering</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@rendering</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rendering</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rendering</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set current rendering mode.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rendering</span> <span class=\"o\">=</span> <span class=\"n\">Rendering</span><span class=\"p\">(</span><span class=\"n\">rendering</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">rendering</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">experimental_slicing_plane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_slicing_plane</span>\n\n    <span class=\"nd\">@experimental_slicing_plane</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">experimental_slicing_plane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">SlicingPlane</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_slicing_plane</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Has the data for this layer been loaded yet.</span>\n\n<span class=\"sd\">        With asynchronous loading the layer might exist but its data</span>\n<span class=\"sd\">        for the current slice has not been loaded.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">loaded</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_raw_to_displayed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Determine displayed image from raw image.</span>\n\n<span class=\"sd\">        For normal image layers, just return the actual image.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        raw : array</span>\n<span class=\"sd\">            Raw array.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        image : array</span>\n<span class=\"sd\">            Displayed array.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">raw</span>\n        <span class=\"k\">return</span> <span class=\"n\">image</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_view_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the view given the indices to slice with.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_new_empty_slice</span><span class=\"p\">()</span>\n        <span class=\"n\">not_disp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span>\n\n        <span class=\"c1\"># Check if requested slice outside of data range</span>\n        <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">)</span>\n        <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">less</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"n\">not_disp</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"n\">not_disp</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">greater</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"n\">not_disp</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"n\">not_disp</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_empty</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If 3d redering just show lowest level of multiscale</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'Multiscale rendering is only supported in 2D. In 3D, only the lowest resolution scale is displayed'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">UserWarning</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_level</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n            <span class=\"c1\"># Slice currently viewed level</span>\n            <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_level</span>\n            <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downsample_factors</span><span class=\"p\">[</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span>\n                <span class=\"n\">downsampled_indices</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n                <span class=\"n\">downsampled_indices</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">downsampled_indices</span>\n\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">:</span>\n                <span class=\"n\">scale</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downsample_factors</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_level</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'tile2data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">scale</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_axes</span><span class=\"p\">:</span>\n                    <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">slice</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">],</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'tile2data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'tile2data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scale</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">level</span><span class=\"p\">][</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)]</span>\n            <span class=\"n\">image_indices</span> <span class=\"o\">=</span> <span class=\"n\">indices</span>\n\n            <span class=\"c1\"># Slice thumbnail</span>\n            <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">]</span>\n                <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downsample_factors</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span><span class=\"p\">,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span>\n                <span class=\"n\">downsampled_indices</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">downsampled_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n                <span class=\"n\">downsampled_indices</span><span class=\"p\">,</span>\n                <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">level_shapes</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span><span class=\"p\">,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">downsampled_indices</span>\n\n            <span class=\"n\">thumbnail_source</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_level</span><span class=\"p\">][</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'tile2data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n            <span class=\"n\">image_indices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">image_indices</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># For single-scale we don't request a separate thumbnail_source</span>\n            <span class=\"c1\"># from the ChunkLoader because in ImageSlice.chunk_loaded we</span>\n            <span class=\"c1\"># call request.thumbnail_source() and it knows to just use the</span>\n            <span class=\"c1\"># image itself is there is no explicit thumbnail_source.</span>\n            <span class=\"n\">thumbnail_source</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Load our images, might be sync or async.</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_SliceDataClass</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">image_indices</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">thumbnail_source</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_slice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_keep_autoscale</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_contrast_limits</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_SliceDataClass</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Use special ChunkedSlideData for async.</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">async_loading</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.experimental._chunked_slice_data</span> <span class=\"kn\">import</span> <span class=\"n\">ChunkedSliceData</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">ChunkedSliceData</span>\n        <span class=\"k\">return</span> <span class=\"n\">ImageSliceData</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_load_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">ImageSliceData</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Load the image and maybe thumbnail source.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : Slice</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n            <span class=\"c1\"># The load was synchronous.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_data_loaded</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sync</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The load will be asynchronous. Signal that our self.loaded</span>\n            <span class=\"c1\"># property is now false, since the load is in progress.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_data_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">ImageSliceData</span><span class=\"p\">,</span> <span class=\"n\">sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"The given data a was loaded, use it now.</span>\n\n<span class=\"sd\">        This routine is called synchronously from _load_async() above, or</span>\n<span class=\"sd\">        it is called asynchronously sometime later when the ChunkLoader</span>\n<span class=\"sd\">        finishes loading the data in a worker thread or process.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : ChunkRequest</span>\n<span class=\"sd\">            The request that was satisfied/loaded.</span>\n<span class=\"sd\">        sync : bool</span>\n<span class=\"sd\">            If True the chunk was loaded synchronously.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Transpose after the load.</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_order</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Pass the loaded data to the slice.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">on_loaded</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Slice rejected it, was it for the wrong indices?</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"c1\"># Notify the world.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Announcing we are in the loaded state will make our node visible</span>\n        <span class=\"c1\"># if it was invisible during the load.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sync</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO_ASYNC: Avoid calling self.refresh(), because it would</span>\n            <span class=\"c1\"># call our _set_view_slice(). Do we need a \"refresh without</span>\n            <span class=\"c1\"># set_view_slice()\" method that we can call?</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"p\">)</span>  <span class=\"c1\"># update vispy</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_thumbnail</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update thumbnail with current image data and colormap.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">:</span>\n            <span class=\"c1\"># ASYNC_TODO: Do not compute the thumbnail until we are loaded.</span>\n            <span class=\"c1\"># Is there a nicer way to prevent this from getting called?</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">thumbnail</span><span class=\"o\">.</span><span class=\"n\">view</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># float16 not supported by ndi.zoom</span>\n        <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">dtype</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float16</span><span class=\"p\">)]:</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n        <span class=\"n\">raw_zoom_factor</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n        <span class=\"n\">new_shape</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n            <span class=\"n\">raw_zoom_factor</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]),</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># smallest side should be 1 pixel wide</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">zoom_factor</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">new_shape</span> <span class=\"o\">/</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n            <span class=\"c1\"># warning filter can be removed with scipy 1.4</span>\n            <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">simplefilter</span><span class=\"p\">(</span><span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n                <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">ndi</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">(</span>\n                    <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">zoom_factor</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,),</span> <span class=\"n\">prefilter</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>  <span class=\"c1\"># image is RGBA</span>\n                <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"p\">)</span>\n                <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">downsampled</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span>\n                <span class=\"k\">if</span> <span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">:</span>\n                    <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">colormapped</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># image is RGB</span>\n                <span class=\"k\">if</span> <span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">:</span>\n                    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span>\n                        <span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,),</span>\n                        <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">255</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">),</span>\n                        <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">)</span>\n                <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">downsampled</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># warning filter can be removed with scipy 1.4</span>\n            <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">simplefilter</span><span class=\"p\">(</span><span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n                <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">ndi</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">(</span>\n                    <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">zoom_factor</span><span class=\"p\">,</span> <span class=\"n\">prefilter</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span>\n            <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">)</span>\n            <span class=\"n\">color_range</span> <span class=\"o\">=</span> <span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"n\">low</span>\n            <span class=\"k\">if</span> <span class=\"n\">color_range</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">downsampled</span> <span class=\"o\">-</span> <span class=\"n\">low</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">color_range</span>\n            <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">downsampled</span> <span class=\"o\">**</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gamma</span>\n            <span class=\"n\">color_array</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">())</span>\n            <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">color_array</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,))</span>\n            <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">colormapped</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Value of the data at a position in data coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value : tuple</span>\n<span class=\"sd\">            Value of the data.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"c1\"># for multiscale data map the coordinate from the data back to</span>\n            <span class=\"c1\"># the tile</span>\n            <span class=\"n\">coord</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'tile2data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">inverse</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">coord</span> <span class=\"o\">=</span> <span class=\"n\">position</span>\n\n        <span class=\"n\">coord</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n        <span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">raw</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">:</span>\n            <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">],</span> <span class=\"n\">shape</span><span class=\"p\">)):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">raw</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">])]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_level</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"c1\"># For async we add an on_chunk_loaded() method.</span>\n    <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">async_loading</span><span class=\"p\">:</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">on_chunk_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">ChunkRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"sd\">\"\"\"An asynchronous ChunkRequest was loaded.</span>\n\n<span class=\"sd\">            Parameters</span>\n<span class=\"sd\">            ----------</span>\n<span class=\"sd\">            request : ChunkRequest</span>\n<span class=\"sd\">                This request was loaded.</span>\n<span class=\"sd\">            \"\"\"</span>\n            <span class=\"c1\"># Convert the ChunkRequest to SliceData and use it.</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_SliceDataClass</span><span class=\"o\">.</span><span class=\"n\">from_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_data_loaded</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sync</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Image</span><span class=\"p\">(</span><span class=\"n\">_ImageBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get dictionary of layer state.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        state : dict</span>\n<span class=\"sd\">            Dictionary of layer state.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_base_state</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'rgb'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">,</span>\n                <span class=\"s1\">'multiscale'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">,</span>\n                <span class=\"s1\">'colormap'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">'contrast_limits'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span><span class=\"p\">,</span>\n                <span class=\"s1\">'interpolation'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interpolation</span><span class=\"p\">,</span>\n                <span class=\"s1\">'rendering'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendering</span><span class=\"p\">,</span>\n                <span class=\"s1\">'experimental_slicing_plane'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">experimental_slicing_plane</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(),</span>\n                <span class=\"s1\">'iso_threshold'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iso_threshold</span><span class=\"p\">,</span>\n                <span class=\"s1\">'attenuation'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attenuation</span><span class=\"p\">,</span>\n                <span class=\"s1\">'gamma'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gamma</span><span class=\"p\">,</span>\n                <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">async_octree</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">..image.experimental.octree_image</span> <span class=\"kn\">import</span> <span class=\"n\">_OctreeImageBase</span>\n\n<div class=\"viewcode-block\" id=\"Image\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Image.html#napari.layers.Image\">[docs]</a>    <span class=\"k\">class</span> <span class=\"nc\">Image</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">_OctreeImageBase</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_weakref_hide</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">weakref</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_raw_to_displayed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwarg</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_raw_to_displayed</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwarg</span><span class=\"p\">)</span>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}