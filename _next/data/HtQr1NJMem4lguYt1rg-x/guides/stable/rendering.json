{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"../../developers/index.html":{"level":1,"children":["../../developers/benchmarks.html","../../developers/contributing.html","../../developers/core_dev_guide.html","../../developers/profiling.html","../../developers/release.html","../../developers/testing.html","../../developers/docs.html"],"href":"../../developers/index.html","text":"Developer resources"},"../../developers/docs.html":{"level":2,"children":[],"href":"../../developers/docs.html","text":"Organization of Documentation for napari"},"../../developers/testing.html":{"level":2,"children":[],"href":"../../developers/testing.html","text":"Testing"},"../../developers/release.html":{"level":2,"children":[],"href":"../../developers/release.html","text":"Release Guide"},"../../developers/profiling.html":{"level":2,"children":[],"href":"../../developers/profiling.html","text":"Profiling"},"../../developers/core_dev_guide.html":{"level":2,"children":[],"href":"../../developers/core_dev_guide.html","text":"Core Developer Guide"},"../../developers/contributing.html":{"level":2,"children":[],"href":"../../developers/contributing.html","text":"Contributing Guide"},"../../developers/benchmarks.html":{"level":2,"children":[],"href":"../../developers/benchmarks.html","text":"Benchmarks"},"index.html":{"level":1,"children":["event_loop.html","threading.html","perfmon.html","#","docker.html","performance.html","magicgui.html","translations.html","rendering-explanation.html","connecting_events.html","connecting_events.html#long-running-blocking-functions","3D_interactivity.html"],"href":"index.html","text":"Developer guides"},"3D_interactivity.html":{"level":2,"children":[],"href":"3D_interactivity.html","text":"3D interactivity"},"connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"connecting_events.html":{"level":2,"children":[],"href":"connecting_events.html","text":"Hooking up your own events"},"rendering-explanation.html":{"level":2,"children":[],"href":"rendering-explanation.html","text":"Rendering in napari"},"translations.html":{"level":2,"children":[],"href":"translations.html","text":"Translations"},"magicgui.html":{"level":2,"children":[],"href":"magicgui.html","text":"Using magicgui in napari"},"performance.html":{"level":2,"children":[],"href":"performance.html","text":"Napari Performance"},"docker.html":{"level":2,"children":[],"href":"docker.html","text":"Napari in Docker (WIP)"},"#":{"level":2,"children":[],"href":"#","text":"Asynchronous Rendering"},"perfmon.html":{"level":2,"children":[],"href":"perfmon.html","text":"Performance Monitoring"},"threading.html":{"level":2,"children":[],"href":"threading.html","text":"Multithreading in napari"},"event_loop.html":{"level":2,"children":[],"href":"event_loop.html","text":"An Introduction to the Event Loop in napari"},"../../roadmaps/index.html":{"level":1,"children":["../../roadmaps/0_4.html","../../roadmaps/0_3_retrospective.html","../../roadmaps/0_3.html"],"href":"../../roadmaps/index.html","text":"Roadmaps"},"../../roadmaps/0_3.html":{"level":2,"children":[],"href":"../../roadmaps/0_3.html","text":"Roadmap 0.3"},"../../roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"../../roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"../../roadmaps/0_4.html":{"level":2,"children":[],"href":"../../roadmaps/0_4.html","text":"Roadmap 0.4"},"../../api/stable/index.html":{"level":1,"children":["../../api/stable/napari.layers.html","../../api/stable/napari.view_layers.html","../../api/stable/napari.types.html","../../api/stable/napari.utils.html","../../api/stable/napari.plugins.html","../../api/stable/napari.components.html","../../api/stable/napari.qt.threading.html","../../api/stable/napari.utils.perf.html","../../api/stable/napari.html"],"href":"../../api/stable/index.html","text":"API reference"},"../../api/stable/napari.html":{"level":2,"children":["../../api/stable/napari.Viewer.html"],"href":"../../api/stable/napari.html","text":"napari"},"../../api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"../../api/stable/napari.Viewer.html","text":"napari.Viewer"},"../../api/stable/napari.utils.perf.html":{"level":2,"children":["../../api/stable/napari.utils.perf.PerfEvent.html"],"href":"../../api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"../../api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"../../api/stable/napari.qt.threading.html":{"level":2,"children":["../../api/stable/napari.qt.threading.FunctionWorker.html","../../api/stable/napari.qt.threading.GeneratorWorker.html","../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html","../../api/stable/napari.qt.threading.WorkerBase.html","../../api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"../../api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"../../api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"../../api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"../../api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"../../api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"../../api/stable/napari.components.html":{"level":2,"children":["../../api/stable/napari.components.Camera.html","../../api/stable/napari.components.Dims.html","../../api/stable/napari.components.LayerList.html","../../api/stable/napari.components.ViewerModel.html"],"href":"../../api/stable/napari.components.html","text":"napari.components"},"../../api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"../../api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"../../api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"../../api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"../../api/stable/napari.plugins.html":{"level":2,"children":["../../api/stable/napari.plugins.NapariPluginManager.html"],"href":"../../api/stable/napari.plugins.html","text":"napari.plugins"},"../../api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"../../api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"../../api/stable/napari.utils.html":{"level":2,"children":["../../api/stable/napari.utils.Colormap.html","../../api/stable/napari.utils.nbscreenshot.html"],"href":"../../api/stable/napari.utils.html","text":"napari.utils"},"../../api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"../../api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"../../api/stable/napari.types.html":{"level":2,"children":["../../api/stable/napari.types.ArrayBase.html","../../api/stable/napari.types.Path.html","../../api/stable/napari.types.SampleDict.html","../../api/stable/napari.types.TracebackType.html","../../api/stable/napari.types.TypedDict.html"],"href":"../../api/stable/napari.types.html","text":"napari.types"},"../../api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"../../api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"../../api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"../../api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.Path.html","text":"napari.types.Path"},"../../api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"../../api/stable/napari.view_layers.html":{"level":2,"children":["../../api/stable/napari.view_layers.Viewer.html"],"href":"../../api/stable/napari.view_layers.html","text":"napari.view_layers"},"../../api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"../../api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"../../api/stable/napari.layers.html":{"level":2,"children":["../../api/stable/napari.layers.Image.html","../../api/stable/napari.layers.Labels.html","../../api/stable/napari.layers.Layer.html","../../api/stable/napari.layers.Points.html","../../api/stable/napari.layers.Shapes.html","../../api/stable/napari.layers.Surface.html","../../api/stable/napari.layers.Tracks.html","../../api/stable/napari.layers.Vectors.html"],"href":"../../api/stable/napari.layers.html","text":"napari.layers"},"../../api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"../../api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"../../api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"../../api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"../../api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"../../api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"../../api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"../../api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"../../release/index.html":{"level":1,"children":["../../release/release_0_4_10.html","../../release/release_0_4_9.html","../../release/release_0_4_8.html","../../release/release_0_4_7.html","../../release/release_0_4_6.html","../../release/release_0_4_5.html","../../release/release_0_4_4.html","../../release/release_0_4_3.html","../../release/release_0_4_2.html","../../release/release_0_4_1.html","../../release/release_0_4_0.html","../../release/release_0_3_8.html","../../release/release_0_3_7.html","../../release/release_0_3_6.html","../../release/release_0_3_5.html","../../release/release_0_3_4.html","../../release/release_0_3_3.html","../../release/release_0_3_2.html","../../release/release_0_3_1.html","../../release/release_0_3_0.html","../../release/release_0_2_12.html","../../release/release_0_2_11.html","../../release/release_0_2_10.html","../../release/release_0_2_9.html","../../release/release_0_2_8.html","../../release/release_0_2_7.html","../../release/release_0_2_6.html","../../release/release_0_2_5.html","../../release/release_0_2_4.html","../../release/release_0_2_3.html","../../release/release_0_2_1.html","../../release/release_0_2_0.html","../../release/release_0_1_5.html","../../release/release_0_1_3.html","../../release/release_0_1_0.html","../../release/release_0_4_11.html"],"href":"../../release/index.html","text":"Release notes"},"../../release/release_0_4_11.html":{"level":2,"children":[],"href":"../../release/release_0_4_11.html","text":"napari 0.4.11"},"../../release/release_0_1_0.html":{"level":2,"children":[],"href":"../../release/release_0_1_0.html","text":"napari 0.1.0"},"../../release/release_0_1_3.html":{"level":2,"children":[],"href":"../../release/release_0_1_3.html","text":"napari 0.1.3"},"../../release/release_0_1_5.html":{"level":2,"children":[],"href":"../../release/release_0_1_5.html","text":"napari 0.1.5"},"../../release/release_0_2_0.html":{"level":2,"children":[],"href":"../../release/release_0_2_0.html","text":"napari 0.2.0"},"../../release/release_0_2_1.html":{"level":2,"children":[],"href":"../../release/release_0_2_1.html","text":"napari 0.2.1"},"../../release/release_0_2_3.html":{"level":2,"children":[],"href":"../../release/release_0_2_3.html","text":"napari 0.2.3"},"../../release/release_0_2_4.html":{"level":2,"children":[],"href":"../../release/release_0_2_4.html","text":"napari 0.2.4"},"../../release/release_0_2_5.html":{"level":2,"children":[],"href":"../../release/release_0_2_5.html","text":"napari 0.2.5"},"../../release/release_0_2_6.html":{"level":2,"children":[],"href":"../../release/release_0_2_6.html","text":"napari 0.2.6"},"../../release/release_0_2_7.html":{"level":2,"children":[],"href":"../../release/release_0_2_7.html","text":"napari 0.2.7"},"../../release/release_0_2_8.html":{"level":2,"children":[],"href":"../../release/release_0_2_8.html","text":"napari 0.2.8"},"../../release/release_0_2_9.html":{"level":2,"children":[],"href":"../../release/release_0_2_9.html","text":"napari 0.2.9"},"../../release/release_0_2_10.html":{"level":2,"children":[],"href":"../../release/release_0_2_10.html","text":"napari 0.2.10"},"../../release/release_0_2_11.html":{"level":2,"children":[],"href":"../../release/release_0_2_11.html","text":"napari 0.2.11"},"../../release/release_0_2_12.html":{"level":2,"children":[],"href":"../../release/release_0_2_12.html","text":"napari 0.2.12"},"../../release/release_0_3_0.html":{"level":2,"children":[],"href":"../../release/release_0_3_0.html","text":"napari 0.3.0"},"../../release/release_0_3_1.html":{"level":2,"children":[],"href":"../../release/release_0_3_1.html","text":"napari 0.3.1"},"../../release/release_0_3_2.html":{"level":2,"children":[],"href":"../../release/release_0_3_2.html","text":"napari 0.3.2"},"../../release/release_0_3_3.html":{"level":2,"children":[],"href":"../../release/release_0_3_3.html","text":"napari 0.3.3"},"../../release/release_0_3_4.html":{"level":2,"children":[],"href":"../../release/release_0_3_4.html","text":"napari 0.3.4"},"../../release/release_0_3_5.html":{"level":2,"children":[],"href":"../../release/release_0_3_5.html","text":"napari 0.3.5"},"../../release/release_0_3_6.html":{"level":2,"children":[],"href":"../../release/release_0_3_6.html","text":"napari 0.3.6"},"../../release/release_0_3_7.html":{"level":2,"children":[],"href":"../../release/release_0_3_7.html","text":"napari 0.3.7"},"../../release/release_0_3_8.html":{"level":2,"children":[],"href":"../../release/release_0_3_8.html","text":"napari 0.3.8"},"../../release/release_0_4_0.html":{"level":2,"children":[],"href":"../../release/release_0_4_0.html","text":"napari 0.4.0"},"../../release/release_0_4_1.html":{"level":2,"children":[],"href":"../../release/release_0_4_1.html","text":"napari 0.4.1"},"../../release/release_0_4_2.html":{"level":2,"children":[],"href":"../../release/release_0_4_2.html","text":"napari 0.4.2"},"../../release/release_0_4_3.html":{"level":2,"children":[],"href":"../../release/release_0_4_3.html","text":"napari 0.4.3"},"../../release/release_0_4_4.html":{"level":2,"children":[],"href":"../../release/release_0_4_4.html","text":"napari 0.4.4"},"../../release/release_0_4_5.html":{"level":2,"children":[],"href":"../../release/release_0_4_5.html","text":"napari 0.4.5"},"../../release/release_0_4_6.html":{"level":2,"children":[],"href":"../../release/release_0_4_6.html","text":"napari 0.4.6"},"../../release/release_0_4_7.html":{"level":2,"children":[],"href":"../../release/release_0_4_7.html","text":"napari 0.4.7"},"../../release/release_0_4_8.html":{"level":2,"children":[],"href":"../../release/release_0_4_8.html","text":"napari 0.4.8"},"../../release/release_0_4_9.html":{"level":2,"children":[],"href":"../../release/release_0_4_9.html","text":"napari 0.4.9"},"../../release/release_0_4_10.html":{"level":2,"children":[],"href":"../../release/release_0_4_10.html","text":"napari 0.4.10"},"../../plugins/stable/index.html":{"level":1,"children":["../../plugins/stable/for_napari_developers.html","../../plugins/stable/for_plugin_developers.html","../../plugins/stable/hook_specifications.html","../../plugins/stable/find-and-install-plugin.html"],"href":"../../plugins/stable/index.html","text":"Plugins"},"../../plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"../../plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"../../plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"../../plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"../../plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"../../plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"../../plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"../../plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"../../tutorials/index.html":{"level":1,"children":["../../tutorials/fundamentals/index.html","../../tutorials/applications/index.html"],"href":"../../tutorials/index.html","text":"Tutorials"},"../../tutorials/applications/index.html":{"level":2,"children":["../../tutorials/applications/annotate_segmentation.html","../../tutorials/applications/annotate_points.html","../../tutorials/applications/dask.html","../../tutorials/applications/napari_imageJ.html","../../tutorials/applications/cell_tracking.html"],"href":"../../tutorials/applications/index.html","text":"Applications"},"../../tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"../../tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"../../tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"../../tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"../../tutorials/applications/dask.html":{"level":3,"children":[],"href":"../../tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"../../tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"../../tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"../../tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"../../tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"../../tutorials/fundamentals/index.html":{"level":2,"children":["../../tutorials/fundamentals/installation.html","../../tutorials/fundamentals/getting_started.html","../../tutorials/fundamentals/viewer.html","../../tutorials/fundamentals/image.html","../../tutorials/fundamentals/labels.html","../../tutorials/fundamentals/points.html","../../tutorials/fundamentals/shapes.html","../../tutorials/fundamentals/surface.html","../../tutorials/fundamentals/tracks.html","../../tutorials/fundamentals/vectors.html"],"href":"../../tutorials/fundamentals/index.html","text":"Fundamentals"},"../../tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"../../tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"../../tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"../../tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"../../tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/points.html","text":"points layer tutorial"},"../../tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"../../tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/image.html","text":"image layer tutorial"},"../../tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"../../tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"../../tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"../../community/index.html":{"level":1,"children":["../../community/mission_and_values.html","../../community/team.html","../../community/code_of_conduct.html","../../community/code_of_conduct_reporting.html","../../community/governance.html"],"href":"../../community/index.html","text":"Community"},"../../community/governance.html":{"level":2,"children":[],"href":"../../community/governance.html","text":"Governance Model"},"../../community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"../../community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"../../community/code_of_conduct.html":{"level":2,"children":[],"href":"../../community/code_of_conduct.html","text":"Code of Conduct"},"../../community/team.html":{"level":2,"children":[],"href":"../../community/team.html","text":"About the Project and Team"},"../../community/mission_and_values.html":{"level":2,"children":[],"href":"../../community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["../../community/index.html","../../tutorials/index.html","../../plugins/stable/index.html","../../release/index.html","../../api/stable/index.html","../../roadmaps/index.html","index.html","../../developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Asynchronous Rendering","pageBodyHtml":"\n        <div class=\"section\" id=\"asynchronous-rendering\">\n<span id=\"rendering\"></span>\n<p>As discussed in the explanations document on rendering, asynchronous\nrendering is a feature that allows napari to stay usable and responsive\neven when data is loading slowly. There are two experimental asynchronous\nrendering features, they can be enabled using the environment variables\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE</span></code>.</p>\n<div class=\"section\" id=\"napari-async\">\n<h2>NAPARI_ASYNC</h2>\n<p>Running napari with <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC=1</span></code> enables asynchronous rendering using\nthe existing <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class. The\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class will no longer call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">np.asarray()</span></code> in the GUI thread. We do this so that if <code class=\"docutils literal notranslate\"><span class=\"pre\">np.asarray()</span></code>\nblocks on IO or a computation, the GUI thread will not block and the\nframerate will not suffer.</p>\n<p>To avoid blocking the GUI thread the\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class will load chunks using the\nnew <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code>\nclass. The\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> will\ncall <code class=\"docutils literal notranslate\"><span class=\"pre\">np.asarray()</span></code> in a worker thread. When the worker thread finishes\nit will call <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">on_chunk_loaded()</span></code> with\nthe loaded data. The next frame <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a>\ncan display the new data.</p>\n<div class=\"section\" id=\"time-series-data\">\n<h3>Time-series Data</h3>\n<p>Without <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC</span></code> napari will block when switching slices. Napari\nwill hang until the new slice has loaded. If the slice loads slowly enough\nyou might see the “spinning wheel of death” on a Mac indicating the process\nis hung.</p>\n<p>Asynchronous rendering allows the user to interrupt the loading of a slice\nat any time. The user can freely move the slice slider. This is especially\nnice for remote or slow-loading data.</p>\n</div>\n<div class=\"section\" id=\"multi-scale-images\">\n<h3>Multi-scale Images</h3>\n<p>With today’s <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class there are no\ntiles or chunks. Instead, whenever the camera is panned or zoomed napari\nfetches all the data needed to draw the entire current canvas. This\nactually works amazingly well with local data. Fetching the whole canvas of\ndata each time can be quite fast.</p>\n<p>With remote or other high latency data, however, this method can be very\nslow. Even if you pan only a tiny amount, napari has to fetch the whole\ncanvas worth of data, and you cannot interrupt the load to further adjust\nthe camera.</p>\n<p>With <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC</span></code> overall performance is the same, but the advantage is\nyou can interrupt the load by moving the camera at any time. This is a nice\nimprovement, but working with slow-loading data is still slow. Most large\nimage viewers improve on this experience with chunks or tiles. With chunks\nor tiles when the image is panned the existing tiles are translated and\nre-used. Then the viewer only needs to fetch tiles which newly slid onto\nthe screen. This style of rendering what our <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE</span></code> flag\nenables.</p>\n</div>\n</div>\n<div class=\"section\" id=\"napari-octree\">\n<h2>NAPARI_OCTREE</h2>\n<p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE=1</span></code> to use the experimental\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> class\ninstead of the normal <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class. The\nnew <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code>\nclass will use the same\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC</span></code> enables. In addition, <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE</span></code> will use the new\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>\ninstead of the Vispy <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageVisual</span></code> class that napari’s\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class uses.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The current <code class=\"docutils literal notranslate\"><span class=\"pre\">OCTREE</span></code> implementation only fully supports a single 2D image and\nmay not function with 3D images or multiple images. Improving support\nfor 3D and multiple images is part of future work on the <code class=\"docutils literal notranslate\"><span class=\"pre\">OCTREE</span></code>.</p>\n</div>\n<p>See <a class=\"reference internal\" href=\"#octree-config\"><span class=\"std std-ref\">Octree Configuration File</span></a> for Octree configuration options.</p>\n<div class=\"section\" id=\"octree-visuals\">\n<h3>Octree Visuals</h3>\n<p>The visual portion of Octree rendering is implemented by three classes:\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VispyTiledImageLayer</span></code>,\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>,\nand <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code>.</p>\n<p>The first two classes are named “tiled image” rather than “octree” because\ncurrently they do not know that they are rendering out of an octree. We did\nthis intentionally to keep the visuals simpler and more general. However,\nthe approach has some limitations, and we might later need to create a\nsubclass of\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>\nwhich is Octree-specific, see <a class=\"reference internal\" href=\"#future-work-atlas-2d\"><span class=\"std std-ref\">Future Work: Extending TextureAtlas2D</span></a>.</p>\n<p>The <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> class\nis a subclass of the generic Vispy <code class=\"docutils literal notranslate\"><span class=\"pre\">Texture2D</span></code> class. Like <code class=\"docutils literal notranslate\"><span class=\"pre\">Texture2D</span></code>\nthe <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> class\nowns one texture. However\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> uses this\none texture as an “atlas” which can hold multiple tiles.</p>\n<p>For example, by default\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> uses a\n(4096, 4096) texture that stores 256 different (256, 256) pixel tiles.\nAdding or remove a single tile from the full atlas texture is very fast.\nUnder the hood adding one tile calls <code class=\"docutils literal notranslate\"><span class=\"pre\">glTexSubImage2D()</span></code> which only\nupdates the data in that specific (256, 256) portion of the full texture.</p>\n<p>Aside from the data transfer cost,\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> is also\nfast because we do not have to modify the scene graph or rebuild any\nshaders when a tile is added or removed. In an early version of tiled\nrendering we created a new <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageVisual</span></code> for every tile. This resulted in\nscene graph changes and shader rebuilds. At the time the scene graph\nchanges were causing crashes with <code class=\"docutils literal notranslate\"><span class=\"pre\">PyQt5</span></code>, but the atlas approach is better\nfor multiple reasons, so even if that crash were fixed the atlas is a\nbetter solution.</p>\n</div>\n<div class=\"section\" id=\"octree-rendering\">\n<h3>Octree Rendering</h3>\n<p>The interface between the visuals and the Octree is the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> method\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_drawable_chunks()</span></code>.\nThe method is called by the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VispyTiledImageLayer</span></code>\nmethod\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_update_drawn_chunks()</span></code>\nevery frame so it can update which tiles are drawn.\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> calls\nthe\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_intersection()</span></code>\nmethod on its\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeSlice</span></code> to get\nan\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeIntersection</span></code>\nobject which contains the “ideal chunks” that should be drawn for the\ncurrent camera position.</p>\n<p>The ideal chunks are the chunks at the preferred level of detail, the level\nof detail that best matches the current canvas resolution. Drawing chunks\nwhich are more detailed that this will look fine, the graphics card will\ndownsample them to the screen resolution, but it’s not efficient to use\nhigher resolution chunks than are needed. Meanwhile drawing chunks that are\ncoarser than the ideal level will look blurry, but it’s much better than\ndrawing nothing.</p>\n<p>The decision about what level of detail to use is made by the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeLoader</span></code>\nclass and its method\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_drawable_chunks()</span></code>.\nThere are many different approaches one could take here as far as what to\ndraw when. Today we are doing something reasonable but it could potentially\nbe improved. In addition to deciding what level of detail to draw for each\nideal chunk, the class initiates asynchronous loads with the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> for\nchunks it wants to draw in the future.</p>\n<p>The loader will only use chunks from a higher resolution if they are\nalready being drawn. For example when zooming out. However, it will never\ninitiate loads on higher resolution chunks, since it’s better off loading\nand drawing the ideal chunks.</p>\n<p>The loader will load lower resolution chunks in some cases. Although this\ncan slightly delay when the ideal chunks are loaded, it’s a very quick way\nto get reasonable looking “coverage” of the area of interest. Often data\nfrom one or two levels up isn’t even that noticeably degraded. This table\nshows how many ideal chunks are “covered” by a chunk at a higher level:</p>\n<table class=\"colwidths-auto docutils align-default\">\n<thead>\n<tr class=\"row-odd\"><th class=\"text-align:right head\"><p>Levels Above Ideal</p></th>\n<th class=\"text-align:right head\"><p>Coverage</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td class=\"text-align:right\"><p>1</p></td>\n<td class=\"text-align:right\"><p>4</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:right\"><p>2</p></td>\n<td class=\"text-align:right\"><p>16</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:right\"><p>3</p></td>\n<td class=\"text-align:right\"><p>64</p></td>\n</tr>\n</tbody>\n</table>\n<p>Although data 3 levels above will be quite blurry, it’s pretty amazing you\ncan load one chunk and it will cover 64 ideal chunks. This is the heart of\nthe power of Octrees, Quadtrees or image pyramids.</p>\n</div>\n<div class=\"section\" id=\"octree-configuration-file\">\n<span id=\"octree-config\"></span><h3>Octree Configuration File</h3>\n<p>Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE=1</span></code> enables Octree rendering with the default\nconfiguration. To customize the configuration set <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE</span></code> to be\nthe path of a JSON config file, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE=/tmp/octree.json</span></code>.</p>\n<p>See <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">DEFAULT_OCTREE_CONFIG</span></code> for the current\nconfig file format:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"s2\">\"loader_defaults\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"log_path\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"force_synchronous\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"num_workers\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"use_processes\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"auto_sync_ms\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"delay_queue_ms\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"octree\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"enabled\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tile_size\"</span><span class=\"p\">:</span> <span class=\"mi\">256</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"log_path\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"loaders\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"num_workers\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">\"delay_queue_ms\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">},</span>\n            <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"num_workers\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">\"delay_queue_ms\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">loader_defaults</span></code> key contains settings that will be used by the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code>.</p>\n<table class=\"colwidths-auto docutils align-default\">\n<thead>\n<tr class=\"row-odd\"><th class=\"text-align:left head\"><p>Setting</p></th>\n<th class=\"text-align:left head\"><p>Description</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">log_path</span></code></p></td>\n<td class=\"text-align:left\"><p>Write <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> log file to this path. For debugging.</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">force_synchronous</span></code></p></td>\n<td class=\"text-align:left\"><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> loads synchronously.</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">num_workers</span></code></p></td>\n<td class=\"text-align:left\"><p>The number of worker threads or processes.</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">use_processes</span></code></p></td>\n<td class=\"text-align:left\"><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> use worker processes instead of threads.</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">auto_async_ms</span></code></p></td>\n<td class=\"text-align:left\"><p>Switch to synchronous if loads are faster than this.</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">delay_queue_ms</span></code></p></td>\n<td class=\"text-align:left\"><p>Delay loads by this much.</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">num_workers</span></code></p></td>\n<td class=\"text-align:left\"><p>The number of worker threads or processes.</p></td>\n</tr>\n</tbody>\n</table>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">octree</span></code> key contains these settings:</p>\n<table class=\"colwidths-auto docutils align-default\">\n<thead>\n<tr class=\"row-odd\"><th class=\"text-align:left head\"><p>Setting</p></th>\n<th class=\"text-align:left head\"><p>Description</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">enabled</span></code></p></td>\n<td class=\"text-align:left\"><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code> then use the old <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> class.</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">tile_size</span></code></p></td>\n<td class=\"text-align:left\"><p>Size of render tiles to use for rending.</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">log_path</span></code></p></td>\n<td class=\"text-align:left\"><p>Octree specific log file for debugging.</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p><code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code></p></td>\n<td class=\"text-align:left\"><p>Optional custom loaders, see below.</p></td>\n</tr>\n</tbody>\n</table>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code> key lets you define and configure multiple\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoaderPool</span></code> pools. The\nkey of each loader is the level relative to the ideal level. In the above\nexample configuration we define two loaders. The first with key <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> is for\nloading chunks at the ideal level or one above. While the second with key\n<code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code> will load chunks two above the ideal level or higher.</p>\n<p>Each loader uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">loader_defaults</span></code> but you can override the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">num_workers</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">auto_sync_ms</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">delay_queue_ms</span></code> values in\neach loader defined in <code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code>.</p>\n</div>\n<div class=\"section\" id=\"multiple-loaders\">\n<h3>Multiple Loaders</h3>\n<p>We allow multiple loaders to improve loading performance. There are a lot\nof different strategies one could use when loading chunks. For example,\nwe tend to load chunks at a higher level prior to loading the chunks\nat the ideal level. This gets “coverage” on the screen quickly, and then\nthe data can be refined by loading the ideal chunks.</p>\n<p>One consideration is during rapid movement of the camera it’s easy to clog\nup the loader pool with workers loading chunks that have already moved out\nof view. The\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DelayQueue</span></code> was\ncreated to help with this problem.</p>\n<p>While we can’t cancel a load if a worker has started working on it, we can\ntrivially cancel loads that are still in our delay queue. If the chunk goes\nout of view, we cancel the load. If the user pauses for a bit, we initiate\nthe loads.</p>\n<p>With multiple loaders we can delay the ideal chunks, but we can configure\nzero delay for the higher levels. A single chunk from two levels up will\ncover 16 ideal chunks. So immediately loading them is a good way to get\ndata on the screen quickly. When the camera stops moving the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoaderPool</span></code> for the\nideal layer will often be empty. So all of those workers can immediately\nstart loading the ideal chunks.</p>\n<p>The ability to have multiple loaders was only recently added. We still need\nto experiment to figure out the best configuration. And figure out how that\nconfiguration needs to vary based on the latency of the data or other\nconsiderations.</p>\n</div>\n<div class=\"section\" id=\"future-work-compatibility-with-the-existing-image-class\">\n<h3>Future Work: Compatibility with the existing Image class</h3>\n<p>The focus for initial Octree development was Octree-specific behaviors and\ninfrastructure. Loading chunks asynchronously and rendering them as\nindividual tiles. One question we wanted to answer was will a Python/Vispy\nimplementation of Octree rendering be performant enough? Because if not, we\nmight need a totally different approach. It’s not been fully proven out,\nbut it seems like the performance will be good enough, so the next step is\nfull compatibility with the existing\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class.</p>\n<p>The <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code>\nclass is derived from <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a>, while\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VispyTiledImageLayer</span></code>\nis derived from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VispyImageLayer</span></code>,\nand\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code> is\nderived from the regular Vispy <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageVisual</span></code> class. To bring full\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> capability to\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> in most\ncases we just need to duplicate what those base classes are doing, but do\nit on a per-tile bases. Since there is no full image for them to operate\non. This might involve chaining to the base class or it could mean\nduplicating that functionality somehow in the derived class.</p>\n<p>Some <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> functionality that needs to\nbe duplicated in Octree code:</p>\n<div class=\"section\" id=\"contrast-limits-and-color-transforms\">\n<h4>Contrast Limits and Color Transforms</h4>\n<p>The contrast limit code in Vispy’s <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageVisual</span></code> needs to be moved into\nthe tiled visual’s\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_build_texture()</span></code>.\nInstead operating on <code class=\"docutils literal notranslate\"><span class=\"pre\">self.data</span></code> it needs to transform tile’s which are newly\nbeing added to the visual. The color transform similarly needs to be per-tile.</p>\n</div>\n<div class=\"section\" id=\"blending-and-opacity\">\n<h4>Blending and Opacity</h4>\n<p>It might be hard to get opacity working correctly for tiles where loads are\nin progress. The way\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>\nworks today is the\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeLoader</span></code>\npotentially passes the visual tiles of various sizes, from different levels\nof the Octree. The tiles are rendered on top of each other from largest\n(coarsest level) to smallest (finest level). This is a nice trick so that\nbigger tiles provide “coverage” for an area, while the smaller tiles add\ndetail only where that data has been loaded.</p>\n<p>However, this breaks blending and opacity. We draw multiple tiles on top of\neach other, so the image is blending with itself. One solution which is\nkind of a big change is keep\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>\nfor the generic “tiled” case, but introduce a new <code class=\"docutils literal notranslate\"><span class=\"pre\">OctreeVisual</span></code> that\nknows about the Octree. It can walk up and down the Octree chopping up\nlarger tiles to make sure we do not render anything on top of anything\nelse.</p>\n<p>Until we do that, we could punt on making things look correct while loads\nare in progress. We could even highlight the fact that a tile has not been\nfully loaded (purposely making it look different until the data is fully\nloaded). Aside from blending, this would address a common complaint with\ntiled image viewers: you often can’t tell if the data is still being\nloaded. This could be a big issue for scientific uses, you don’t want\npeople drawing the wrong conclusions from the data.</p>\n</div>\n<div class=\"section\" id=\"time-series-multiscale\">\n<h4>Time-series Multiscale</h4>\n<p>To make time-series multiscale work should not be too hard. We just need to\ncorrectly create a new\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeSlice</span></code> every\ntime the slice changes.</p>\n<p>The challenge will probably be performance. For starters we probably need\nto stop creating the “extra” downsampled levels, as described in <a class=\"reference internal\" href=\"#future-work-atlas-2d\"><span class=\"std std-ref\">Future Work: Extending TextureAtlas2D</span></a>. We need to make sure constructing and\ntearing down the Octree is fast enough, and make sure loads for the\nprevious slices are canceled and everything is cleaned up.</p>\n</div>\n</div>\n<div class=\"section\" id=\"future-work-extending-textureatlas2d\">\n<span id=\"future-work-atlas-2d\"></span><h3>Future Work: Extending TextureAtlas2D</h3>\n<p>We could improve our\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextureAtlas2D</span></code> class in\na number of ways:</p>\n<ol class=\"simple\">\n<li><p>Support setting the atlas’s full texture size on the fly.</p></li>\n<li><p>Support setting the atlas’s tile size on the fly.</p></li>\n<li><p>Support a mix of tiles sizes in one atlas.</p></li>\n<li><p>Allow an atlas to have more than one backing texture.</p></li>\n</ol>\n<p>One reason to consider these changes is so we could support “large tiles”\nin certain cases. Often the coarsest level of multi-scale data “in the\nwild” is much bigger than one of our (256, 256) tiles. Today we solve that\nby creating additional Octree levels, downsampling the data until the\ncoarsest level fits within a single tile.</p>\n<p>If we could support multiple tiles sizes and multiple backing textures, we\ncould potentially have “interior tiles” which were small, but then allow\nlarge root tiles. Graphics cards can handle pretty big textures. A layer\nthat’s (100000, 100000) obviously needs to be broken into tiles, b¡ut a\nlayer that’s (4096, 4096) really does not need to be broken into tiles.\nThat could be a single large tile.</p>\n<p>Long term it would be nice if we did not have to support two image classes:\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> and\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code>.\nMaintaining two code paths and two sets of visuals will become tiresome and\nlead to discrepancies and bugs.</p>\n<p>Instead, it would be nice if\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> became\nthe only image class. One image class to rule them all. For that to happen,\nthough, we need to render small images just as efficiently as the\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> class does today. We do not want\nOctree rendering to worsen cases which work well today. To keep today’s\nperformance for smaller images we probably need to add support for variable\nsize tiles.</p>\n</div>\n<div class=\"section\" id=\"future-work-level-zero-only-octrees\">\n<h3>Future Work: Level Zero Only Octrees</h3>\n<p>In issue <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1300\">#1300</a> it takes\n1500ms to switch slices. There we are rendering a (16384, 16384) image that\nis entirely in RAM. The delay is not from loading into RAM, it’s already in\nRAM, the delay is from transferring all that data to VRAM in one big gulp.</p>\n<p>The image is not a multi-scale image. So can we turn it into a muli-scale\nimage? Generally we’ve found downsampling to create multi-scale image\nlayers is slow. So the question is how can we draw this large image without\nhanging? One idea is we could create an Octree that only has a level zero\nand no downsampled levels.</p>\n<p>This is an option because chopping up a <code class=\"docutils literal notranslate\"><span class=\"pre\">numpy</span></code> array into tiles is very\nfast. This chopping up phase is really just creating a bunch of “views”\ninto the single existing array. So creating a level zero Octree should be\nvery fast. For there we can use our existing Octree code and our existing\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>\nto transfer over one tile at a time without hurting the frame rate.</p>\n<p>The insight here is our Octree code is really two things, one is an Octree\nbut two is a tiled or chunked image, basically a flat image chopped into a\ngrid of tiles. How would this look to the user? With this approach\nswitching slices would be similar to panning and zooming a multiscale\nOctree image, you’d see the new tiles loading in over time, but the\nframerate would not tank, and you could switch slices at any time.</p>\n</div>\n<div class=\"section\" id=\"future-work-caching\">\n<h3>Future Work: Caching</h3>\n<p>Basically no work has gone into caching or memory management for Octree\ndata. It’s very likely there are leaks and extended usage will run out of\nmemory. This hasn’t been addressed because using Octree for long periods of\ntime is just now becoming possible.</p>\n<p>One caching issue is figuring out how to combine the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkCache</span></code> with\nDasks’s built-in caching. We probably want to keep the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkCache</span></code> for\nrendering non-Dask arrays? But when using Dask, we defer to its cache? We\ncertainly don’t want to cache the data in both places.</p>\n<p>Another issue is whether to cache <code class=\"docutils literal notranslate\"><span class=\"pre\">OctreeChunks</span></code> or tiles in the visual,\nbeyond just caching the raw data. If re-creating both is fast enough, the\nsimpler thing is evict them fully when a chunk falls out of view. And\nre-create them if it comes back in view. It’s simplest to keep nothing but\nwhat we are currently drawing.</p>\n<p>However if that’s not fast enough, we could have a MRU cache of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OctreeChunks</span></code> and tiles in VRAM, so that reviewing the same data is\nnearly instant. This is adding complexity, but the performance might be\nworth it.</p>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./guides/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"id":"napari-async","text":"NAPARI_ASYNC"},{"id":"napari-octree","text":"NAPARI_OCTREE"}]}},"__N_SSG":true}