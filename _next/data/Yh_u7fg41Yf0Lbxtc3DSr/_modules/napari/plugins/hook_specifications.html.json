{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/release/index.html":{"level":1,"children":["/release/release_0_4_12.html","/release/release_0_4_11.html","/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_4_12.html":{"level":2,"children":[],"href":"/release/release_0_4_12.html","text":"napari 0.4.12"},"/glossary.html":{"level":1,"children":[],"href":"/glossary.html","text":"Glossary"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html","/developers/translations.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/translations.html":{"level":2,"children":[],"href":"/developers/translations.html","text":"Translations"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html","/api/stable/napari.utils.progress.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.progress.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.progress.html","text":"napari.utils.progress"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html","/api/stable/napari.types.partial.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.partial.html":{"level":3,"children":[],"href":"/api/stable/napari.types.partial.html","text":"napari.types.partial"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html","/community/working_groups.html","/community/meeting_schedule.html"],"href":"/community/index.html","text":"Community"},"/community/meeting_schedule.html":{"level":2,"children":[],"href":"/community/meeting_schedule.html","text":"Meeting schedule"},"/community/working_groups.html":{"level":2,"children":[],"href":"/community/working_groups.html","text":"Working groups"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the project and team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/best_practices.html","/plugins/stable/npe2_migration_guide.html","/plugins/stable/guides.html","/plugins/stable/first_plugin.html","/plugins/stable/test_deploy.html","/plugins/stable/npe1.html","/plugins/stable/find_and_install_plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find_and_install_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find_and_install_plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/npe1.html":{"level":2,"children":[],"href":"/plugins/stable/npe1.html","text":"1st Gen Plugin Guide (Deprecated)"},"/plugins/stable/test_deploy.html":{"level":2,"children":[],"href":"/plugins/stable/test_deploy.html","text":"Test and Deploy"},"/plugins/stable/first_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/first_plugin.html","text":"Your First Plugin"},"/plugins/stable/guides.html":{"level":2,"children":[],"href":"/plugins/stable/guides.html","text":"Contribution Guides"},"/plugins/stable/npe2_migration_guide.html":{"level":2,"children":[],"href":"/plugins/stable/npe2_migration_guide.html","text":"npe2 migration guide"},"/plugins/stable/best_practices.html":{"level":2,"children":[],"href":"/plugins/stable/best_practices.html","text":"Best practices"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/magicgui.html","/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/rendering-explanation.html","/guides/stable/rendering.html","/guides/stable/performance.html","/guides/stable/3D_interactivity.html","/guides/stable/events_reference.html","/guides/stable/contexts_expressions.html"],"href":"/guides/stable/index.html","text":"In-depth explanations"},"/guides/stable/contexts_expressions.html":{"level":2,"children":[],"href":"/guides/stable/contexts_expressions.html","text":"Contexts and Expressions in napari"},"/guides/stable/events_reference.html":{"level":2,"children":[],"href":"/guides/stable/events_reference.html","text":"Events reference"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"napari performance"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous rendering"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An introduction to the event loop in napari"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/howtos/index.html":{"level":1,"children":["/howtos/connecting_events.html","/howtos/napari_imageJ.html","/howtos/docker.html","/howtos/perfmon.html"],"href":"/howtos/index.html","text":"How-to guides"},"/howtos/perfmon.html":{"level":2,"children":[],"href":"/howtos/perfmon.html","text":"Performance monitoring"},"/howtos/docker.html":{"level":2,"children":[],"href":"/howtos/docker.html","text":"Napari in Docker"},"/howtos/napari_imageJ.html":{"level":2,"children":[],"href":"/howtos/napari_imageJ.html","text":"napari + ImageJ how-to guide"},"/howtos/connecting_events.html":{"level":2,"children":[],"href":"/howtos/connecting_events.html","text":"Hooking up your own events"},"/tutorials/index.html":{"level":1,"children":["/tutorials/segmentation/index.html","/tutorials/tracking/index.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/further-resources/napari-workshops.html","/tutorials/tracking/cell_tracking.html","/tutorials/segmentation/annotate_segmentation.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/segmentation/annotate_segmentation.html":{"level":2,"children":[],"href":"/tutorials/segmentation/annotate_segmentation.html","text":"Annotating segmentation with text and bounding boxes"},"/tutorials/tracking/cell_tracking.html":{"level":2,"children":[],"href":"/tutorials/tracking/cell_tracking.html","text":"Single cell tracking with napari"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/dask.html":{"level":2,"children":[],"href":"/tutorials/applications/dask.html","text":"Using Dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":2,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"Annotating videos with napari"},"/tutorials/tracking/index.html":{"level":2,"children":[],"href":"/tutorials/tracking/index.html","text":"Tracking"},"/tutorials/segmentation/index.html":{"level":2,"children":[],"href":"/tutorials/segmentation/index.html","text":"Segmentation"},"/tutorials/start_index.html":{"level":1,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/start_index.html","text":"Getting Started"},"/tutorials/fundamentals/vectors.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"Getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"How to install napari on your machine"}},"rootGlobalHeaders":["/tutorials/start_index.html","/tutorials/index.html","/howtos/index.html","/guides/stable/index.html","/plugins/stable/index.html","/community/index.html","/api/stable/index.html","/developers/index.html","/glossary.html","/release/index.html","/roadmaps/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.plugins.hook_specifications","pageFrontMatter":{},"previewImage":"","previewDescription":"","appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">All napari hook specifications for pluggable functionality are defined here.</span>\n\n<span class=\"sd\">A *hook specification* is a function signature (with documentation) that</span>\n<span class=\"sd\">declares an API that plugin developers must adhere to when providing hook</span>\n<span class=\"sd\">implementations.  *Hook implementations* provided by plugins (and internally by</span>\n<span class=\"sd\">napari) will then be invoked in various places throughout the code base.</span>\n\n<span class=\"sd\">When implementing a hook specification, pay particular attention to the number</span>\n<span class=\"sd\">and types of the arguments in the specification signature, as well as the</span>\n<span class=\"sd\">expected return type.</span>\n\n<span class=\"sd\">To allow for hook specifications to evolve over the lifetime of napari,</span>\n<span class=\"sd\">hook implementations may accept *fewer* arguments than defined in the</span>\n<span class=\"sd\">specification. (This allows for extending existing hook arguments without</span>\n<span class=\"sd\">breaking existing implementations). However, implementations must not require</span>\n<span class=\"sd\">*more* arguments than defined in the spec.</span>\n\n<span class=\"sd\">For more general background on the plugin hook calling mechanism, see the</span>\n<span class=\"sd\">`napari-plugin-manager documentation</span>\n<span class=\"sd\">&lt;https://napari-plugin-engine.readthedocs.io/en/latest/&gt;`_.</span>\n\n<span class=\"sd\">.. NOTE::</span>\n<span class=\"sd\">    Hook specifications are a feature borrowed from `pluggy</span>\n<span class=\"sd\">    &lt;https://pluggy.readthedocs.io/en/latest/#specs&gt;`_. In the `pluggy</span>\n<span class=\"sd\">    documentation &lt;https://pluggy.readthedocs.io/en/latest/&gt;`_, hook</span>\n<span class=\"sd\">    specification marker instances are named ``hookspec`` by convention, and</span>\n<span class=\"sd\">    hook implementation marker instances are named ``hookimpl``.  The</span>\n<span class=\"sd\">    convention in napari is to name them more explicitly:</span>\n<span class=\"sd\">    ``napari_hook_specification`` and ``napari_hook_implementation``,</span>\n<span class=\"sd\">    respectively.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"c1\"># These hook specifications also serve as the API reference for plugin</span>\n<span class=\"c1\"># developers, so comprehensive documentation with complete type annotations is</span>\n<span class=\"c1\"># imperative!</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_specification</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..types</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">AugmentedWidget</span><span class=\"p\">,</span>\n    <span class=\"n\">ReaderFunction</span><span class=\"p\">,</span>\n    <span class=\"n\">SampleData</span><span class=\"p\">,</span>\n    <span class=\"n\">SampleDict</span><span class=\"p\">,</span>\n    <span class=\"n\">WriterFunction</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># -------------------------------------------------------------------------- #</span>\n<span class=\"c1\">#                                 IO Hooks                                   #</span>\n<span class=\"c1\"># -------------------------------------------------------------------------- #</span>\n\n\n<div class=\"viewcode-block\" id=\"napari_provide_sample_data\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_provide_sample_data\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">historic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_provide_sample_data</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SampleData</span><span class=\"p\">,</span> <span class=\"n\">SampleDict</span><span class=\"p\">]]:</span>\n    <span class=\"sd\">\"\"\"Provide sample data.</span>\n\n<span class=\"sd\">    Plugins may implement this hook to provide sample data for use in napari.</span>\n<span class=\"sd\">    Sample data is accessible in the `File &gt; Open Sample` menu, or</span>\n<span class=\"sd\">    programmatically, with :meth:`napari.Viewer.open_sample`.</span>\n\n<span class=\"sd\">    Plugins implementing this hook specification must return a ``dict``, where</span>\n<span class=\"sd\">    each key is a `sample_key` (the string that will appear in the</span>\n<span class=\"sd\">    `Open Sample` menu), and the value is either a string, or</span>\n<span class=\"sd\">    a callable that returns an iterable of ``LayerData`` tuples, where each</span>\n<span class=\"sd\">    tuple is a 1-, 2-, or 3-tuple of ``(data,)``, ``(data, meta)``, or ``(data,</span>\n<span class=\"sd\">    meta, layer_type)`` (thus, an individual sample-loader may provide multiple</span>\n<span class=\"sd\">    layers).  If the value is a string, it will be opened with</span>\n<span class=\"sd\">    :meth:`napari.Viewer.open`.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Here's a minimal example of a plugin that provides three samples:</span>\n\n<span class=\"sd\">        1. random data from numpy</span>\n<span class=\"sd\">        2. a random image pulled from the internet</span>\n<span class=\"sd\">        3. random data from numpy, provided as a dict with the keys:</span>\n<span class=\"sd\">            'display_name': a string that will show in the menu (by default,</span>\n<span class=\"sd\">                the `sample_key` will be shown)</span>\n<span class=\"sd\">            'data': a string or callable, as in 1/2.</span>\n\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        import numpy as np</span>\n<span class=\"sd\">        from napari_plugin_engine import napari_hook_implementation</span>\n\n<span class=\"sd\">        def _generate_random_data(shape=(512, 512)):</span>\n<span class=\"sd\">            data = np.random.rand(*shape)</span>\n<span class=\"sd\">            return [(data, {'name': 'random data'})]</span>\n\n<span class=\"sd\">        @napari_hook_implementation</span>\n<span class=\"sd\">        def napari_provide_sample_data():</span>\n<span class=\"sd\">            return {</span>\n<span class=\"sd\">                'random data': _generate_random_data,</span>\n<span class=\"sd\">                'random image': 'https://picsum.photos/1024',</span>\n<span class=\"sd\">                'sample_key': {</span>\n<span class=\"sd\">                    'display_name': 'Some Random Data (512 x 512)'</span>\n<span class=\"sd\">                    'data': _generate_random_data,</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    Dict[ str, Union[str, Callable[..., Iterable[LayerData]]] ]</span>\n<span class=\"sd\">        A mapping of `sample_key` to `data_loader`</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_get_reader\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_get_reader\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">ReaderFunction</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Return a function capable of loading ``path`` into napari, or ``None``.</span>\n\n<span class=\"sd\">    This is the primary \"**reader plugin**\" function.  It accepts a path or</span>\n<span class=\"sd\">    list of paths, and returns a list of data to be added to the ``Viewer``.</span>\n<span class=\"sd\">    The function may return ``[(None, )]`` to indicate that the file was read</span>\n<span class=\"sd\">    successfully, but did not contain any data.</span>\n\n<span class=\"sd\">    The main place this hook is used is in :func:`Viewer.open()</span>\n<span class=\"sd\">    &lt;napari.components.viewer_model.ViewerModel.open&gt;`, via the</span>\n<span class=\"sd\">    :func:`~napari.plugins.io.read_data_with_plugins` function.</span>\n\n<span class=\"sd\">    It will also be called on ``File -&gt; Open...`` or when a user drops a file</span>\n<span class=\"sd\">    or folder onto the viewer. This function must execute **quickly**, and</span>\n<span class=\"sd\">    should return ``None`` if the filepath is of an unrecognized format for</span>\n<span class=\"sd\">    this reader plugin.  If ``path`` is determined to be recognized format,</span>\n<span class=\"sd\">    this function should return a *new* function that accepts the same filepath</span>\n<span class=\"sd\">    (or list of paths), and returns a list of ``LayerData`` tuples, where each</span>\n<span class=\"sd\">    tuple is a 1-, 2-, or 3-tuple of ``(data,)``, ``(data, meta)``, or ``(data,</span>\n<span class=\"sd\">    meta, layer_type)``.</span>\n\n<span class=\"sd\">    ``napari`` will then use each tuple in the returned list to generate a new</span>\n<span class=\"sd\">    layer in the viewer using the :func:`Viewer._add_layer_from_data()</span>\n<span class=\"sd\">    &lt;napari.components.viewer_model.ViewerModel._add_layer_from_data&gt;`</span>\n<span class=\"sd\">    method.  The first, (optional) second, and (optional) third items in each</span>\n<span class=\"sd\">    tuple in the returned layer_data list, therefore correspond to the</span>\n<span class=\"sd\">    ``data``, ``meta``, and ``layer_type`` arguments of the</span>\n<span class=\"sd\">    :func:`Viewer._add_layer_from_data()</span>\n<span class=\"sd\">    &lt;napari.components.viewer_model.ViewerModel._add_layer_from_data&gt;`</span>\n<span class=\"sd\">    method, respectively.</span>\n\n<span class=\"sd\">    .. important::</span>\n\n<span class=\"sd\">       ``path`` may be either a ``str`` or a ``list`` of ``str``.  If a</span>\n<span class=\"sd\">       ``list``, then each path in the list can be assumed to be one part of a</span>\n<span class=\"sd\">       larger multi-dimensional stack (for instance: a list of 2D image files</span>\n<span class=\"sd\">       that should be stacked along a third axis). Implementations should do</span>\n<span class=\"sd\">       their own checking for ``list`` or ``str``, and handle each case as</span>\n<span class=\"sd\">       desired.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str or list of str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL), or a list of paths.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    Callable or None</span>\n<span class=\"sd\">        A function that accepts the path, and returns a list of ``layer_data``,</span>\n<span class=\"sd\">        where ``layer_data`` is one of ``(data,)``, ``(data, meta)``, or</span>\n<span class=\"sd\">        ``(data, meta, layer_type)``.</span>\n<span class=\"sd\">        If unable to read the path, must return ``None`` (not ``False``!).</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_get_writer\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_get_writer\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_get_writer</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">layer_types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">WriterFunction</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Return function capable of writing napari layer data to ``path``.</span>\n\n<span class=\"sd\">    This function will be called whenever the user attempts to save multiple</span>\n<span class=\"sd\">    layers (e.g. via ``File -&gt; Save Layers``, or</span>\n<span class=\"sd\">    :func:`~napari.plugins.io.save_layers`).</span>\n<span class=\"sd\">    This function must execute **quickly**, and should return ``None`` if</span>\n<span class=\"sd\">    ``path`` has an unrecognized extension for the reader plugin or the list of</span>\n<span class=\"sd\">    layer types are incompatible with what the plugin can write. If ``path`` is</span>\n<span class=\"sd\">    a recognized format, this function should return a *function* that accepts</span>\n<span class=\"sd\">    the same ``path``, and a list of tuples containing the data for each layer</span>\n<span class=\"sd\">    being saved in the form of ``(Layer.data, Layer._get_state(),</span>\n<span class=\"sd\">    Layer._type_string)``. The writer function should return a list of strings</span>\n<span class=\"sd\">    (the actual filepath(s) that were written).</span>\n\n<span class=\"sd\">    .. important::</span>\n\n<span class=\"sd\">        It is up to plugins to inspect and obey any extension in ``path``</span>\n<span class=\"sd\">        (and return ``None`` if it is an unsupported extension).</span>\n\n<span class=\"sd\">    An example function signature for a ``WriterFunction`` that might be</span>\n<span class=\"sd\">    returned by this hook specification is as follows:</span>\n\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        def writer_function(</span>\n<span class=\"sd\">            path: str, layer_data: List[Tuple[Any, Dict, str]]</span>\n<span class=\"sd\">        ) -&gt; List[str]:</span>\n<span class=\"sd\">            ...</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).  Any extensions in</span>\n<span class=\"sd\">        the path should be examined and obeyed.  (i.e. if the plugin is</span>\n<span class=\"sd\">        incapable of returning a requested extension, it should return</span>\n<span class=\"sd\">        ``None``).</span>\n<span class=\"sd\">    layer_types : list of str</span>\n<span class=\"sd\">        List of layer types (e.g. \"image\", \"labels\") that will be provided to</span>\n<span class=\"sd\">        the writer function.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    Callable or None</span>\n<span class=\"sd\">        A function that accepts the path, a list of layer_data (where</span>\n<span class=\"sd\">        layer_data is ``(data, meta, layer_type)``). If unable to write to the</span>\n<span class=\"sd\">        path or write the layer_data, must return ``None`` (not ``False``).</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_image\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_image\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_image</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write image data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : array or list of array</span>\n<span class=\"sd\">        Image data. Can be N dimensional. If meta['rgb'] is ``True`` then the</span>\n<span class=\"sd\">        data should be interpreted as RGB or RGBA. If meta['multiscale'] is</span>\n<span class=\"sd\">        True, then the data should be interpreted as a multiscale image.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Image metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_labels\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_labels\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_labels</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write labels data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : array or list of array</span>\n<span class=\"sd\">        Integer valued label data. Can be N dimensional. Every pixel contains</span>\n<span class=\"sd\">        an integer ID corresponding to the region it belongs to. The label 0 is</span>\n<span class=\"sd\">        rendered as transparent. If a list and arrays are decreasing in shape</span>\n<span class=\"sd\">        then the data is from a multiscale image.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Labels metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_points\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_points\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_points</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write points data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : array (N, D)</span>\n<span class=\"sd\">        Coordinates for N points in D dimensions.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Points metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_shapes\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_shapes\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_shapes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write shapes data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : list</span>\n<span class=\"sd\">        List of shape data, where each element is an (N, D) array of the</span>\n<span class=\"sd\">        N vertices of a shape in D dimensions.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Shapes metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_surface\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_surface\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_surface</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write surface data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : 3-tuple of array</span>\n<span class=\"sd\">        The first element of the tuple is an (N, D) array of vertices of</span>\n<span class=\"sd\">        mesh triangles. The second is an (M, 3) array of int of indices</span>\n<span class=\"sd\">        of the mesh triangles. The third element is the (K0, ..., KL, N)</span>\n<span class=\"sd\">        array of values used to color vertices where the additional L</span>\n<span class=\"sd\">        dimensions are used to color the same mesh with different values.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Surface metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_write_vectors\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_write_vectors\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_write_vectors</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write vectors data and metadata into a path.</span>\n\n<span class=\"sd\">    It is the responsibility of the implementation to check any extension on</span>\n<span class=\"sd\">    ``path`` and return ``None`` if it is an unsupported extension.  If</span>\n<span class=\"sd\">    ``path`` has no extension, implementations may append their preferred</span>\n<span class=\"sd\">    extension.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        Path to file, directory, or resource (like a URL).</span>\n<span class=\"sd\">    data : (N, 2, D) array</span>\n<span class=\"sd\">        The start point and projections of N vectors in D dimensions.</span>\n<span class=\"sd\">    meta : dict</span>\n<span class=\"sd\">        Vectors metadata.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<span class=\"c1\"># -------------------------------------------------------------------------- #</span>\n<span class=\"c1\">#                                 GUI Hooks                                  #</span>\n<span class=\"c1\"># -------------------------------------------------------------------------- #</span>\n\n\n<div class=\"viewcode-block\" id=\"napari_experimental_provide_function\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_experimental_provide_function\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">historic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_function</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n    <span class=\"n\">FunctionType</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">FunctionType</span><span class=\"p\">]</span>\n<span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Provide function(s) that can be passed to magicgui.</span>\n\n<span class=\"sd\">    This hook specification is marked as experimental as the API or how the</span>\n<span class=\"sd\">    returned value is handled may change here more frequently then the</span>\n<span class=\"sd\">    rest of the codebase.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    function(s) : FunctionType or list of FunctionType</span>\n<span class=\"sd\">        Implementations should provide either a single function, or a list of</span>\n<span class=\"sd\">        functions. Note that this does not preclude specifying multiple</span>\n<span class=\"sd\">        separate implementations in the same module or class.</span>\n<span class=\"sd\">        The functions should have Python type annotations so that</span>\n<span class=\"sd\">        `magicgui &lt;https://napari.org/magicgui&gt;`_ can generate a widget from</span>\n<span class=\"sd\">        them.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from napari.types import ImageData, LayerDataTuple</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; def my_function(image : ImageData) -&gt; LayerDataTuple:</span>\n<span class=\"sd\">    &gt;&gt;&gt;     # process the image</span>\n<span class=\"sd\">    &gt;&gt;&gt;     result = -image</span>\n<span class=\"sd\">    &gt;&gt;&gt;     # return it + some layer properties</span>\n<span class=\"sd\">    &gt;&gt;&gt;     return result, {'colormap':'turbo'}</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; @napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt; def napari_experimental_provide_function():</span>\n<span class=\"sd\">    &gt;&gt;&gt;     return my_function</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_experimental_provide_dock_widget\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">historic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n    <span class=\"n\">AugmentedWidget</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">AugmentedWidget</span><span class=\"p\">]</span>\n<span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Provide functions that return widgets to be docked in the viewer.</span>\n\n<span class=\"sd\">    This hook specification is marked as experimental as the API or how the</span>\n<span class=\"sd\">    returned value is handled may change here more frequently then the</span>\n<span class=\"sd\">    rest of the codebase.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    result : callable or tuple or list of callables or list of tuples</span>\n<span class=\"sd\">        A \"callable\" in this context is a class or function that, when</span>\n<span class=\"sd\">        called, returns an instance of either a</span>\n<span class=\"sd\">        :class:`~qtpy.QtWidgets.QWidget` or a</span>\n<span class=\"sd\">        :class:`~magicgui.widgets.FunctionGui`.</span>\n\n<span class=\"sd\">        Implementations of this hook specification must return a callable, or a</span>\n<span class=\"sd\">        tuple of ``(callable, dict)``, where the dict contains keyword</span>\n<span class=\"sd\">        arguments for :meth:`napari.qt.Window.add_dock_widget`. (note, however,</span>\n<span class=\"sd\">        that ``shortcut=`` keyword is not yet supported).</span>\n\n<span class=\"sd\">        Implementations may also return a list, in which each item must be a</span>\n<span class=\"sd\">        callable or ``(callable, dict)`` tuple. Note that this does not</span>\n<span class=\"sd\">        preclude specifying multiple separate implementations in the same module</span>\n<span class=\"sd\">        or class.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    An example with a QtWidget:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from qtpy.QtWidgets import QWidget</span>\n<span class=\"sd\">    &gt;&gt;&gt; from napari_plugin_engine import napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; class MyWidget(QWidget):</span>\n<span class=\"sd\">    ...     def __init__(self, napari_viewer):</span>\n<span class=\"sd\">    ...         self.viewer = napari_viewer</span>\n<span class=\"sd\">    ...         super().__init__()</span>\n<span class=\"sd\">    ...</span>\n<span class=\"sd\">    ...         # initialize layout</span>\n<span class=\"sd\">    ...         layout = QGridLayout()</span>\n<span class=\"sd\">    ...</span>\n<span class=\"sd\">    ...         # add a button</span>\n<span class=\"sd\">    ...         btn = QPushButton('Click me!', self)</span>\n<span class=\"sd\">    ...         def trigger():</span>\n<span class=\"sd\">    ...             print(\"napari has\", len(napari_viewer.layers), \"layers\")</span>\n<span class=\"sd\">    ...         btn.clicked.connect(trigger)</span>\n<span class=\"sd\">    ...         layout.addWidget(btn)</span>\n<span class=\"sd\">    ...</span>\n<span class=\"sd\">    ...         # activate layout</span>\n<span class=\"sd\">    ...         self.setLayout(layout)</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; @napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt; def napari_experimental_provide_dock_widget():</span>\n<span class=\"sd\">    ...     return MyWidget</span>\n\n<span class=\"sd\">    An example using magicgui:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from magicgui import magic_factory</span>\n<span class=\"sd\">    &gt;&gt;&gt; from napari_plugin_engine import napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; @magic_factory(auto_call=True, threshold={'max': 2 ** 16})</span>\n<span class=\"sd\">    &gt;&gt;&gt; def threshold(</span>\n<span class=\"sd\">    ...     data: 'napari.types.ImageData', threshold: int</span>\n<span class=\"sd\">    ... ) -&gt; 'napari.types.LabelsData':</span>\n<span class=\"sd\">    ...     return (data &gt; threshold).astype(int)</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; @napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt; def napari_experimental_provide_dock_widget():</span>\n<span class=\"sd\">    ...     return threshold</span>\n<span class=\"sd\">    \"\"\"</span></div>\n\n\n<div class=\"viewcode-block\" id=\"napari_experimental_provide_theme\"><a class=\"viewcode-back\" href=\"../../../plugins/stable/npe1.html#napari.plugins.hook_specifications.napari_experimental_provide_theme\">[docs]</a><span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">historic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_theme</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span>\n    <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]]</span>\n<span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Provide GUI with a set of colors used through napari. This hook allows you to</span>\n<span class=\"sd\">    provide additional color schemes so you can accomplish your desired styling.</span>\n\n<span class=\"sd\">    Themes are provided as `dict` with several required fields and correctly formatted</span>\n<span class=\"sd\">    color values. Colors can be specified using color names (e.g. ``white``), hex color</span>\n<span class=\"sd\">    (e.g. ``#ff5733``), rgb color in 0-255 range (e.g. ``rgb(255, 0, 127)`` or as</span>\n<span class=\"sd\">    3- or 4-element tuples or lists (e.g. ``(255, 0, 127)``. The `Theme` model will</span>\n<span class=\"sd\">    automatically handle the conversion.</span>\n\n<span class=\"sd\">    See :class:`~napari.utils.theme.Theme` for more detail of what are the required keys.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    themes : Dict[str, Dict[str, Union[str, Tuple, List]]</span>\n<span class=\"sd\">        Sequence of dictionaries containing new color schemes to be used by napari.</span>\n<span class=\"sd\">        You can replace existing themes by using the same names.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; def get_new_theme() -&gt; Dict[str, Dict[str, Union[str, Tuple, List]]:</span>\n<span class=\"sd\">    ...     # specify theme(s) that should be added to napari</span>\n<span class=\"sd\">    ...     themes = {</span>\n<span class=\"sd\">    ...         \"super_dark\": {</span>\n<span class=\"sd\">    ...             \"name\": \"super_dark\",</span>\n<span class=\"sd\">    ...             \"background\": \"rgb(12, 12, 12)\",</span>\n<span class=\"sd\">    ...             \"foreground\": \"rgb(65, 72, 81)\",</span>\n<span class=\"sd\">    ...             \"primary\": \"rgb(90, 98, 108)\",</span>\n<span class=\"sd\">    ...             \"secondary\": \"rgb(134, 142, 147)\",</span>\n<span class=\"sd\">    ...             \"highlight\": \"rgb(106, 115, 128)\",</span>\n<span class=\"sd\">    ...             \"text\": \"rgb(240, 241, 242)\",</span>\n<span class=\"sd\">    ...             \"icon\": \"rgb(209, 210, 212)\",</span>\n<span class=\"sd\">    ...             \"warning\": \"rgb(153, 18, 31)\",</span>\n<span class=\"sd\">    ...             \"current\": \"rgb(0, 122, 204)\",</span>\n<span class=\"sd\">    ...             \"syntax_style\": \"native\",</span>\n<span class=\"sd\">    ...             \"console\": \"rgb(0, 0, 0)\",</span>\n<span class=\"sd\">    ...             \"canvas\": \"black\",</span>\n<span class=\"sd\">    ...         }</span>\n<span class=\"sd\">    ...     }</span>\n<span class=\"sd\">    ...     return themes</span>\n<span class=\"sd\">    &gt;&gt;&gt;</span>\n<span class=\"sd\">    &gt;&gt;&gt; @napari_hook_implementation</span>\n<span class=\"sd\">    &gt;&gt;&gt; def napari_experimental_provide_theme():</span>\n<span class=\"sd\">    ...     return get_new_theme()</span>\n<span class=\"sd\">    \"\"\"</span></div>\n</pre></div>\n      ","pageHeaders":[],"ipynbSource":"","mdSource":""}},"__N_SSG":true}