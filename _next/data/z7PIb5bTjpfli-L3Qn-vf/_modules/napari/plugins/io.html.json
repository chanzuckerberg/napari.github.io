{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html","/tutorials/further-resources/napari-workshops.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.plugins.io","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging</span> <span class=\"kn\">import</span> <span class=\"n\">getLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">HookImplementation</span><span class=\"p\">,</span> <span class=\"n\">PluginCallError</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..layers</span> <span class=\"kn\">import</span> <span class=\"n\">Layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..types</span> <span class=\"kn\">import</span> <span class=\"n\">LayerData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">abspath_or_url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">plugin_manager</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read_data_with_plugins</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span>\n    <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">LayerData</span><span class=\"p\">]],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">HookImplementation</span><span class=\"p\">]]:</span>\n    <span class=\"sd\">\"\"\"Iterate reader hooks and return first non-None LayerData or None.</span>\n\n<span class=\"sd\">    This function returns as soon as the path has been read successfully,</span>\n<span class=\"sd\">    while catching any plugin exceptions, storing them for later retrieval,</span>\n<span class=\"sd\">    providing useful error messages, and re-looping until either a read</span>\n<span class=\"sd\">    operation was successful, or no valid readers were found.</span>\n\n<span class=\"sd\">    Exceptions will be caught and stored as PluginErrors</span>\n<span class=\"sd\">    (in plugins.exceptions.PLUGIN_ERRORS)</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        The path (file, directory, url) to open</span>\n<span class=\"sd\">    plugin : str, optional</span>\n<span class=\"sd\">        Name of a plugin to use.  If provided, will force ``path`` to be read</span>\n<span class=\"sd\">        with the specified ``plugin``.  If the requested plugin cannot read</span>\n<span class=\"sd\">        ``path``, a PluginCallError will be raised.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    LayerData : list of tuples, or None</span>\n<span class=\"sd\">        LayerData that can be passed to :func:`Viewer._add_layer_from_data()</span>\n<span class=\"sd\">        &lt;napari.components.viewer_model.ViewerModel._add_layer_from_data&gt;`.</span>\n<span class=\"sd\">        ``LayerData`` is a list tuples, where each tuple is one of</span>\n<span class=\"sd\">        ``(data,)``, ``(data, meta)``, or ``(data, meta, layer_type)`` .</span>\n\n<span class=\"sd\">        If no reader plugins were found (or they all failed), returns ``None``</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    PluginCallError</span>\n<span class=\"sd\">        If ``plugin`` is specified but raises an Exception while reading.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">hook_caller</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_get_reader</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">abspath_or_url</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plugin</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">)):</span>\n        <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">get_reader_for_extension</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n\n    <span class=\"n\">hookimpl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">HookImplementation</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">plugin</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"p\">:</span>\n            <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">get_hookimpls</span><span class=\"p\">()}</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"There is no registered plugin named '</span><span class=\"si\">{plugin}</span><span class=\"s2\">'.</span><span class=\"se\">\\n</span><span class=\"s2\">Names of plugins offering readers are: </span><span class=\"si\">{names}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                    <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">_call_plugin</span><span class=\"p\">(</span><span class=\"n\">plugin</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin!r}</span><span class=\"s1\"> does not support file </span><span class=\"si\">{path}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">hookimpl</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">get_plugin_implementation</span><span class=\"p\">(</span><span class=\"n\">plugin</span><span class=\"p\">)</span>\n        <span class=\"n\">layer_data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if the reader returns a \"null layer\" sentinel indicating an empty</span>\n        <span class=\"c1\"># file, return an empty list, otherwise return the result or None</span>\n        <span class=\"k\">if</span> <span class=\"n\">_is_null_layer_sentinel</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"n\">hookimpl</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">layer_data</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">hookimpl</span>\n\n    <span class=\"n\">errors</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PluginCallError</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">skip_impls</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">HookImplementation</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">layer_data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">call_with_result_obj</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">_skip_impls</span><span class=\"o\">=</span><span class=\"n\">skip_impls</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">result</span>  <span class=\"c1\"># will raise exceptions if any occurred</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n            <span class=\"c1\"># we're all out of reader plugins</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">layer_data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>  <span class=\"c1\"># try to read data</span>\n            <span class=\"k\">if</span> <span class=\"n\">layer_data</span><span class=\"p\">:</span>\n                <span class=\"n\">hookimpl</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">implementation</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"c1\"># collect the error and log it, but don't raise it.</span>\n            <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">PluginCallError</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">implementation</span><span class=\"p\">,</span> <span class=\"n\">cause</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n            <span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">logger</span><span class=\"p\">)</span>\n            <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"c1\"># don't try this impl again</span>\n        <span class=\"n\">skip_impls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">implementation</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_data</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if layer_data is empty, it means no plugin could read path</span>\n        <span class=\"c1\"># we just want to provide some useful feedback, which includes</span>\n        <span class=\"c1\"># whether or not paths were passed to plugins as a list.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'No plugin found capable of reading [</span><span class=\"si\">{repr_path}</span><span class=\"s1\">, ...] as stack.'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">repr_path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'No plugin found capable of reading </span><span class=\"si\">{repr_path}</span><span class=\"s1\">.'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">repr_path</span><span class=\"o\">=</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO: change to a warning notification in a later PR</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">errors</span><span class=\"p\">}</span>\n        <span class=\"n\">err_msg</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"(</span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">) error</span><span class=\"si\">{</span><span class=\"s1\">'s'</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"si\">}</span><span class=\"s2\"> \"</span>\n        <span class=\"n\">err_msg</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">\"occurred in plugins: </span><span class=\"si\">{</span><span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">. \"</span>\n        <span class=\"n\">err_msg</span> <span class=\"o\">+=</span> <span class=\"s1\">'See full error logs in \"Plugins → Plugin Errors...\"'</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">err_msg</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if the reader returns a \"null layer\" sentinel indicating an empty file,</span>\n    <span class=\"c1\"># return an empty list, otherwise return the result or None</span>\n    <span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"k\">if</span> <span class=\"n\">_is_null_layer_sentinel</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">layer_data</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"n\">hookimpl</span>\n\n\n<div class=\"viewcode-block\" id=\"save_layers\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.html#napari.save_layers\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">save_layers</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write list of layers or individual layer to a path using writer plugins.</span>\n\n<span class=\"sd\">    If ``plugin`` is not provided and only one layer is passed, then we</span>\n<span class=\"sd\">    directly call ``plugin_manager.hook.napari_write_&lt;layer&gt;()`` which</span>\n<span class=\"sd\">    will loop through implementations and stop when the first one returns a</span>\n<span class=\"sd\">    non-None result. The order in which implementations are called can be</span>\n<span class=\"sd\">    changed with the hook ``bring_to_front`` method, for instance:</span>\n<span class=\"sd\">    ``plugin_manager.hook.napari_write_points.bring_to_front``</span>\n\n<span class=\"sd\">    If ``plugin`` is not provided and multiple layers are passed, then</span>\n<span class=\"sd\">    we call ``plugin_manager.hook.napari_get_writer()`` which loops through</span>\n<span class=\"sd\">    plugins to find the first one that knows how to handle the combination of</span>\n<span class=\"sd\">    layers and is able to write the file. If no plugins offer</span>\n<span class=\"sd\">    ``napari_get_writer`` for that combination of layers then the builtin</span>\n<span class=\"sd\">    ``napari_get_writer`` implementation will create a folder and call</span>\n<span class=\"sd\">    ``napari_write_&lt;layer&gt;`` for each layer using the ``layer.name`` variable</span>\n<span class=\"sd\">    to modify the path such that the layers are written to unique files in the</span>\n<span class=\"sd\">    folder.</span>\n\n<span class=\"sd\">    If ``plugin`` is provided and a single layer is passed, then</span>\n<span class=\"sd\">    we call the ``napari_write_&lt;layer_type&gt;`` for that plugin, and if it</span>\n<span class=\"sd\">    fails we error.</span>\n\n<span class=\"sd\">    If a ``plugin`` is provided and multiple layers are passed, then</span>\n<span class=\"sd\">    we call we call ``napari_get_writer`` for that plugin, and if it</span>\n<span class=\"sd\">    doesn’t return a WriterFunction we error, otherwise we call it and if</span>\n<span class=\"sd\">    that fails if it we error.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        A filepath, directory, or URL to open.</span>\n<span class=\"sd\">    layers : List[layers.Layer]</span>\n<span class=\"sd\">        List of layers to be saved. If only a single layer is passed then</span>\n<span class=\"sd\">        we use the hook specification corresponding to its layer type,</span>\n<span class=\"sd\">        ``napari_write_&lt;layer_type&gt;``. If multiple layers are passed then we</span>\n<span class=\"sd\">        use the ``napari_get_writer`` hook specification.</span>\n<span class=\"sd\">    plugin : str, optional</span>\n<span class=\"sd\">        Name of the plugin to use for saving. If None then all plugins</span>\n<span class=\"sd\">        corresponding to appropriate hook specification will be looped</span>\n<span class=\"sd\">        through to find the first one that can save the data.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    list of str</span>\n<span class=\"sd\">        File paths of any files that were written.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">written</span> <span class=\"o\">=</span> <span class=\"n\">_write_multiple_layers_with_plugins</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">_written</span> <span class=\"o\">=</span> <span class=\"n\">_write_single_layer_with_plugins</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">written</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_written</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">_written</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">written</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">written</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if written is empty, it means no plugin could write the</span>\n        <span class=\"c1\"># path/layers combination</span>\n        <span class=\"c1\"># we just want to provide some useful feedback</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'No data written! There may be no plugins capable of writing these </span><span class=\"si\">{length}</span><span class=\"s1\"> layers to </span><span class=\"si\">{path}</span><span class=\"s1\">.'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">),</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">written</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_is_null_layer_sentinel</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">LayerData</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Checks if the layer data returned from a reader function indicates an</span>\n<span class=\"sd\">    empty file. The sentinel value used for this is ``[(None,)]``.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    layer_data : LayerData</span>\n<span class=\"sd\">        The layer data returned from a reader function to check</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    bool</span>\n<span class=\"sd\">        True, if the layer_data indicates an empty file, False otherwise</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span>\n        <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"ow\">and</span> <span class=\"n\">layer_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_write_multiple_layers_with_plugins</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write data from multiple layers data with a plugin.</span>\n\n<span class=\"sd\">    If a ``plugin_name`` is not provided we loop through plugins to find the</span>\n<span class=\"sd\">    first one that knows how to handle the combination of layers and is able to</span>\n<span class=\"sd\">    write the file. If no plugins offer ``napari_get_writer`` for that</span>\n<span class=\"sd\">    combination of layers then the default ``napari_get_writer`` will create a</span>\n<span class=\"sd\">    folder and call ``napari_write_&lt;layer&gt;`` for each layer using the</span>\n<span class=\"sd\">    ``layer.name`` variable to modify the path such that the layers are written</span>\n<span class=\"sd\">    to unique files in the folder.</span>\n\n<span class=\"sd\">    If a ``plugin_name`` is provided, then call ``napari_get_writer`` for that</span>\n<span class=\"sd\">    plugin. If it doesn’t return a ``WriterFunction`` we error, otherwise we</span>\n<span class=\"sd\">    call it and if that fails if it we error.</span>\n\n<span class=\"sd\">    Exceptions will be caught and stored as PluginErrors</span>\n<span class=\"sd\">    (in plugins.exceptions.PLUGIN_ERRORS)</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        The path (file, directory, url) to write.</span>\n<span class=\"sd\">    layers : List of napari.layers.Layer</span>\n<span class=\"sd\">        List of napari layers to write.</span>\n<span class=\"sd\">    plugin_name : str, optional</span>\n<span class=\"sd\">        If provided, force the plugin manager to use the ``napari_get_writer``</span>\n<span class=\"sd\">        from the requested ``plugin_name``.  If none is available, or if it is</span>\n<span class=\"sd\">        incapable of handling the layers, this function will fail.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    list of str</span>\n<span class=\"sd\">        A list of filenames, if any, that were written.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">layer_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">as_layer_data_tuple</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">]</span>\n    <span class=\"n\">layer_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ld</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ld</span> <span class=\"ow\">in</span> <span class=\"n\">layer_data</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">)):</span>\n        <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">get_writer_for_extension</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n\n    <span class=\"n\">hook_caller</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_get_writer</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">abspath_or_url</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">plugin_name</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if plugin has been specified we just directly call napari_get_writer</span>\n        <span class=\"c1\"># with that plugin_name.</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"p\">:</span>\n            <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">get_hookimpls</span><span class=\"p\">()}</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"There is no registered plugin named '</span><span class=\"si\">{plugin_name}</span><span class=\"s2\">'.</span><span class=\"se\">\\n</span><span class=\"s2\">Names of plugins offering writers are: </span><span class=\"si\">{names}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">implementation</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">get_plugin_implementation</span><span class=\"p\">(</span><span class=\"n\">plugin_name</span><span class=\"p\">)</span>\n        <span class=\"n\">writer_function</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"p\">(</span>\n            <span class=\"n\">_plugin</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">layer_types</span><span class=\"o\">=</span><span class=\"n\">layer_types</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">call_with_result_obj</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">layer_types</span><span class=\"o\">=</span><span class=\"n\">layer_types</span><span class=\"p\">,</span> <span class=\"n\">_return_impl</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">writer_function</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">result</span>\n        <span class=\"n\">implementation</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">implementation</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">writer_function</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin_name</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Requested plugin \"</span><span class=\"si\">{plugin_name}</span><span class=\"s1\">\" is not capable of writing this combination of layer types: </span><span class=\"si\">{layer_types}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                <span class=\"n\">layer_types</span><span class=\"o\">=</span><span class=\"n\">layer_types</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Unable to find plugin capable of writing this combination of layer types: </span><span class=\"si\">{layer_types}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">layer_types</span><span class=\"o\">=</span><span class=\"n\">layer_types</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">writer_function</span><span class=\"p\">(</span><span class=\"n\">abspath_or_url</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">),</span> <span class=\"n\">layer_data</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">PluginCallError</span><span class=\"p\">(</span><span class=\"n\">implementation</span><span class=\"p\">,</span> <span class=\"n\">cause</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_write_single_layer_with_plugins</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">Layer</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Write single layer data with a plugin.</span>\n\n<span class=\"sd\">    If ``plugin_name`` is not provided then we just directly call</span>\n<span class=\"sd\">    ``plugin_manager.hook.napari_write_&lt;layer&gt;()`` which will loop through</span>\n<span class=\"sd\">    implementations and stop when the first one returns a non-None result. The</span>\n<span class=\"sd\">    order in which implementations are called can be changed with the</span>\n<span class=\"sd\">    implementation sorter/disabler.</span>\n\n<span class=\"sd\">    If ``plugin_name`` is provided, then we call the</span>\n<span class=\"sd\">    ``napari_write_&lt;layer_type&gt;`` for that plugin, and if it fails we error.</span>\n\n<span class=\"sd\">    Exceptions will be caught and stored as PluginErrors</span>\n<span class=\"sd\">    (in plugins.exceptions.PLUGIN_ERRORS)</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    path : str</span>\n<span class=\"sd\">        The path (file, directory, url) to write.</span>\n<span class=\"sd\">    layer : napari.layers.Layer</span>\n<span class=\"sd\">        Layer to be written out.</span>\n<span class=\"sd\">    plugin_name : str, optional</span>\n<span class=\"sd\">        Name of the plugin to write data with. If None then all plugins</span>\n<span class=\"sd\">        corresponding to appropriate hook specification will be looped</span>\n<span class=\"sd\">        through to find the first one that can write the data.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    path : str or None</span>\n<span class=\"sd\">        If data is successfully written, return the ``path`` that was written.</span>\n<span class=\"sd\">        Otherwise, if nothing was done, return ``None``.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">hook_caller</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n        <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'napari_write_</span><span class=\"si\">{</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">_type_string</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">)):</span>\n        <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">get_writer_for_extension</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"p\">):</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">get_hookimpls</span><span class=\"p\">()}</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"There is no registered plugin named '</span><span class=\"si\">{plugin_name}</span><span class=\"s2\">'.</span><span class=\"se\">\\n</span><span class=\"s2\">Plugins capable of writing layer._type_string layers are: </span><span class=\"si\">{names}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Call the hook_caller</span>\n    <span class=\"k\">return</span> <span class=\"n\">hook_caller</span><span class=\"p\">(</span>\n        <span class=\"n\">_plugin</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">abspath_or_url</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">),</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">_get_state</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}