{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"creating a napari plugin","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"creating-a-napari-plugin\">\n<span id=\"plugins-for-plugin-developers\"></span>\n<p>This document explains how to extend napari’s functionality by writing a plugin\nthat can be installed with <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> and autodetected by napari.  For more\ninformation on how plugins are implemented internally in napari, see\n<a class=\"reference internal\" href=\"for_napari_developers.html#plugins-for-napari-developers\"><span class=\"std std-ref\">napari plugin architecture</span></a>.</p>\n<div class=\"section\" id=\"overview\">\n<h2>Overview</h2>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> supports plugin development through <strong>hooks</strong>:\nspecific places in the napari\ncodebase where functionality can be extended.\nFor example, when a user tries to open a filepath in napari, we\nmight want to enable plugins to extend the file formats that can be handled.  A\n<em>hook</em>, then, is the place within napari where we\n“promise” to call functions created by external developers &amp; installed by the user.</p>\n<p>1. <strong>Hook Specifications</strong>:  For each supported hook, we have created\n“<em>hook specifications</em>”, which are\nwell-documented function signatures that define the API (or\n“contract”) that a plugin developer must adhere to when writing their function\nthat we promise to call somewhere in the napari codebase.\nSee <a class=\"reference internal\" href=\"#plugins-hook-spec\"><span class=\"std std-ref\">Step 1: Choose a hook specification to implement</span></a>.</p>\n<p>2. <strong>Hook Implementations</strong>: To make a plugin, plugin developers then write functions (“<em>hook\nimplementations</em>”) and mark that function as meeting the requirements of a\nspecific <em>hook specification</em> offered by napari.\nSee <a class=\"reference internal\" href=\"#plugins-hook-implement\"><span class=\"std std-ref\">Step 2: Write your hook implementation</span></a>.</p>\n<p>3. <strong>Plugin discovery</strong>: Plugins that are installed in the same python\nenvironment as napari can make themselves known to napari. <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will then\nscan plugin modules for <em>hook implementations</em> that will be called at the\nappropriate time and place during the execution of <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>.\nSee <a class=\"reference internal\" href=\"#plugin-discovery\"><span class=\"std std-ref\">Step 3: Make your plugin discoverable</span></a>.</p>\n<p>4. <strong>Plugin sharing</strong>: When you are ready to share your plugin, tag your repo\nwith <cite>napari-plugin</cite>, push a release to pypi, and announce it on Image.sc.\nYour plugin will then be available for users on the <a class=\"reference external\" href=\"https://napari-hub.org/\">napari hub</a> See <a class=\"reference internal\" href=\"#plugin-sharing\"><span class=\"std std-ref\">Step 5: Share your plugin with the world</span></a>.</p>\n</div>\n<div class=\"section\" id=\"cookiecutter-template\">\n<span id=\"plugin-cookiecutter-template\"></span><h2>Cookiecutter template</h2>\n<p>Hook implementations defined by plugin developers typically live inside a\nmodule of a Python package. This allows them to be “pip installable” and\nshared via <a class=\"reference external\" href=\"https://pypi.org/\">PyPI</a> and the <a class=\"reference external\" href=\"https://napari-hub.org/\">napari hub</a>.</p>\n<p>To quickly generate a new napari plugin project, you may wish to use the\n<a class=\"reference external\" href=\"https://github.com/napari/cookiecutter-napari-plugin\">cookiecutter-napari-plugin</a> template.  This uses\nthe <a class=\"reference external\" href=\"https://github.com/cookiecutter/cookiecutter\">cookiecutter</a> command line\nutility, which will ask you a few questions about your project and get you\nstarted with a ready-to-go package layout where you can begin implementing your\nplugin.</p>\n<p>Install cookiecutter and use the template as follows:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip install cookiecutter\ncookiecutter https://github.com/napari/cookiecutter-napari-plugin\n</pre></div>\n</div>\n<p>The cookiecutter template is a great place to start if you want to focus on\nimplementing your plugin functionality without having to manually create a\npackage and all its associated configuration.</p>\n</div>\n<div class=\"section\" id=\"step-1-choose-a-hook-specification-to-implement\">\n<span id=\"plugins-hook-spec\"></span><h2>Step 1: Choose a hook specification to implement</h2>\n<p>The functionality of plugins, as currently designed and implemented in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>, is rather specific in scope: They are <em>not</em> just independent code\nblocks with their own GUIs that show up next to the main napari window. Rather,\nplugin developers must decide which of the current <em>hook specifications</em>\ndefined by napari they would like to implement.</p>\n<p>For a complete list of <em>hook specifications</em> that developers can implement, see\nthe <a class=\"reference internal\" href=\"hook_specifications.html#hook-specifications-reference\"><span class=\"std std-ref\">napari hook specification reference</span></a>.</p>\n<p>A single plugin package may implement more than one <em>hook specification</em>, and\neach <em>hook specification</em> could have multiple <em>hook implementations</em> within\na single package.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>One of the primary ways that we will extend the functionality of napari over\ntime is by identifying new ideas for <em>hook specifications</em> that developers\ncan implement.  If you have a plugin idea that requires napari to create a\nnew hook specification, we’d love to hear about it!  Please think about what\nthe signature of your proposed hook specification would look like, and where\nwithin the napari codebase you’d like your hook implementation to be called,\nand <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/new?template=feature_request.md\">open a feature request</a>\nin the napari issue tracker with your proposal.</p>\n</div>\n<p>Let’s take the <a class=\"reference internal\" href=\"hook_specifications.html#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_get_reader()</span></code></a>\nhook (our primary “reader plugin” hook) as an example.  It is defined as:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">LayerData</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>\n<span class=\"n\">ReaderFunction</span> <span class=\"o\">=</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">LayerData</span><span class=\"p\">]]</span>\n\n<span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">ReaderFunction</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Note that it takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> and either returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or a function.  From the <a class=\"reference internal\" href=\"hook_specifications.html#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">docstring</span></code></a> of the hook\nspecification, we see that the implementation should return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the\npath is of an unrecognized format, otherwise it should return a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ReaderFunction</span></code>, which is a function that takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> (the filepath to\nread) and returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> is any one\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.</p>\n<p>That seems like a bit of a mouthful!  But it’s a precise (though flexible)\ncontract that you can follow, and know that napari will handle the rest.</p>\n</div>\n<div class=\"section\" id=\"step-2-write-your-hook-implementation\">\n<span id=\"plugins-hook-implement\"></span><h2>Step 2: Write your hook implementation</h2>\n<p>Once you have identified the <a class=\"reference internal\" href=\"hook_specifications.html#hook-specifications-reference\"><span class=\"std std-ref\">hook specification</span></a> that you want to implement, you have to create\na <em>hook implementation</em>: a function that accepts the arguments specified by the\nhook specification signature and returns a value with the expected return type.</p>\n<p>Here’s an example hook implementation for\n<a class=\"reference internal\" href=\"hook_specifications.html#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_get_reader()</span></code></a> that enables\nnapari to open a numpy binary file with a <code class=\"docutils literal notranslate\"><span class=\"pre\">.npy</span></code> extension (previously saved\nwith <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save\" title=\"(in NumPy v1.21)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">numpy.save()</span></code></a>)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">npy_file_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n   <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n   <span class=\"c1\"># return it as a list of LayerData tuples,</span>\n   <span class=\"c1\"># here with no optional metadata</span>\n   <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">array</span><span class=\"p\">,)]</span>\n\n\n<span class=\"c1\"># this line is explained below in \"Decorating your function...\"</span>\n<span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n   <span class=\"c1\"># remember, path can be a list, so we check its type first...</span>\n   <span class=\"c1\"># (this example plugin doesn't handle lists)</span>\n   <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".npy\"</span><span class=\"p\">):</span>\n      <span class=\"c1\"># If we recognize the format, we return the actual reader function</span>\n      <span class=\"k\">return</span> <span class=\"n\">npy_file_reader</span>\n   <span class=\"c1\"># otherwise we return None.</span>\n   <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"decorating-your-function-with-hookimplementationmarker\">\n<span id=\"hookimplementation-decorator\"></span><h3>Decorating your function with <code class=\"docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker</span></code></h3>\n<p>In order to let <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> know that one of your functions satisfies the API of\none of the napari <em>hook specifications</em>, you must decorate your function with\nan instance of <a class=\"reference external\" href=\"https://napari-plugin-engine.readthedocs.io/en/latest/api.html#napari_plugin_engine.HookImplementationMarker\" title=\"(in napari-plugin-engine)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker</span></code></a>,\ninitialized with the name <code class=\"docutils literal notranslate\"><span class=\"pre\">\"napari\"</span></code>.  As a convenience, napari provides this\ndecorator at <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin_engine.napari_hook_implementation</span></code> as shown in\nthe example above.</p>\n<p>However, it’s not required to import from or depend on napari <em>at all</em> when\nwriting a plugin. You can import a <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_implementation</span></code> decorator\ndirectly from <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin_engine</span></code> (a very lightweight dependency that uses\nonly standard lib python).</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"matching-hook-implementations-to-specifications\">\n<h4>Matching hook implementations to specifications</h4>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> matches your implementation to one of our hook\nspecifications by looking at the <em>name</em> of your decorated function.  So in the\nexample above, because the hook implementation was literally\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_get_reader</span></code>, it gets interpreted as an implementation for the\nhook specification of the same name.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>However, you may also mark <em>any</em> function as satisfying a particular napari\nhook specification (regardless of the function’s name) by providing the name of\nthe target hook specification to the <code class=\"docutils literal notranslate\"><span class=\"pre\">specname</span></code> argument in your\nimplementation decorator:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@napari_hook_implementation</span><span class=\"p\">(</span><span class=\"n\">specname</span><span class=\"o\">=</span><span class=\"s2\">\"napari_get_reader\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">whatever_name_you_want</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This allows you to specify multiple hook implementations of the same hook\nspecification in the same module or class, without needing a separate entry point.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"step-3-make-your-plugin-discoverable\">\n<span id=\"plugin-discovery\"></span><h2>Step 3: Make your plugin discoverable</h2>\n<p>Packages and modules installed in the same environment as <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> may make\nthemselves “discoverable” to napari using package metadata, as outlined in the\n<a class=\"reference external\" href=\"https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadata\">Python Packaging Authority guide</a>.</p>\n<p>By providing an <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_points</span></code> argument with the key <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.plugin</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">setup()</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.py</span></code>, plugins can register themselves for discovery.</p>\n<p>For example if you have a package named <code class=\"docutils literal notranslate\"><span class=\"pre\">mypackage</span></code> with a submodule\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin</span></code> where you have decorated one or more napari hook\nimplementations, then if you include in <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.py</span></code>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># setup.py</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n   <span class=\"o\">...</span>\n   <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'napari.plugin'</span><span class=\"p\">:</span> <span class=\"s1\">'plugin-name = mypackage.napari_plugin'</span><span class=\"p\">},</span>\n   <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>… then napari will search the <code class=\"docutils literal notranslate\"><span class=\"pre\">mypackage.napari_plugin</span></code> module for\nfunctions decorated with the <code class=\"docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker(\"napari\")</span></code> decorator\nand register them under the plugin name <code class=\"docutils literal notranslate\"><span class=\"pre\">\"plugin-name\"</span></code>.</p>\n<p>A user would then be able to use <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>, extended with your package’s\nfunctionality by simply installing your package along with napari:</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip install napari mypackage\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"step-4-preparing-for-release\">\n<h2>Step 4: Preparing for release</h2>\n<p>To make your plugin easily discoverable by napari users, you can use the\n<cite>‘Framework :: napari’</cite> [classifier](<a class=\"reference external\" href=\"https://pypi.org/classifiers/\">https://pypi.org/classifiers/</a>) in your\n<cite>setup.py</cite> file, which will allow your package to be\n[displayed on the napari-hub](<a class=\"reference external\" href=\"https://napari-hub.org/\">https://napari-hub.org/</a>) and easily searched\nfor on PyPI.</p>\n<p>Once your package, with its <cite>‘Framework :: napari’</cite> classifier,  is listed on <a class=\"reference external\" href=\"https://pypi.org/\">PyPI</a>, it will also be visible\non the <a class=\"reference external\" href=\"https://napari-hub.org/\">napari hub</a>, alongside all other napari plugins.</p>\n<p>The napari hub reads the metadata of your package and displays it in a number of places\nso that users can easily find your plugin and decide if it provides functionality they\nneed. Most of this metadata lives inside your package configuration files. You can customize\nyour plugin’s listing for the hub by following <a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/blob/main/docs/customizing-plugin-listing.md\">this guide</a>.</p>\n<p>You can also include a napari hub specific description file at <cite>/.napari/DESCRIPTION.md</cite>.\nThe hub preferentially displays this file over your repository’s <cite>README.md</cite> when it’s\navailable. This file allows you to maintain a more developer/repository oriented <cite>README.md</cite>\nwhile still making sure potential users get all the information they need to get started\nwith your plugin. For more information on this file, see <a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/blob/main/docs/customizing-plugin-listing.md\">the guide</a>.</p>\n<p>Finally, once you have curated your package metadata and description, you can preview your\nmetadata, and check any missing fields using the <code class=\"docutils literal notranslate\"><span class=\"pre\">napari-hub-cli</span></code> tool. Install this tool\nusing</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip install napari-hub-cli\n</pre></div>\n</div>\n<p>and preview your metadata with</p>\n<div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>napari-hub-cli preview-metadata /tmp/example-plugin\n</pre></div>\n</div>\n<p>For more information on the tool see <a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub-cli\">the repository README</a></p>\n<p>If you want your plugin to be available on PyPI, but not visible on the napari hub,\nsubmit an issue on the <a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/issues/new\">napari hub repository</a> or send an email to\n<cite>team@napari-hub.org</cite> and it will be removed.</p>\n</div>\n<div class=\"section\" id=\"step-5-share-your-plugin-with-the-world\">\n<span id=\"plugin-sharing\"></span><h2>Step 5: Share your plugin with the world</h2>\n<p>Once you are ready to share your plugin, <a class=\"reference external\" href=\"https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives\">upload the Python package to PyPI</a>\nand it can then be installed with a simple <cite>pip install mypackage</cite>.\nIf you used the <a class=\"reference internal\" href=\"#plugin-cookiecutter-template\"><span class=\"std std-ref\">Cookiecutter template</span></a>, you can also <a class=\"reference external\" href=\"https://github.com/napari/cookiecutter-napari-plugin#set-up-automatic-deployments\">setup automated deployments</a>.</p>\n<p>If you are using Github, add the <a class=\"reference external\" href=\"https://github.com/topics/napari-plugin\">“napari-plugin” topic</a> to your repo so other developers can\nsee your work.</p>\n<p>The <a class=\"reference external\" href=\"https://www.napari-hub.org/\">napari hub</a>\nautomatically displays information about PyPI packages annotated with the\n<cite>Framework :: napari</cite> <a class=\"reference external\" href=\"https://pypi.org/classifiers/\">Trove classifier</a>,\nto help end users discover plugins that fit their needs.\nTo ensure you are providing the relevant metadata and description\nfor your plugin, see the following documentation in the\n<a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/tree/main/docs\">napari hub GitHub</a>’s docs folder:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/blob/main/docs/customizing-plugin-listing.md\">Customizing your plugin’s listing</a></p></li>\n<li><p><a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/blob/main/docs/writing-the-perfect-description.md\">Writing the perfect description for your plugin</a></p></li>\n</ul>\n<p>For more about the napari hub, see the <a class=\"reference external\" href=\"https://www.napari-hub.org/about\">napari hub About page</a>.\nTo learn more about the hub’s development process, see the <a class=\"reference external\" href=\"https://github.com/chanzuckerberg/napari-hub/wiki\">napari hub GitHub’s Wiki</a>.</p>\n<p>When you are ready for users, announce your plugin on the <a class=\"reference external\" href=\"https://forum.image.sc/tag/napari\">Image.sc Forum</a>.</p>\n</div>\n<div class=\"section\" id=\"example-plugins\">\n<h2>Example Plugins</h2>\n<p>For a minimal working plugin example, see the <a class=\"reference external\" href=\"https://github.com/tlambert03/napari-dv\">napari-dv</a> plugin, which allows <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> to\nread the <a class=\"reference external\" href=\"https://github.com/tlambert03/mrc\">Priism/MRC/Deltavision image file format</a>.</p>\n<p>For a more thorough plugin see <a class=\"reference external\" href=\"https://github.com/AllenCellModeling/napari-aicsimageio\">napari-aicsimageio</a>, one of the first\ncommunity plugins developed for napari.  This plugin takes advantage of\n<a class=\"reference internal\" href=\"#plugin-discovery\"><span class=\"std std-ref\">entry_point discovery</span></a> to offer multiple\nreaders for both in-memory and lazy-loading of image files.</p>\n<p>More examples of plugins can be found on the <a class=\"reference external\" href=\"https://napari-hub.org/\">napari hub</a>.</p>\n</div>\n<div class=\"section\" id=\"help\">\n<h2>Help</h2>\n<p>If you run into trouble creating your plugin, please don’t hesitate to reach\nout for help in the <a class=\"reference external\" href=\"https://forum.image.sc/tag/napari\">Image.sc Forum</a>.\nAlternatively, if you find a bug or have a specific feature request for plugin\nsupport, please open an issue at our <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/new/choose\">github issue tracker</a>.</p>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./plugins/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#overview","text":"Overview"},{"href":"#cookiecutter-template","text":"Cookiecutter template"},{"href":"#step-1-choose-a-hook-specification-to-implement","text":"Step 1: Choose a hook specification to implement"},{"href":"#step-2-write-your-hook-implementation","text":"Step 2: Write your hook implementation"},{"href":"#step-3-make-your-plugin-discoverable","text":"Step 3: Make your plugin discoverable"},{"href":"#step-4-preparing-for-release","text":"Step 4: Preparing for release"},{"href":"#step-5-share-your-plugin-with-the-world","text":"Step 5: Share your plugin with the world"},{"href":"#example-plugins","text":"Example Plugins"},{"href":"#help","text":"Help"}]}},"__N_SSG":true}