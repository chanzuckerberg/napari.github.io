{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/release/index.html":{"level":1,"children":["/release/release_0_4_12.html","/release/release_0_4_11.html","/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_4_12.html":{"level":2,"children":[],"href":"/release/release_0_4_12.html","text":"napari 0.4.12"},"/glossary.html":{"level":1,"children":[],"href":"/glossary.html","text":"Glossary"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html","/developers/translations.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/translations.html":{"level":2,"children":[],"href":"/developers/translations.html","text":"Translations"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html","/api/stable/napari.utils.progress.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.progress.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.progress.html","text":"napari.utils.progress"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html","/api/stable/napari.types.partial.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.partial.html":{"level":3,"children":[],"href":"/api/stable/napari.types.partial.html","text":"napari.types.partial"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html","/community/working_groups.html","/community/meeting_schedule.html"],"href":"/community/index.html","text":"Community"},"/community/meeting_schedule.html":{"level":2,"children":[],"href":"/community/meeting_schedule.html","text":"Meeting schedule"},"/community/working_groups.html":{"level":2,"children":[],"href":"/community/working_groups.html","text":"Working groups"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the project and team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/best_practices.html","/plugins/stable/npe2_migration_guide.html","/plugins/stable/guides.html","/plugins/stable/first_plugin.html","/plugins/stable/test_deploy.html","/plugins/stable/npe1.html","/plugins/stable/find_and_install_plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find_and_install_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find_and_install_plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/npe1.html":{"level":2,"children":[],"href":"/plugins/stable/npe1.html","text":"1st Gen Plugin Guide (Deprecated)"},"/plugins/stable/test_deploy.html":{"level":2,"children":[],"href":"/plugins/stable/test_deploy.html","text":"Test and Deploy"},"/plugins/stable/first_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/first_plugin.html","text":"Your First Plugin"},"/plugins/stable/guides.html":{"level":2,"children":[],"href":"/plugins/stable/guides.html","text":"Contribution Guides"},"/plugins/stable/npe2_migration_guide.html":{"level":2,"children":[],"href":"/plugins/stable/npe2_migration_guide.html","text":"npe2 migration guide"},"/plugins/stable/best_practices.html":{"level":2,"children":[],"href":"/plugins/stable/best_practices.html","text":"Best practices"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/magicgui.html","/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/rendering-explanation.html","/guides/stable/rendering.html","/guides/stable/performance.html","/guides/stable/3D_interactivity.html","/guides/stable/events_reference.html","/guides/stable/contexts_expressions.html"],"href":"/guides/stable/index.html","text":"In-depth explanations"},"/guides/stable/contexts_expressions.html":{"level":2,"children":[],"href":"/guides/stable/contexts_expressions.html","text":"Contexts and Expressions in napari"},"/guides/stable/events_reference.html":{"level":2,"children":[],"href":"/guides/stable/events_reference.html","text":"Events reference"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"napari performance"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous rendering"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An introduction to the event loop in napari"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/howtos/index.html":{"level":1,"children":["/howtos/connecting_events.html","/howtos/napari_imageJ.html","/howtos/docker.html","/howtos/perfmon.html"],"href":"/howtos/index.html","text":"How-to guides"},"/howtos/perfmon.html":{"level":2,"children":[],"href":"/howtos/perfmon.html","text":"Performance monitoring"},"/howtos/docker.html":{"level":2,"children":[],"href":"/howtos/docker.html","text":"Napari in Docker"},"/howtos/napari_imageJ.html":{"level":2,"children":[],"href":"/howtos/napari_imageJ.html","text":"napari + ImageJ how-to guide"},"/howtos/connecting_events.html":{"level":2,"children":[],"href":"/howtos/connecting_events.html","text":"Hooking up your own events"},"/tutorials/index.html":{"level":1,"children":["/tutorials/segmentation/index.html","/tutorials/tracking/index.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/further-resources/napari-workshops.html","/tutorials/tracking/cell_tracking.html","/tutorials/segmentation/annotate_segmentation.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/segmentation/annotate_segmentation.html":{"level":2,"children":[],"href":"/tutorials/segmentation/annotate_segmentation.html","text":"Annotating segmentation with text and bounding boxes"},"/tutorials/tracking/cell_tracking.html":{"level":2,"children":[],"href":"/tutorials/tracking/cell_tracking.html","text":"Single cell tracking with napari"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/dask.html":{"level":2,"children":[],"href":"/tutorials/applications/dask.html","text":"Using Dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":2,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"Annotating videos with napari"},"/tutorials/tracking/index.html":{"level":2,"children":[],"href":"/tutorials/tracking/index.html","text":"Tracking"},"/tutorials/segmentation/index.html":{"level":2,"children":[],"href":"/tutorials/segmentation/index.html","text":"Segmentation"},"/tutorials/start_index.html":{"level":1,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/start_index.html","text":"Getting Started"},"/tutorials/fundamentals/vectors.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"Getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"How to install napari on your machine"}},"rootGlobalHeaders":["/tutorials/start_index.html","/tutorials/index.html","/howtos/index.html","/guides/stable/index.html","/plugins/stable/index.html","/community/index.html","/api/stable/index.html","/developers/index.html","/glossary.html","/release/index.html","/roadmaps/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"1st Gen Plugin Guide (Deprecated)","pageFrontMatter":{},"previewImage":"","previewDescription":"DEPRECATED","appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"st-gen-plugin-guide-deprecated\">\n<span id=\"napari-plugin-engine\"></span>\n<div class=\"warning admonition\">\n<p class=\"admonition-title\">DEPRECATED</p>\n<p>We introduced a new plugin engine (<a class=\"reference external\" href=\"https://github.com/napari/npe2\" target=\"_blank\" rel=\"noreferrer\"><code class=\"docutils literal notranslate\"><span class=\"pre\">npe2</span></code></a>) in December 2021.</p>\n<p>Plugins targeting the first generation <code class=\"docutils literal notranslate\"><span class=\"pre\">napari-plugin-engine</span></code>\n(described on this page) will continue to work for at least the\nfirst half of 2022, but we recommend that new plugins use <code class=\"docutils literal notranslate\"><span class=\"pre\">npe2</span></code> and\nexisting plugins consider migrating soon. See the\n<a class=\"reference internal\" href=\"npe2_migration_guide.html#npe2-migration-guide\"><span class=\"std std-ref\">npe2 migration guide</span></a> for details.</p>\n<p>The content below describes the original\n<a class=\"reference external\" href=\"https://github.com/napari/napari-plugin-engine\" target=\"_blank\" rel=\"noreferrer\"><code class=\"docutils literal notranslate\"><span class=\"pre\">napari-plugin-engine</span></code></a>\nand exists for archival reference purposes during the deprecation period.</p>\n</div>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">¶</a></h2>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> supports plugin development through <strong>hooks</strong>:\nspecific places in the napari codebase where functionality can be extended.</p>\n<ol class=\"simple\">\n<li><p><strong>Hook specifications</strong>: The available hooks are declared as\n“<em>hook specifications</em>”: function signatures that define the API (or\n“contract”) that a plugin developer must adhere to when writing their function\nthat we promise to call somewhere in the napari codebase.\nSee <a class=\"reference internal\" href=\"#plugins-hook-spec\"><span class=\"std std-ref\">Step 1: Choose a hook specification to implement</span></a>.</p></li>\n<li><p><strong>Hook implementations</strong>: To make a plugin, plugin developers then write functions (“<em>hook\nimplementations</em>”) and mark that function as meeting the requirements of a\nspecific <em>hook specification</em> offered by napari.\nSee <a class=\"reference internal\" href=\"#plugins-hook-implement\"><span class=\"std std-ref\">Step 2: Write your hook implementation</span></a>.</p></li>\n<li><p><strong>Plugin discovery</strong>: Plugins that are installed in the same python\nenvironment as napari can make themselves known to napari. <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will then\nscan plugin modules for <em>hook implementations</em> that will be called at the\nappropriate time and place during the execution of <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>.\nSee <a class=\"reference internal\" href=\"#plugin-discovery\"><span class=\"std std-ref\">Step 3: Make your plugin discoverable</span></a>.</p></li>\n<li><p><strong>Plugin sharing</strong>: When you are ready to share your plugin, tag your repo\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">napari-plugin</span></code>, push a release to pypi, and announce it on <a class=\"reference external\" href=\"http://Image.sc\" target=\"_blank\" rel=\"noreferrer\">Image.sc</a>.\nYour plugin will then be available for users on the\n<a class=\"reference external\" href=\"https://napari-hub.org/\" target=\"_blank\" rel=\"noreferrer\">napari hub</a>. See <a class=\"reference internal\" href=\"#plugin-sharing\"><span class=\"std std-ref\">Step 4: Deploy your plugin</span></a>.</p></li>\n</ol>\n<div class=\"section\" id=\"step-1-choose-a-hook-specification-to-implement\">\n<span id=\"plugins-hook-spec\"></span><h3>Step 1: Choose a hook specification to implement<a class=\"headerlink\" href=\"#step-1-choose-a-hook-specification-to-implement\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The functionality of plugins, as currently designed and implemented in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>, is rather specific in scope: They are <em>not</em> just independent code\nblocks with their own GUIs that show up next to the main napari window. Rather,\nplugin developers must decide which of the current <em>hook specifications</em>\ndefined by napari they would like to implement.</p>\n<p>For a complete list of <em>hook specifications</em> that developers can implement, see\nthe <a class=\"reference internal\" href=\"#hook-specifications-reference\"><span class=\"std std-ref\">Hook Specification Reference</span></a>.</p>\n<p>A single plugin package may implement more than one <em>hook specification</em>, and\neach <em>hook specification</em> could have multiple <em>hook implementations</em> within\na single package.</p>\n<p>Let’s take the <a class=\"reference internal\" href=\"#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_get_reader()</span></code></a>\nhook (our primary “reader plugin” hook) as an example. It is defined as:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"n\">LayerData</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>\n   <span class=\"n\">ReaderFunction</span> <span class=\"o\">=</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">LayerData</span><span class=\"p\">]]</span>\n\n   <span class=\"nd\">@napari_hook_specification</span><span class=\"p\">(</span><span class=\"n\">firstresult</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n   <span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span>\n       <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n   <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">ReaderFunction</span><span class=\"p\">]:</span>\n       <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Note that it takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> and either returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or a function. From the <a class=\"reference internal\" href=\"#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">docstring</span></code></a> of the hook\nspecification, we see that the implementation should return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the\npath is of an unrecognized format, otherwise it should return a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ReaderFunction</span></code>, which is a function that takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> (the filepath to\nread) and returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> is any one\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.</p>\n<p>That seems like a bit of a mouthful! But it’s a precise (though flexible)\ncontract that you can follow, and know that napari will handle the rest.</p>\n</div>\n<div class=\"section\" id=\"step-2-write-your-hook-implementation\">\n<span id=\"plugins-hook-implement\"></span><h3>Step 2: Write your hook implementation<a class=\"headerlink\" href=\"#step-2-write-your-hook-implementation\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Once you have identified the <a class=\"reference internal\" href=\"#hook-specifications-reference\"><span class=\"std std-ref\">hook specification</span></a> that you want to implement, you have to create\na <em>hook implementation</em>: a function that accepts the arguments specified by the\nhook specification signature and returns a value with the expected return type.</p>\n<p>Here’s an example hook implementation for\n<a class=\"reference internal\" href=\"#napari.plugins.hook_specifications.napari_get_reader\" title=\"napari.plugins.hook_specifications.napari_get_reader\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_get_reader()</span></code></a> that enables\nnapari to open a numpy binary file with a <code class=\"docutils literal notranslate\"><span class=\"pre\">.npy</span></code> extension (previously saved\nwith <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save\" title=\"(in NumPy v1.22)\" target=\"_blank\" rel=\"noreferrer\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">numpy.save()</span></code></a>)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n   <span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">npy_file_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n      <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n      <span class=\"c1\"># return it as a list of LayerData tuples,</span>\n      <span class=\"c1\"># here with no optional metadata</span>\n      <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">array</span><span class=\"p\">,)]</span>\n\n   <span class=\"c1\"># this line is explained below in \"Decorating your function...\"</span>\n   <span class=\"nd\">@napari_hook_implementation</span>\n   <span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n      <span class=\"c1\"># remember, path can be a list, so we check its type first...</span>\n      <span class=\"c1\"># (this example plugin doesn't handle lists)</span>\n      <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".npy\"</span><span class=\"p\">):</span>\n         <span class=\"c1\"># If we recognize the format, we return the actual reader function</span>\n         <span class=\"k\">return</span> <span class=\"n\">npy_file_reader</span>\n      <span class=\"c1\"># otherwise we return None.</span>\n      <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"decorating-your-function-with-hookimplementationmarker\">\n<span id=\"hookimplementation-decorator\"></span><h4>Decorating your function with <code class=\"docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker</span></code><a class=\"headerlink\" href=\"#decorating-your-function-with-hookimplementationmarker\" title=\"Permalink to this headline\">¶</a></h4>\n<p>In order to let <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> know that one of your functions satisfies the API of\none of the napari <em>hook specifications</em>, you must decorate your function with\nan instance of <a class=\"reference external\" href=\"https://napari-plugin-engine.readthedocs.io/en/latest/api.html#napari_plugin_engine.HookImplementationMarker\" title=\"(in napari-plugin-engine)\" target=\"_blank\" rel=\"noreferrer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker</span></code></a>,\ninitialized with the name <code class=\"docutils literal notranslate\"><span class=\"pre\">\"napari\"</span></code>. As a convenience, napari provides this\ndecorator at <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin_engine.napari_hook_implementation</span></code> as shown in\nthe example above.</p>\n<p>However, it’s not required to import from or depend on napari <em>at all</em> when\nwriting a plugin. You can import a <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_implementation</span></code> decorator\ndirectly from <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin_engine</span></code> (a very lightweight dependency that uses\nonly standard lib python).</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"matching-hook-implementations-to-specifications\">\n<h5>Matching hook implementations to specifications<a class=\"headerlink\" href=\"#matching-hook-implementations-to-specifications\" title=\"Permalink to this headline\">¶</a></h5>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> matches your implementation to one of our hook\nspecifications by looking at the <em>name</em> of your decorated function. So in the\nexample above, because the hook implementation was literally\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_get_reader</span></code>, it gets interpreted as an implementation for the\nhook specification of the same name.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"nd\">@napari_hook_implementation</span>\n   <span class=\"k\">def</span> <span class=\"nf\">napari_get_reader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n      <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>However, you may also mark <em>any</em> function as satisfying a particular napari\nhook specification (regardless of the function’s name) by providing the name of\nthe target hook specification to the <code class=\"docutils literal notranslate\"><span class=\"pre\">specname</span></code> argument in your\nimplementation decorator:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"nd\">@napari_hook_implementation</span><span class=\"p\">(</span><span class=\"n\">specname</span><span class=\"o\">=</span><span class=\"s2\">\"napari_get_reader\"</span><span class=\"p\">)</span>\n   <span class=\"k\">def</span> <span class=\"nf\">whatever_name_you_want</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n      <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This allows you to specify multiple hook implementations of the same hook\nspecification in the same module or class, without needing a separate entry point.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"step-3-make-your-plugin-discoverable\">\n<span id=\"plugin-discovery\"></span><h3>Step 3: Make your plugin discoverable<a class=\"headerlink\" href=\"#step-3-make-your-plugin-discoverable\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Packages and modules installed in the same environment as <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> may make\nthemselves “discoverable” to napari using package metadata, as outlined in the\n<a class=\"reference external\" href=\"https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadata\" target=\"_blank\" rel=\"noreferrer\">Python Packaging Authority guide</a>.</p>\n<p>By providing an <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_points</span></code> argument with the key <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.plugin</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">setup()</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.py</span></code>, plugins can register themselves for discovery.</p>\n<p>For example if you have a package named <code class=\"docutils literal notranslate\"><span class=\"pre\">mypackage</span></code> with a submodule\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari_plugin</span></code> where you have decorated one or more napari hook\nimplementations, then if you include in <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.py</span></code>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>   <span class=\"c1\"># setup.py</span>\n\n   <span class=\"n\">setup</span><span class=\"p\">(</span>\n      <span class=\"o\">...</span>\n      <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'napari.plugin'</span><span class=\"p\">:</span> <span class=\"s1\">'plugin-name = mypackage.napari_plugin'</span><span class=\"p\">},</span>\n      <span class=\"o\">...</span>\n   <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>… then napari will search the <code class=\"docutils literal notranslate\"><span class=\"pre\">mypackage.napari_plugin</span></code> module for\nfunctions decorated with the <code class=\"docutils literal notranslate\"><span class=\"pre\">HookImplementationMarker(\"napari\")</span></code> decorator\nand register them under the plugin name <code class=\"docutils literal notranslate\"><span class=\"pre\">\"plugin-name\"</span></code>.</p>\n<p>A user would then be able to use <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>, extended with your package’s\nfunctionality by simply installing your package along with napari:</p>\n<div class=\"highlight-sh notranslate\"><div class=\"highlight\"><pre><span></span>   pip install napari mypackage\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"step-4-deploy-your-plugin\">\n<span id=\"plugin-sharing\"></span><h3>Step 4: Deploy your plugin<a class=\"headerlink\" href=\"#step-4-deploy-your-plugin\" title=\"Permalink to this headline\">¶</a></h3>\n<p>See <a class=\"reference internal\" href=\"test_deploy.html\"><span class=\"doc std std-doc\">testing and deploying</span></a> your plugin.  (This hasn’t changed\nsignificantly with the secod generation (<code class=\"docutils literal notranslate\"><span class=\"pre\">npe2</span></code>) plugin engine).</p>\n</div>\n</div>\n<div class=\"section\" id=\"cookiecutter-template\">\n<span id=\"plugin-cookiecutter-template\"></span><h2>Cookiecutter template<a class=\"headerlink\" href=\"#cookiecutter-template\" title=\"Permalink to this headline\">¶</a></h2>\n<p>To quickly generate a new napari plugin project, you may wish to use the\n<a class=\"reference external\" href=\"https://github.com/napari/cookiecutter-napari-plugin\" target=\"_blank\" rel=\"noreferrer\">cookiecutter-napari-plugin</a> template. This uses\nthe <a class=\"reference external\" href=\"https://github.com/cookiecutter/cookiecutter\" target=\"_blank\" rel=\"noreferrer\">cookiecutter</a> command line\nutility, which will ask you a few questions about your project and get you\nstarted with a ready-to-go package layout where you can begin implementing your\nplugin.</p>\n<p>Install cookiecutter and use the template as follows:</p>\n<div class=\"highlight-sh notranslate\"><div class=\"highlight\"><pre><span></span>pip install cookiecutter\ncookiecutter https://github.com/napari/cookiecutter-napari-plugin\n</pre></div>\n</div>\n<p>See the <a class=\"reference external\" href=\"https://github.com/napari/cookiecutter-napari-plugin\" target=\"_blank\" rel=\"noreferrer\">readme</a> for details</p>\n<hr class=\"docutils\">\n</div>\n<div class=\"section\" id=\"hook-specification-reference\">\n<span id=\"hook-specifications-reference\"></span><h2>Hook Specification Reference<a class=\"headerlink\" href=\"#hook-specification-reference\" title=\"Permalink to this headline\">¶</a></h2>\n<p>All napari hook specifications for pluggable functionality are defined here.</p>\n<p>A <em>hook specification</em> is a function signature (with documentation) that\ndeclares an API that plugin developers must adhere to when providing hook\nimplementations.  <em>Hook implementations</em> provided by plugins (and internally by\nnapari) will then be invoked in various places throughout the code base.</p>\n<p>When implementing a hook specification, pay particular attention to the number\nand types of the arguments in the specification signature, as well as the\nexpected return type.</p>\n<p>To allow for hook specifications to evolve over the lifetime of napari,\nhook implementations may accept <em>fewer</em> arguments than defined in the\nspecification. (This allows for extending existing hook arguments without\nbreaking existing implementations). However, implementations must not require\n<em>more</em> arguments than defined in the spec.</p>\n<p>For more general background on the plugin hook calling mechanism, see the\n<a class=\"reference external\" href=\"https://napari-plugin-engine.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noreferrer\">napari-plugin-manager documentation</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Hook specifications are a feature borrowed from <a class=\"reference external\" href=\"https://pluggy.readthedocs.io/en/latest/#specs\" target=\"_blank\" rel=\"noreferrer\">pluggy</a>. In the <a class=\"reference external\" href=\"https://pluggy.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noreferrer\">pluggy\ndocumentation</a>, hook\nspecification marker instances are named <code class=\"docutils literal notranslate\"><span class=\"pre\">hookspec</span></code> by convention, and\nhook implementation marker instances are named <code class=\"docutils literal notranslate\"><span class=\"pre\">hookimpl</span></code>.  The\nconvention in napari is to name them more explicitly:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_specification</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_implementation</span></code>,\nrespectively.</p>\n</div>\n<div class=\"section\" id=\"io-hooks\">\n<h3>IO hooks<a class=\"headerlink\" href=\"#io-hooks\" title=\"Permalink to this headline\">¶</a></h3>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_provide_sample_data\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_provide_sample_data</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_provide_sample_data\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_provide_sample_data\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Provide sample data.</p>\n<p>Plugins may implement this hook to provide sample data for use in napari.\nSample data is accessible in the <cite>File &gt; Open Sample</cite> menu, or\nprogrammatically, with <a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer.open_sample\" title=\"napari.Viewer.open_sample\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.Viewer.open_sample()</span></code></a>.</p>\n<p>Plugins implementing this hook specification must return a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>, where\neach key is a <cite>sample_key</cite> (the string that will appear in the\n<cite>Open Sample</cite> menu), and the value is either a string, or\na callable that returns an iterable of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> tuples, where each\ntuple is a 1-, 2-, or 3-tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span>\n<span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code> (thus, an individual sample-loader may provide multiple\nlayers).  If the value is a string, it will be opened with\n<a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer.open\" title=\"napari.Viewer.open\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.Viewer.open()</span></code></a>.</p>\n<p class=\"rubric\">Examples</p>\n<p>Here’s a minimal example of a plugin that provides three samples:</p>\n<blockquote>\n<div><ol class=\"arabic\">\n<li><p>random data from numpy</p></li>\n<li><p>a random image pulled from the internet</p></li>\n<li><dl>\n<dt>random data from numpy, provided as a dict with the keys:</dt><dd><dl class=\"simple\">\n<dt>‘display_name’: a string that will show in the menu (by default,</dt><dd><p>the <cite>sample_key</cite> will be shown)</p>\n</dd>\n</dl>\n<p>‘data’: a string or callable, as in 1/2.</p>\n</dd>\n</dl>\n</li>\n</ol>\n</div></blockquote>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_generate_random_data</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'random data'</span><span class=\"p\">})]</span>\n\n<span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_provide_sample_data</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'random data'</span><span class=\"p\">:</span> <span class=\"n\">_generate_random_data</span><span class=\"p\">,</span>\n        <span class=\"s1\">'random image'</span><span class=\"p\">:</span> <span class=\"s1\">'https://picsum.photos/1024'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sample_key'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'display_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Some Random Data (512 x 512)'</span>\n            <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">_generate_random_data</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>A mapping of <cite>sample_key</cite> to <cite>data_loader</cite></p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>Dict[ <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a>, Union[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a>, Callable[.., Iterable[LayerData]]] ]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_get_reader\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_get_reader</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_get_reader\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_get_reader\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Return a function capable of loading <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> into napari, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p>This is the primary “<strong>reader plugin</strong>” function.  It accepts a path or\nlist of paths, and returns a list of data to be added to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code>.\nThe function may return <code class=\"docutils literal notranslate\"><span class=\"pre\">[(None,</span> <span class=\"pre\">)]</span></code> to indicate that the file was read\nsuccessfully, but did not contain any data.</p>\n<p>The main place this hook is used is in <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer.open()</span></code>, via the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">read_data_with_plugins()</span></code> function.</p>\n<p>It will also be called on <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">Open...</span></code> or when a user drops a file\nor folder onto the viewer. This function must execute <strong>quickly</strong>, and\nshould return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the filepath is of an unrecognized format for\nthis reader plugin.  If <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> is determined to be recognized format,\nthis function should return a <em>new</em> function that accepts the same filepath\n(or list of paths), and returns a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> tuples, where each\ntuple is a 1-, 2-, or 3-tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span>\n<span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will then use each tuple in the returned list to generate a new\nlayer in the viewer using the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer._add_layer_from_data()</span></code>\nmethod.  The first, (optional) second, and (optional) third items in each\ntuple in the returned layer_data list, therefore correspond to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">meta</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_type</span></code> arguments of the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer._add_layer_from_data()</span></code>\nmethod, respectively.</p>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> may be either a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>.  If a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code>, then each path in the list can be assumed to be one part of a\nlarger multi-dimensional stack (for instance: a list of 2D image files\nthat should be stacked along a third axis). Implementations should do\ntheir own checking for <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>, and handle each case as\ndesired.</p>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a><em> or </em><em>list of str</em>) – Path to file, directory, or resource (like a URL), or a list of paths.</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>A function that accepts the path, and returns a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_data</span></code>,\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_data</span></code> is one of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.\nIf unable to read the path, must return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (not <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>!).</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p>Callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_get_writer\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_get_writer</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layer_types</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_get_writer\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_get_writer\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Return function capable of writing napari layer data to <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>.</p>\n<p>This function will be called whenever the user attempts to save multiple\nlayers (e.g. via <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">Save</span> <span class=\"pre\">Layers</span></code>, or\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">save_layers()</span></code>).\nThis function must execute <strong>quickly</strong>, and should return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has an unrecognized extension for the reader plugin or the list of\nlayer types are incompatible with what the plugin can write. If <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> is\na recognized format, this function should return a <em>function</em> that accepts\nthe same <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>, and a list of tuples containing the data for each layer\nbeing saved in the form of <code class=\"docutils literal notranslate\"><span class=\"pre\">(Layer.data,</span> <span class=\"pre\">Layer._get_state(),</span>\n<span class=\"pre\">Layer._type_string)</span></code>. The writer function should return a list of strings\n(the actual filepath(s) that were written).</p>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>It is up to plugins to inspect and obey any extension in <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>\n(and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension).</p>\n</div>\n<p>An example function signature for a <code class=\"docutils literal notranslate\"><span class=\"pre\">WriterFunction</span></code> that might be\nreturned by this hook specification is as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">writer_function</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">layer_data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).  Any extensions in\nthe path should be examined and obeyed.  (i.e. if the plugin is\nincapable of returning a requested extension, it should return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>).</p></li>\n<li><p><strong>layer_types</strong> (<em>list of str</em>) – List of layer types (e.g. “image”, “labels”) that will be provided to\nthe writer function.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>A function that accepts the path, a list of layer_data (where\nlayer_data is <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>). If unable to write to the\npath or write the layer_data, must return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (not <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p>Callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<div class=\"section\" id=\"single-layers-io\">\n<span id=\"write-single-layer-hookspecs\"></span><h4>Single Layers IO<a class=\"headerlink\" href=\"#single-layers-io\" title=\"Permalink to this headline\">¶</a></h4>\n<p>The following hook specifications will be called when a user saves a single\nlayer in napari, and should save the layer to the requested format and return\nthe save path if the data are successfully written. Otherwise, if nothing was saved, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.\nThey each accept a <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>.\nIt is up to plugins to inspect and obey the extension of the path (and return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if it is an unsupported extension). The <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> argument will come\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer.data</span></code>, and a <code class=\"docutils literal notranslate\"><span class=\"pre\">meta</span></code> dict that will correspond to the layer’s\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_get_state()</span></code> method.</p>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_image\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_image</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_image\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_image\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write image data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> or </em><em>list of array</em>) – Image data. Can be N dimensional. If meta[‘rgb’] is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> then the\ndata should be interpreted as RGB or RGBA. If meta[‘multiscale’] is\nTrue, then the data should be interpreted as a multiscale image.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Image metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_labels\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_labels</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_labels\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_labels\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write labels data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> or </em><em>list of array</em>) – Integer valued label data. Can be N dimensional. Every pixel contains\nan integer ID corresponding to the region it belongs to. The label 0 is\nrendered as transparent. If a list and arrays are decreasing in shape\nthen the data is from a multiscale image.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Labels metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_points\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_points</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_points\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write points data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> (</em><em>N</em><em>, </em><em>D</em><em>)</em>) – Coordinates for N points in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Points metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_shapes\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_shapes</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_shapes\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_shapes\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write shapes data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#list\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>list</em></a>) – List of shape data, where each element is an (N, D) array of the\nN vertices of a shape in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Shapes metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_surface\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_surface</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_surface\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_surface\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write surface data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>3-tuple of array</em>) – The first element of the tuple is an (N, D) array of vertices of\nmesh triangles. The second is an (M, 3) array of int of indices\nof the mesh triangles. The third element is the (K0, …, KL, N)\narray of values used to color vertices where the additional L\ndimensions are used to color the same mesh with different values.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Surface metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_vectors\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_vectors</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_vectors\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_write_vectors\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Write vectors data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>(</em><em>N</em><em>, </em><em>2</em><em>, </em><em>D</em><em>) </em><em>array</em>) – The start point and projections of N vectors in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\"><em>dict</em></a>) – Vectors metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"analysis-hooks\">\n<h3>Analysis hooks<a class=\"headerlink\" href=\"#analysis-hooks\" title=\"Permalink to this headline\">¶</a></h3>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_function\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_function</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_function\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_experimental_provide_function\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Provide function(s) that can be passed to magicgui.</p>\n<p>This hook specification is marked as experimental as the API or how the\nreturned value is handled may change here more frequently then the\nrest of the codebase.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p><strong>function(s)</strong> – Implementations should provide either a single function, or a list of\nfunctions. Note that this does not preclude specifying multiple\nseparate implementations in the same module or class.\nThe functions should have Python type annotations so that\n<a class=\"reference external\" href=\"https://napari.org/magicgui\" target=\"_blank\" rel=\"noreferrer\">magicgui</a> can generate a widget from\nthem.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>FunctionType or list of FunctionType</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari.types</span> <span class=\"kn\">import</span> <span class=\"n\">ImageData</span><span class=\"p\">,</span> <span class=\"n\">LayerDataTuple</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">image</span> <span class=\"p\">:</span> <span class=\"n\">ImageData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">LayerDataTuple</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># process the image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># return it + some layer properties</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'colormap'</span><span class=\"p\">:</span><span class=\"s1\">'turbo'</span><span class=\"p\">}</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_function</span><span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">my_function</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gui-hooks\">\n<h3>GUI hooks<a class=\"headerlink\" href=\"#gui-hooks\" title=\"Permalink to this headline\">¶</a></h3>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_theme\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_theme</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_theme\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_experimental_provide_theme\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Provide GUI with a set of colors used through napari. This hook allows you to\nprovide additional color schemes so you can accomplish your desired styling.</p>\n<p>Themes are provided as <cite>dict</cite> with several required fields and correctly formatted\ncolor values. Colors can be specified using color names (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">white</span></code>), hex color\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">#ff5733</span></code>), rgb color in 0-255 range (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">rgb(255,</span> <span class=\"pre\">0,</span> <span class=\"pre\">127)</span></code> or as\n3- or 4-element tuples or lists (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">(255,</span> <span class=\"pre\">0,</span> <span class=\"pre\">127)</span></code>. The <cite>Theme</cite> model will\nautomatically handle the conversion.</p>\n<p>See <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Theme</span></code> for more detail of what are the required keys.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p><strong>themes</strong> – Sequence of dictionaries containing new color schemes to be used by napari.\nYou can replace existing themes by using the same names.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>Dict[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a>, Dict[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a>, Union[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">str</a>, Tuple, List]]</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">get_new_theme</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]]:</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># specify theme(s) that should be added to napari</span>\n<span class=\"gp\">... </span>    <span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"super_dark\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"super_dark\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"background\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(12, 12, 12)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"foreground\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(65, 72, 81)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"primary\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(90, 98, 108)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"secondary\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(134, 142, 147)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"highlight\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(106, 115, 128)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(240, 241, 242)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"icon\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(209, 210, 212)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"warning\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(153, 18, 31)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"current\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(0, 122, 204)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"syntax_style\"</span><span class=\"p\">:</span> <span class=\"s2\">\"native\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"console\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(0, 0, 0)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"canvas\"</span><span class=\"p\">:</span> <span class=\"s2\">\"black\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"p\">}</span>\n<span class=\"gp\">... </span>    <span class=\"p\">}</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">themes</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_theme</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">get_new_theme</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_dock_widget</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_dock_widget\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\" title=\"Permalink to this definition\">¶</a></dt>\n<dd><p>Provide functions that return widgets to be docked in the viewer.</p>\n<p>This hook specification is marked as experimental as the API or how the\nreturned value is handled may change here more frequently then the\nrest of the codebase.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p></p><p><strong>result</strong> – A “callable” in this context is a class or function that, when\ncalled, returns an instance of either a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QWidget</span></code> or a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FunctionGui</span></code>.</p>\n<p>Implementations of this hook specification must return a callable, or a\ntuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(callable,</span> <span class=\"pre\">dict)</span></code>, where the dict contains keyword\narguments for <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.qt.Window.add_dock_widget()</span></code>. (note, however,\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut=</span></code> keyword is not yet supported).</p>\n<p>Implementations may also return a list, in which each item must be a\ncallable or <code class=\"docutils literal notranslate\"><span class=\"pre\">(callable,</span> <span class=\"pre\">dict)</span></code> tuple. Note that this does not\npreclude specifying multiple separate implementations in the same module\nor class.</p>\n<p></p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.10)\" target=\"_blank\" rel=\"noreferrer\">tuple</a> or list of callables or list of tuples</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>An example with a QtWidget:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"n\">QWidget</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyWidget</span><span class=\"p\">(</span><span class=\"n\">QWidget</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">napari_viewer</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari_viewer</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># initialize layout</span>\n<span class=\"gp\">... </span>        <span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">QGridLayout</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># add a button</span>\n<span class=\"gp\">... </span>        <span class=\"n\">btn</span> <span class=\"o\">=</span> <span class=\"n\">QPushButton</span><span class=\"p\">(</span><span class=\"s1\">'Click me!'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"k\">def</span> <span class=\"nf\">trigger</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"napari has\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">napari_viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">),</span> <span class=\"s2\">\"layers\"</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">btn</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">trigger</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"n\">btn</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># activate layout</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setLayout</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">MyWidget</span>\n</pre></div>\n</div>\n<p>An example using magicgui:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">magicgui</span> <span class=\"kn\">import</span> <span class=\"n\">magic_factory</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@magic_factory</span><span class=\"p\">(</span><span class=\"n\">auto_call</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"mi\">16</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">threshold</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'napari.types.LabelsData'</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">threshold</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"help\">\n<h2>Help<a class=\"headerlink\" href=\"#help\" title=\"Permalink to this headline\">¶</a></h2>\n<p>If you run into trouble creating your plugin, please don’t hesitate to reach\nout for help in the <a class=\"reference external\" href=\"https://forum.image.sc/tag/napari\" target=\"_blank\" rel=\"noreferrer\">Image.sc Forum</a>.\nAlternatively, if you find a bug or have a specific feature request for plugin\nsupport, please open an issue at our <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/new/choose\" target=\"_blank\" rel=\"noreferrer\">GitHub issue tracker</a>.</p>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./plugins/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#overview","text":"Overview"},{"href":"#cookiecutter-template","text":"Cookiecutter template"},{"href":"#hook-specification-reference","text":"Hook Specification Reference"},{"href":"#help","text":"Help"}],"ipynbSource":"","mdSource":"/_sources/plugins/stable/npe1.md"}},"__N_SSG":true}