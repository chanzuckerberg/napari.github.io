{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"../../developers/index.html":{"level":1,"children":["../../developers/benchmarks.html","../../developers/contributing.html","../../developers/core_dev_guide.html","../../developers/profiling.html","../../developers/release.html","../../developers/testing.html","../../developers/docs.html"],"href":"../../developers/index.html","text":"Developer resources"},"../../developers/docs.html":{"level":2,"children":[],"href":"../../developers/docs.html","text":"Organization of Documentation for napari"},"../../developers/testing.html":{"level":2,"children":[],"href":"../../developers/testing.html","text":"Testing"},"../../developers/release.html":{"level":2,"children":[],"href":"../../developers/release.html","text":"Release Guide"},"../../developers/profiling.html":{"level":2,"children":[],"href":"../../developers/profiling.html","text":"Profiling"},"../../developers/core_dev_guide.html":{"level":2,"children":[],"href":"../../developers/core_dev_guide.html","text":"Core Developer Guide"},"../../developers/contributing.html":{"level":2,"children":[],"href":"../../developers/contributing.html","text":"Contributing Guide"},"../../developers/benchmarks.html":{"level":2,"children":[],"href":"../../developers/benchmarks.html","text":"Benchmarks"},"../../guides/stable/index.html":{"level":1,"children":["../../guides/stable/event_loop.html","../../guides/stable/threading.html","../../guides/stable/perfmon.html","../../guides/stable/rendering.html","../../guides/stable/docker.html","../../guides/stable/performance.html","../../guides/stable/magicgui.html","../../guides/stable/translations.html","../../guides/stable/rendering-explanation.html","../../guides/stable/connecting_events.html","../../guides/stable/connecting_events.html#long-running-blocking-functions","../../guides/stable/3D_interactivity.html"],"href":"../../guides/stable/index.html","text":"Developer guides"},"../../guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"../../guides/stable/3D_interactivity.html","text":"3D interactivity"},"../../guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"../../guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"../../guides/stable/connecting_events.html":{"level":2,"children":[],"href":"../../guides/stable/connecting_events.html","text":"Hooking up your own events"},"../../guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"../../guides/stable/rendering-explanation.html","text":"Rendering in napari"},"../../guides/stable/translations.html":{"level":2,"children":[],"href":"../../guides/stable/translations.html","text":"Translations"},"../../guides/stable/magicgui.html":{"level":2,"children":[],"href":"../../guides/stable/magicgui.html","text":"Using magicgui in napari"},"../../guides/stable/performance.html":{"level":2,"children":[],"href":"../../guides/stable/performance.html","text":"Napari Performance"},"../../guides/stable/docker.html":{"level":2,"children":[],"href":"../../guides/stable/docker.html","text":"Napari in Docker (WIP)"},"../../guides/stable/rendering.html":{"level":2,"children":[],"href":"../../guides/stable/rendering.html","text":"Asynchronous Rendering"},"../../guides/stable/perfmon.html":{"level":2,"children":[],"href":"../../guides/stable/perfmon.html","text":"Performance Monitoring"},"../../guides/stable/threading.html":{"level":2,"children":[],"href":"../../guides/stable/threading.html","text":"Multithreading in napari"},"../../guides/stable/event_loop.html":{"level":2,"children":[],"href":"../../guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"../../roadmaps/index.html":{"level":1,"children":["../../roadmaps/0_4.html","../../roadmaps/0_3_retrospective.html","../../roadmaps/0_3.html"],"href":"../../roadmaps/index.html","text":"Roadmaps"},"../../roadmaps/0_3.html":{"level":2,"children":[],"href":"../../roadmaps/0_3.html","text":"Roadmap 0.3"},"../../roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"../../roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"../../roadmaps/0_4.html":{"level":2,"children":[],"href":"../../roadmaps/0_4.html","text":"Roadmap 0.4"},"../../api/stable/index.html":{"level":1,"children":["../../api/stable/napari.layers.html","../../api/stable/napari.view_layers.html","../../api/stable/napari.types.html","../../api/stable/napari.utils.html","../../api/stable/napari.plugins.html","../../api/stable/napari.components.html","../../api/stable/napari.qt.threading.html","../../api/stable/napari.utils.perf.html","../../api/stable/napari.html"],"href":"../../api/stable/index.html","text":"API reference"},"../../api/stable/napari.html":{"level":2,"children":["../../api/stable/napari.Viewer.html"],"href":"../../api/stable/napari.html","text":"napari"},"../../api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"../../api/stable/napari.Viewer.html","text":"napari.Viewer"},"../../api/stable/napari.utils.perf.html":{"level":2,"children":["../../api/stable/napari.utils.perf.PerfEvent.html"],"href":"../../api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"../../api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"../../api/stable/napari.qt.threading.html":{"level":2,"children":["../../api/stable/napari.qt.threading.FunctionWorker.html","../../api/stable/napari.qt.threading.GeneratorWorker.html","../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html","../../api/stable/napari.qt.threading.WorkerBase.html","../../api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"../../api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"../../api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"../../api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"../../api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"../../api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"../../api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"../../api/stable/napari.components.html":{"level":2,"children":["../../api/stable/napari.components.Camera.html","../../api/stable/napari.components.Dims.html","../../api/stable/napari.components.LayerList.html","../../api/stable/napari.components.ViewerModel.html"],"href":"../../api/stable/napari.components.html","text":"napari.components"},"../../api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"../../api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"../../api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"../../api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"../../api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"../../api/stable/napari.plugins.html":{"level":2,"children":["../../api/stable/napari.plugins.NapariPluginManager.html"],"href":"../../api/stable/napari.plugins.html","text":"napari.plugins"},"../../api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"../../api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"../../api/stable/napari.utils.html":{"level":2,"children":["../../api/stable/napari.utils.Colormap.html","../../api/stable/napari.utils.nbscreenshot.html"],"href":"../../api/stable/napari.utils.html","text":"napari.utils"},"../../api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"../../api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"../../api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"../../api/stable/napari.types.html":{"level":2,"children":["../../api/stable/napari.types.ArrayBase.html","../../api/stable/napari.types.Path.html","../../api/stable/napari.types.SampleDict.html","../../api/stable/napari.types.TracebackType.html","../../api/stable/napari.types.TypedDict.html"],"href":"../../api/stable/napari.types.html","text":"napari.types"},"../../api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"../../api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"../../api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"../../api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.Path.html","text":"napari.types.Path"},"../../api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"../../api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"../../api/stable/napari.view_layers.html":{"level":2,"children":["../../api/stable/napari.view_layers.Viewer.html"],"href":"../../api/stable/napari.view_layers.html","text":"napari.view_layers"},"../../api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"../../api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"../../api/stable/napari.layers.html":{"level":2,"children":["../../api/stable/napari.layers.Image.html","../../api/stable/napari.layers.Labels.html","../../api/stable/napari.layers.Layer.html","../../api/stable/napari.layers.Points.html","../../api/stable/napari.layers.Shapes.html","../../api/stable/napari.layers.Surface.html","../../api/stable/napari.layers.Tracks.html","../../api/stable/napari.layers.Vectors.html"],"href":"../../api/stable/napari.layers.html","text":"napari.layers"},"../../api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"../../api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"../../api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"../../api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"../../api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"../../api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"../../api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"../../api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"../../api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"../../release/index.html":{"level":1,"children":["../../release/release_0_4_10.html","../../release/release_0_4_9.html","../../release/release_0_4_8.html","../../release/release_0_4_7.html","../../release/release_0_4_6.html","../../release/release_0_4_5.html","../../release/release_0_4_4.html","../../release/release_0_4_3.html","../../release/release_0_4_2.html","../../release/release_0_4_1.html","../../release/release_0_4_0.html","../../release/release_0_3_8.html","../../release/release_0_3_7.html","../../release/release_0_3_6.html","../../release/release_0_3_5.html","../../release/release_0_3_4.html","../../release/release_0_3_3.html","../../release/release_0_3_2.html","../../release/release_0_3_1.html","../../release/release_0_3_0.html","../../release/release_0_2_12.html","../../release/release_0_2_11.html","../../release/release_0_2_10.html","../../release/release_0_2_9.html","../../release/release_0_2_8.html","../../release/release_0_2_7.html","../../release/release_0_2_6.html","../../release/release_0_2_5.html","../../release/release_0_2_4.html","../../release/release_0_2_3.html","../../release/release_0_2_1.html","../../release/release_0_2_0.html","../../release/release_0_1_5.html","../../release/release_0_1_3.html","../../release/release_0_1_0.html","../../release/release_0_4_11.html"],"href":"../../release/index.html","text":"Release notes"},"../../release/release_0_4_11.html":{"level":2,"children":[],"href":"../../release/release_0_4_11.html","text":"napari 0.4.11"},"../../release/release_0_1_0.html":{"level":2,"children":[],"href":"../../release/release_0_1_0.html","text":"napari 0.1.0"},"../../release/release_0_1_3.html":{"level":2,"children":[],"href":"../../release/release_0_1_3.html","text":"napari 0.1.3"},"../../release/release_0_1_5.html":{"level":2,"children":[],"href":"../../release/release_0_1_5.html","text":"napari 0.1.5"},"../../release/release_0_2_0.html":{"level":2,"children":[],"href":"../../release/release_0_2_0.html","text":"napari 0.2.0"},"../../release/release_0_2_1.html":{"level":2,"children":[],"href":"../../release/release_0_2_1.html","text":"napari 0.2.1"},"../../release/release_0_2_3.html":{"level":2,"children":[],"href":"../../release/release_0_2_3.html","text":"napari 0.2.3"},"../../release/release_0_2_4.html":{"level":2,"children":[],"href":"../../release/release_0_2_4.html","text":"napari 0.2.4"},"../../release/release_0_2_5.html":{"level":2,"children":[],"href":"../../release/release_0_2_5.html","text":"napari 0.2.5"},"../../release/release_0_2_6.html":{"level":2,"children":[],"href":"../../release/release_0_2_6.html","text":"napari 0.2.6"},"../../release/release_0_2_7.html":{"level":2,"children":[],"href":"../../release/release_0_2_7.html","text":"napari 0.2.7"},"../../release/release_0_2_8.html":{"level":2,"children":[],"href":"../../release/release_0_2_8.html","text":"napari 0.2.8"},"../../release/release_0_2_9.html":{"level":2,"children":[],"href":"../../release/release_0_2_9.html","text":"napari 0.2.9"},"../../release/release_0_2_10.html":{"level":2,"children":[],"href":"../../release/release_0_2_10.html","text":"napari 0.2.10"},"../../release/release_0_2_11.html":{"level":2,"children":[],"href":"../../release/release_0_2_11.html","text":"napari 0.2.11"},"../../release/release_0_2_12.html":{"level":2,"children":[],"href":"../../release/release_0_2_12.html","text":"napari 0.2.12"},"../../release/release_0_3_0.html":{"level":2,"children":[],"href":"../../release/release_0_3_0.html","text":"napari 0.3.0"},"../../release/release_0_3_1.html":{"level":2,"children":[],"href":"../../release/release_0_3_1.html","text":"napari 0.3.1"},"../../release/release_0_3_2.html":{"level":2,"children":[],"href":"../../release/release_0_3_2.html","text":"napari 0.3.2"},"../../release/release_0_3_3.html":{"level":2,"children":[],"href":"../../release/release_0_3_3.html","text":"napari 0.3.3"},"../../release/release_0_3_4.html":{"level":2,"children":[],"href":"../../release/release_0_3_4.html","text":"napari 0.3.4"},"../../release/release_0_3_5.html":{"level":2,"children":[],"href":"../../release/release_0_3_5.html","text":"napari 0.3.5"},"../../release/release_0_3_6.html":{"level":2,"children":[],"href":"../../release/release_0_3_6.html","text":"napari 0.3.6"},"../../release/release_0_3_7.html":{"level":2,"children":[],"href":"../../release/release_0_3_7.html","text":"napari 0.3.7"},"../../release/release_0_3_8.html":{"level":2,"children":[],"href":"../../release/release_0_3_8.html","text":"napari 0.3.8"},"../../release/release_0_4_0.html":{"level":2,"children":[],"href":"../../release/release_0_4_0.html","text":"napari 0.4.0"},"../../release/release_0_4_1.html":{"level":2,"children":[],"href":"../../release/release_0_4_1.html","text":"napari 0.4.1"},"../../release/release_0_4_2.html":{"level":2,"children":[],"href":"../../release/release_0_4_2.html","text":"napari 0.4.2"},"../../release/release_0_4_3.html":{"level":2,"children":[],"href":"../../release/release_0_4_3.html","text":"napari 0.4.3"},"../../release/release_0_4_4.html":{"level":2,"children":[],"href":"../../release/release_0_4_4.html","text":"napari 0.4.4"},"../../release/release_0_4_5.html":{"level":2,"children":[],"href":"../../release/release_0_4_5.html","text":"napari 0.4.5"},"../../release/release_0_4_6.html":{"level":2,"children":[],"href":"../../release/release_0_4_6.html","text":"napari 0.4.6"},"../../release/release_0_4_7.html":{"level":2,"children":[],"href":"../../release/release_0_4_7.html","text":"napari 0.4.7"},"../../release/release_0_4_8.html":{"level":2,"children":[],"href":"../../release/release_0_4_8.html","text":"napari 0.4.8"},"../../release/release_0_4_9.html":{"level":2,"children":[],"href":"../../release/release_0_4_9.html","text":"napari 0.4.9"},"../../release/release_0_4_10.html":{"level":2,"children":[],"href":"../../release/release_0_4_10.html","text":"napari 0.4.10"},"index.html":{"level":1,"children":["for_napari_developers.html","for_plugin_developers.html","#","find-and-install-plugin.html"],"href":"index.html","text":"Plugins"},"find-and-install-plugin.html":{"level":2,"children":[],"href":"find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"#":{"level":2,"children":[],"href":"#","text":"napari hook specification reference"},"for_plugin_developers.html":{"level":2,"children":[],"href":"for_plugin_developers.html","text":"creating a napari plugin"},"for_napari_developers.html":{"level":2,"children":[],"href":"for_napari_developers.html","text":"napari plugin architecture"},"../../tutorials/index.html":{"level":1,"children":["../../tutorials/fundamentals/index.html","../../tutorials/applications/index.html"],"href":"../../tutorials/index.html","text":"Tutorials"},"../../tutorials/applications/index.html":{"level":2,"children":["../../tutorials/applications/annotate_segmentation.html","../../tutorials/applications/annotate_points.html","../../tutorials/applications/dask.html","../../tutorials/applications/napari_imageJ.html","../../tutorials/applications/cell_tracking.html"],"href":"../../tutorials/applications/index.html","text":"Applications"},"../../tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"../../tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"../../tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"../../tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"../../tutorials/applications/dask.html":{"level":3,"children":[],"href":"../../tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"../../tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"../../tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"../../tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"../../tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"../../tutorials/fundamentals/index.html":{"level":2,"children":["../../tutorials/fundamentals/installation.html","../../tutorials/fundamentals/getting_started.html","../../tutorials/fundamentals/viewer.html","../../tutorials/fundamentals/image.html","../../tutorials/fundamentals/labels.html","../../tutorials/fundamentals/points.html","../../tutorials/fundamentals/shapes.html","../../tutorials/fundamentals/surface.html","../../tutorials/fundamentals/tracks.html","../../tutorials/fundamentals/vectors.html"],"href":"../../tutorials/fundamentals/index.html","text":"Fundamentals"},"../../tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"../../tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"../../tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"../../tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"../../tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/points.html","text":"points layer tutorial"},"../../tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"../../tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/image.html","text":"image layer tutorial"},"../../tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"../../tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"../../tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"../../tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"../../community/index.html":{"level":1,"children":["../../community/mission_and_values.html","../../community/team.html","../../community/code_of_conduct.html","../../community/code_of_conduct_reporting.html","../../community/governance.html"],"href":"../../community/index.html","text":"Community"},"../../community/governance.html":{"level":2,"children":[],"href":"../../community/governance.html","text":"Governance Model"},"../../community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"../../community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"../../community/code_of_conduct.html":{"level":2,"children":[],"href":"../../community/code_of_conduct.html","text":"Code of Conduct"},"../../community/team.html":{"level":2,"children":[],"href":"../../community/team.html","text":"About the Project and Team"},"../../community/mission_and_values.html":{"level":2,"children":[],"href":"../../community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["../../community/index.html","../../tutorials/index.html","index.html","../../release/index.html","../../api/stable/index.html","../../roadmaps/index.html","../../guides/stable/index.html","../../developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"napari hook specification reference","pageBodyHtml":"\n        <div class=\"section\" id=\"napari-hook-specification-reference\">\n<span id=\"hook-specifications-reference\"></span>\n<p>All napari hook specifications for pluggable functionality are defined here.</p>\n<p>A <em>hook specification</em> is a function signature (with documentation) that\ndeclares an API that plugin developers must adhere to when providing hook\nimplementations.  <em>Hook implementations</em> provided by plugins (and internally by\nnapari) will then be invoked in various places throughout the code base.</p>\n<p>When implementing a hook specification, pay particular attention to the number\nand types of the arguments in the specification signature, as well as the\nexpected return type.</p>\n<p>To allow for hook specifications to evolve over the lifetime of napari,\nhook implementations may accept <em>fewer</em> arguments than defined in the\nspecification. (This allows for extending existing hook arguments without\nbreaking existing implementations). However, implementations must not require\n<em>more</em> arguments than defined in the spec.</p>\n<p>For more general background on the plugin hook calling mechanism, see the\n<a class=\"reference external\" href=\"https://napari-plugin-engine.readthedocs.io/en/latest/\">napari-plugin-manager documentation</a>.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Hook specifications are a feature borrowed from <a class=\"reference external\" href=\"https://pluggy.readthedocs.io/en/latest/#specs\">pluggy</a>. In the <a class=\"reference external\" href=\"https://pluggy.readthedocs.io/en/latest/\">pluggy\ndocumentation</a>, hook\nspecification marker instances are named <code class=\"docutils literal notranslate\"><span class=\"pre\">hookspec</span></code> by convention, and\nhook implementation marker instances are named <code class=\"docutils literal notranslate\"><span class=\"pre\">hookimpl</span></code>.  The\nconvention in napari is to name them more explicitly:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_specification</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">napari_hook_implementation</span></code>,\nrespectively.</p>\n</div>\n<div class=\"section\" id=\"io-hooks\">\n<h2>IO hooks</h2>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_provide_sample_data\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_provide_sample_data</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_provide_sample_data\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Provide sample data.</p>\n<p>Plugins may implement this hook to provide sample data for use in napari.\nSample data is accessible in the <cite>File &gt; Open Sample</cite> menu, or\nprogrammatically, with <a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer.open_sample\" title=\"napari.Viewer.open_sample\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.Viewer.open_sample()</span></code></a>.</p>\n<p>Plugins implementing this hook specification must return a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>, where\neach key is a <cite>sample_key</cite> (the string that will appear in the\n<cite>Open Sample</cite> menu), and the value is either a string, or\na callable that returns an iterable of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> tuples, where each\ntuple is a 1-, 2-, or 3-tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span>\n<span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code> (thus, an individual sample-loader may provide multiple\nlayers).  If the value is a string, it will be opened with\n<a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer.open\" title=\"napari.Viewer.open\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.Viewer.open()</span></code></a>.</p>\n<p class=\"rubric\">Examples</p>\n<p>Here’s a minimal example of a plugin that provides three samples:</p>\n<blockquote>\n<div><ol class=\"arabic\">\n<li><p>random data from numpy</p></li>\n<li><p>a random image pulled from the internet</p></li>\n<li><dl>\n<dt>random data from numpy, provided as a dict with the keys:</dt><dd><dl class=\"simple\">\n<dt>‘display_name’: a string that will show in the menu (by default,</dt><dd><p>the <cite>sample_key</cite> will be shown)</p>\n</dd>\n</dl>\n<p>‘data’: a string or callable, as in 1/2.</p>\n</dd>\n</dl>\n</li>\n</ol>\n</div></blockquote>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_generate_random_data</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'random data'</span><span class=\"p\">})]</span>\n\n<span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_provide_sample_data</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'random data'</span><span class=\"p\">:</span> <span class=\"n\">_generate_random_data</span><span class=\"p\">,</span>\n        <span class=\"s1\">'random image'</span><span class=\"p\">:</span> <span class=\"s1\">'https://picsum.photos/1024'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sample_key'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'display_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Some Random Data (512 x 512)'</span>\n            <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">_generate_random_data</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>A mapping of <cite>sample_key</cite> to <cite>data_loader</cite></p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>Dict[ <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a>, Union[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a>, Callable[.., Iterable[LayerData]]] ]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_get_reader\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_get_reader</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_get_reader\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Return a function capable of loading <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> into napari, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p>This is the primary “<strong>reader plugin</strong>” function.  It accepts a path or\nlist of paths, and returns a list of data to be added to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code>.\nThe function may return <code class=\"docutils literal notranslate\"><span class=\"pre\">[(None,</span> <span class=\"pre\">)]</span></code> to indicate that the file was read\nsuccessfully, but did not contain any data.</p>\n<p>The main place this hook is used is in <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer.open()</span></code>, via the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">read_data_with_plugins()</span></code> function.</p>\n<p>It will also be called on <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">Open...</span></code> or when a user drops a file\nor folder onto the viewer. This function must execute <strong>quickly</strong>, and\nshould return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the filepath is of an unrecognized format for\nthis reader plugin.  If <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> is determined to be recognized format,\nthis function should return a <em>new</em> function that accepts the same filepath\n(or list of paths), and returns a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerData</span></code> tuples, where each\ntuple is a 1-, 2-, or 3-tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span>\n<span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will then use each tuple in the returned list to generate a new\nlayer in the viewer using the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer._add_layer_from_data()</span></code>\nmethod.  The first, (optional) second, and (optional) third items in each\ntuple in the returned layer_data list, therefore correspond to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">meta</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_type</span></code> arguments of the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Viewer._add_layer_from_data()</span></code>\nmethod, respectively.</p>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> may be either a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>.  If a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code>, then each path in the list can be assumed to be one part of a\nlarger multi-dimensional stack (for instance: a list of 2D image files\nthat should be stacked along a third axis). Implementations should do\ntheir own checking for <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>, and handle each case as\ndesired.</p>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a><em> or </em><em>list of str</em>) – Path to file, directory, or resource (like a URL), or a list of paths.</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>A function that accepts the path, and returns a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_data</span></code>,\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_data</span></code> is one of <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta)</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>.\nIf unable to read the path, must return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (not <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>!).</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p>Callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_get_writer\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_get_writer</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layer_types</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_get_writer\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Return function capable of writing napari layer data to <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>.</p>\n<p>This function will be called whenever the user attempts to save multiple\nlayers (e.g. via <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">Save</span> <span class=\"pre\">Layers</span></code>, or\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">save_layers()</span></code>).\nThis function must execute <strong>quickly</strong>, and should return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has an unrecognized extension for the reader plugin or the list of\nlayer types are incompatible with what the plugin can write. If <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> is\na recognized format, this function should return a <em>function</em> that accepts\nthe same <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>, and a list of tuples containing the data for each layer\nbeing saved in the form of <code class=\"docutils literal notranslate\"><span class=\"pre\">(Layer.data,</span> <span class=\"pre\">Layer._get_state(),</span>\n<span class=\"pre\">Layer._type_string)</span></code>. The writer function should return a list of strings\n(the actual filepath(s) that were written).</p>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>It is up to plugins to inspect and obey any extension in <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>\n(and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension).</p>\n</div>\n<p>An example function signature for a <code class=\"docutils literal notranslate\"><span class=\"pre\">WriterFunction</span></code> that might be\nreturned by this hook specification is as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">writer_function</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">layer_data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).  Any extensions in\nthe path should be examined and obeyed.  (i.e. if the plugin is\nincapable of returning a requested extension, it should return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>).</p></li>\n<li><p><strong>layer_types</strong> (<em>list of str</em>) – List of layer types (e.g. “image”, “labels”) that will be provided to\nthe writer function.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>A function that accepts the path, a list of layer_data (where\nlayer_data is <code class=\"docutils literal notranslate\"><span class=\"pre\">(data,</span> <span class=\"pre\">meta,</span> <span class=\"pre\">layer_type)</span></code>). If unable to write to the\npath or write the layer_data, must return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (not <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p>Callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<div class=\"section\" id=\"single-layers-io\">\n<span id=\"write-single-layer-hookspecs\"></span><h3>Single Layers IO</h3>\n<p>The following hook specifications will be called when a user saves a single\nlayer in napari, and should save the layer to the requested format and return\nthe save path if the data are successfully written. Otherwise, if nothing was saved, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.\nThey each accept a <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>.\nIt is up to plugins to inspect and obey the extension of the path (and return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if it is an unsupported extension).  The <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> argument will come\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer.data</span></code>, and a <code class=\"docutils literal notranslate\"><span class=\"pre\">meta</span></code> dict that will correspond to the layer’s\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_get_state()</span></code> method.</p>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_image\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_image</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_image\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write image data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> or </em><em>list of array</em>) – Image data. Can be N dimensional. If meta[‘rgb’] is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> then the\ndata should be interpreted as RGB or RGBA. If meta[‘multiscale’] is\nTrue, then the data should be interpreted as a multiscale image.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Image metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_labels\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_labels</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_labels\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write labels data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> or </em><em>list of array</em>) – Integer valued label data. Can be N dimensional. Every pixel contains\nan integer ID corresponding to the region it belongs to. The label 0 is\nrendered as transparent. If a list and arrays are decreasing in shape\nthen the data is from a multiscale image.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Labels metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_points\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_points</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write points data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>array</em><em> (</em><em>N</em><em>, </em><em>D</em><em>)</em>) – Coordinates for N points in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Points metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_shapes\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_shapes</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_shapes\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write shapes data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#list\" title=\"(in Python v3.9)\"><em>list</em></a>) – List of shape data, where each element is an (N, D) array of the\nN vertices of a shape in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Shapes metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_surface\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_surface</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_surface\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write surface data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>3-tuple of array</em>) – The first element of the tuple is an (N, D) array of vertices of\nmesh triangles. The second is an (M, 3) array of int of indices\nof the mesh triangles. The third element is the (K0, …, KL, N)\narray of values used to color vertices where the additional L\ndimensions are used to color the same mesh with different values.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Surface metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_write_vectors\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_write_vectors</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">meta</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_write_vectors\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Write vectors data and metadata into a path.</p>\n<p>It is the responsibility of the implementation to check any extension on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it is an unsupported extension.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> has no extension, implementations may append their preferred\nextension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\"><em>str</em></a>) – Path to file, directory, or resource (like a URL).</p></li>\n<li><p><strong>data</strong> (<em>(</em><em>N</em><em>, </em><em>2</em><em>, </em><em>D</em><em>) </em><em>array</em>) – The start point and projections of N vectors in D dimensions.</p></li>\n<li><p><strong>meta</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\"><em>dict</em></a>) – Vectors metadata.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p><strong>path</strong> – If data is successfully written, return the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> that was written.\nOtherwise, if nothing was done, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.9)\">None</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"analysis-hooks\">\n<h2>Analysis hooks</h2>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_function\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_function</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_function\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Provide function(s) that can be passed to magicgui.</p>\n<p>This hook specification is marked as experimental as the API or how the\nreturned value is handled may change here more frequently then the\nrest of the codebase.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p><strong>function(s)</strong> – Implementations should provide either a single function, or a list of\nfunctions. Note that this does not preclude specifying multiple\nseparate implementations in the same module or class.\nThe functions should have Python type annotations so that\n<a class=\"reference external\" href=\"https://napari.org/magicgui\">magicgui</a> can generate a widget from\nthem.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>FunctionType or list of FunctionType</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari.types</span> <span class=\"kn\">import</span> <span class=\"n\">ImageData</span><span class=\"p\">,</span> <span class=\"n\">LayerDataTuple</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">image</span> <span class=\"p\">:</span> <span class=\"n\">ImageData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">LayerDataTuple</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># process the image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># return it + some layer properties</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'colormap'</span><span class=\"p\">:</span><span class=\"s1\">'turbo'</span><span class=\"p\">}</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_function</span><span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">my_function</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gui-hooks\">\n<h2>GUI hooks</h2>\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_theme\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_theme</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_theme\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Provide GUI with a set of colors used through napari. This hook allows you to\nprovide additional color schemes so you can accomplish your desired styling.</p>\n<p>Themes are provided as <cite>dict</cite> with several required fields and correctly formatted\ncolor values. Colors can be specified using color names (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">white</span></code>), hex color\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">#ff5733</span></code>), rgb color in 0-255 range (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">rgb(255,</span> <span class=\"pre\">0,</span> <span class=\"pre\">127)</span></code> or as\n3- or 4-element tuples or lists (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">(255,</span> <span class=\"pre\">0,</span> <span class=\"pre\">127)</span></code>. The <cite>Theme</cite> model will\nautomatically handle the conversion.</p>\n<p>See <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Theme</span></code> for more detail of what are the required keys.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p><strong>themes</strong> – Sequence of dictionaries containing new color schemes to be used by napari.\nYou can replace existing themes by using the same names.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>Dict[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a>, Dict[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a>, Union[<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.9)\">str</a>, Tuple, List]]</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">get_new_theme</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]]:</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># specify theme(s) that should be added to napari</span>\n<span class=\"gp\">... </span>    <span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">\"super_dark\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"super_dark\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"background\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(12, 12, 12)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"foreground\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(65, 72, 81)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"primary\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(90, 98, 108)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"secondary\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(134, 142, 147)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"highlight\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(106, 115, 128)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(240, 241, 242)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"icon\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(209, 210, 212)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"warning\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(153, 18, 31)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"current\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(0, 122, 204)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"syntax_style\"</span><span class=\"p\">:</span> <span class=\"s2\">\"native\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"console\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rgb(0, 0, 0)\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">\"canvas\"</span><span class=\"p\">:</span> <span class=\"s2\">\"black\"</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"p\">}</span>\n<span class=\"gp\">... </span>    <span class=\"p\">}</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">themes</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_theme</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">get_new_theme</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt id=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">napari.plugins.hook_specifications.</span></code><code class=\"sig-name descname\"><span class=\"pre\">napari_experimental_provide_dock_widget</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/napari/plugins/hook_specifications.html#napari_experimental_provide_dock_widget\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt>\n<dd><p>Provide functions that return widgets to be docked in the viewer.</p>\n<p>This hook specification is marked as experimental as the API or how the\nreturned value is handled may change here more frequently then the\nrest of the codebase.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p></p><p><strong>result</strong> – A “callable” in this context is a class or function that, when\ncalled, returns an instance of either a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QWidget</span></code> or a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FunctionGui</span></code>.</p>\n<p>Implementations of this hook specification must return a callable, or a\ntuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(callable,</span> <span class=\"pre\">dict)</span></code>, where the dict contains keyword\narguments for <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">napari.qt.Window.add_dock_widget()</span></code>. (note, however,\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut=</span></code> keyword is not yet supported).</p>\n<p>Implementations may also return a list, in which each item must be a\ncallable or <code class=\"docutils literal notranslate\"><span class=\"pre\">(callable,</span> <span class=\"pre\">dict)</span></code> tuple. Note that this does not\npreclude specifying multiple separate implementations in the same module\nor class.</p>\n<p></p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>callable or <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.9)\">tuple</a> or list of callables or list of tuples</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>An example with a QtWidget:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"n\">QWidget</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyWidget</span><span class=\"p\">(</span><span class=\"n\">QWidget</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">napari_viewer</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari_viewer</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># initialize layout</span>\n<span class=\"gp\">... </span>        <span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">QGridLayout</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># add a button</span>\n<span class=\"gp\">... </span>        <span class=\"n\">btn</span> <span class=\"o\">=</span> <span class=\"n\">QPushButton</span><span class=\"p\">(</span><span class=\"s1\">'Click me!'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"k\">def</span> <span class=\"nf\">trigger</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"napari has\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">napari_viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">),</span> <span class=\"s2\">\"layers\"</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">btn</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">trigger</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"n\">btn</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># activate layout</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setLayout</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">MyWidget</span>\n</pre></div>\n</div>\n<p>An example using magicgui:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">magicgui</span> <span class=\"kn\">import</span> <span class=\"n\">magic_factory</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@magic_factory</span><span class=\"p\">(</span><span class=\"n\">auto_call</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"mi\">16</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">threshold</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'napari.types.LabelsData'</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">threshold</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./plugins/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"id":"io-hooks","text":"IO hooks"},{"id":"analysis-hooks","text":"Analysis hooks"},{"id":"gui-hooks","text":"GUI hooks"}]}},"__N_SSG":true}