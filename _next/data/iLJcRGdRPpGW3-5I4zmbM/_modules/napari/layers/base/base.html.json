{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.layers.base.base","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span><span class=\"p\">,</span> <span class=\"n\">namedtuple</span>\n<span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">contextmanager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">...utils</span> <span class=\"kn\">import</span> <span class=\"n\">_magicgui</span> <span class=\"k\">as</span> <span class=\"n\">_mgui</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils._magicgui</span> <span class=\"kn\">import</span> <span class=\"n\">add_layer_to_viewer</span><span class=\"p\">,</span> <span class=\"n\">get_layers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.dask_utils</span> <span class=\"kn\">import</span> <span class=\"n\">configure_dask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">EmitterGroup</span><span class=\"p\">,</span> <span class=\"n\">Event</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events.event</span> <span class=\"kn\">import</span> <span class=\"n\">WarningEmitter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.geometry</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">find_front_back_face</span><span class=\"p\">,</span>\n    <span class=\"n\">intersect_line_with_axis_aligned_bounding_box_3d</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.key_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">KeymapProvider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">ROOT_DIR</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.mouse_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">MousemapProvider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.naming</span> <span class=\"kn\">import</span> <span class=\"n\">magic_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.status_messages</span> <span class=\"kn\">import</span> <span class=\"n\">generate_layer_status</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.transforms</span> <span class=\"kn\">import</span> <span class=\"n\">Affine</span><span class=\"p\">,</span> <span class=\"n\">CompositeAffine</span><span class=\"p\">,</span> <span class=\"n\">TransformChain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.._source</span> <span class=\"kn\">import</span> <span class=\"n\">current_source</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.layer_utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">coerce_affine</span><span class=\"p\">,</span>\n    <span class=\"n\">compute_multiscale_level_and_corners</span><span class=\"p\">,</span>\n    <span class=\"n\">convert_to_uint8</span><span class=\"p\">,</span>\n    <span class=\"n\">dims_displayed_world_to_layer</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.plane</span> <span class=\"kn\">import</span> <span class=\"n\">ClippingPlane</span><span class=\"p\">,</span> <span class=\"n\">ClippingPlaneList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._base_constants</span> <span class=\"kn\">import</span> <span class=\"n\">Blending</span>\n\n<span class=\"n\">Extent</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Extent'</span><span class=\"p\">,</span> <span class=\"s1\">'data world step'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">no_op</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">Layer</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Event</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A convenient no-op event for the layer mouse binding.</span>\n\n<span class=\"sd\">    This makes it easier to handle many cases by inserting this as</span>\n<span class=\"sd\">    as place holder</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    layer : Layer</span>\n<span class=\"sd\">        Current layer on which this will be bound as a callback</span>\n<span class=\"sd\">    event : Event</span>\n<span class=\"sd\">        event that triggered this mouse callback.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    None</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<div class=\"viewcode-block\" id=\"Layer\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer\">[docs]</a><span class=\"nd\">@_mgui</span><span class=\"o\">.</span><span class=\"n\">register_type</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">get_layers</span><span class=\"p\">,</span> <span class=\"n\">return_callback</span><span class=\"o\">=</span><span class=\"n\">add_layer_to_viewer</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Layer</span><span class=\"p\">(</span><span class=\"n\">KeymapProvider</span><span class=\"p\">,</span> <span class=\"n\">MousemapProvider</span><span class=\"p\">,</span> <span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base layer class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        Name of the layer.</span>\n<span class=\"sd\">    metadata : dict</span>\n<span class=\"sd\">        Layer metadata.</span>\n<span class=\"sd\">    scale : tuple of float</span>\n<span class=\"sd\">        Scale factors for the layer.</span>\n<span class=\"sd\">    translate : tuple of float</span>\n<span class=\"sd\">        Translation values for the layer.</span>\n<span class=\"sd\">    rotate : float, 3-tuple of float, or n-D array.</span>\n<span class=\"sd\">        If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">        angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">        pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">        assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">        np.degrees if needed.</span>\n<span class=\"sd\">    shear : 1-D array or n-D array</span>\n<span class=\"sd\">        Either a vector of upper triangular values, or an nD shear matrix with</span>\n<span class=\"sd\">        ones along the main diagonal.</span>\n<span class=\"sd\">    affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">        (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">        The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">        the final column is a length N translation vector and a 1 or a napari</span>\n<span class=\"sd\">        `Affine` transform object. Applied as an extra transform on top of the</span>\n<span class=\"sd\">        provided scale, rotate, and shear values.</span>\n<span class=\"sd\">    opacity : float</span>\n<span class=\"sd\">        Opacity of the layer visual, between 0.0 and 1.0.</span>\n<span class=\"sd\">    blending : str</span>\n<span class=\"sd\">        One of a list of preset blending modes that determines how RGB and</span>\n<span class=\"sd\">        alpha values of the layer visual get mixed. Allowed values are</span>\n<span class=\"sd\">        {'opaque', 'translucent', and 'additive'}.</span>\n<span class=\"sd\">    visible : bool</span>\n<span class=\"sd\">        Whether the layer visual is currently being displayed.</span>\n<span class=\"sd\">    multiscale : bool</span>\n<span class=\"sd\">        Whether the data is multiscale or not. Multiscale data is</span>\n<span class=\"sd\">        represented by a list of data objects and should go from largest to</span>\n<span class=\"sd\">        smallest.</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        Unique name of the layer.</span>\n<span class=\"sd\">    opacity : float</span>\n<span class=\"sd\">        Opacity of the layer visual, between 0.0 and 1.0.</span>\n<span class=\"sd\">    visible : bool</span>\n<span class=\"sd\">        Whether the layer visual is currently being displayed.</span>\n<span class=\"sd\">    blending : Blending</span>\n<span class=\"sd\">        Determines how RGB and alpha values get mixed.</span>\n<span class=\"sd\">            Blending.OPAQUE</span>\n<span class=\"sd\">                Allows for only the top layer to be visible and corresponds to</span>\n<span class=\"sd\">                depth_test=True, cull_face=False, blend=False.</span>\n<span class=\"sd\">            Blending.TRANSLUCENT</span>\n<span class=\"sd\">                Allows for multiple layers to be blended with different opacity</span>\n<span class=\"sd\">                and corresponds to depth_test=True, cull_face=False,</span>\n<span class=\"sd\">                blend=True, blend_func=('src_alpha', 'one_minus_src_alpha').</span>\n<span class=\"sd\">            Blending.ADDITIVE</span>\n<span class=\"sd\">                Allows for multiple layers to be blended together with</span>\n<span class=\"sd\">                different colors and opacity. Useful for creating overlays. It</span>\n<span class=\"sd\">                corresponds to depth_test=False, cull_face=False, blend=True,</span>\n<span class=\"sd\">                blend_func=('src_alpha', 'one').</span>\n<span class=\"sd\">    scale : tuple of float</span>\n<span class=\"sd\">        Scale factors for the layer.</span>\n<span class=\"sd\">    translate : tuple of float</span>\n<span class=\"sd\">        Translation values for the layer.</span>\n<span class=\"sd\">    rotate : float, 3-tuple of float, or n-D array.</span>\n<span class=\"sd\">        If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">        angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">        pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">        assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">        np.degrees if needed.</span>\n<span class=\"sd\">    shear : 1-D array or n-D array</span>\n<span class=\"sd\">        Either a vector of upper triangular values, or an nD shear matrix with</span>\n<span class=\"sd\">        ones along the main diagonal.</span>\n<span class=\"sd\">    affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">        (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">        The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">        the final column is a length N translation vector and a 1 or a napari</span>\n<span class=\"sd\">        `Affine` transform object. Applied as an extra transform on top of the</span>\n<span class=\"sd\">        provided scale, rotate, and shear values.</span>\n<span class=\"sd\">    multiscale : bool</span>\n<span class=\"sd\">        Whether the data is multiscale or not. Multiscale data is</span>\n<span class=\"sd\">        represented by a list of data objects and should go from largest to</span>\n<span class=\"sd\">        smallest.</span>\n<span class=\"sd\">    z_index : int</span>\n<span class=\"sd\">        Depth of the layer visual relative to other visuals in the scenecanvas.</span>\n<span class=\"sd\">    coordinates : tuple of float</span>\n<span class=\"sd\">        Cursor position in data coordinates.</span>\n<span class=\"sd\">    corner_pixels : array</span>\n<span class=\"sd\">        Coordinates of the top-left and bottom-right canvas pixels in the data</span>\n<span class=\"sd\">        coordinates of each layer. For multiscale data the coordinates are in</span>\n<span class=\"sd\">        the space of the currently viewed data level, not the highest resolution</span>\n<span class=\"sd\">        level.</span>\n<span class=\"sd\">    position : tuple</span>\n<span class=\"sd\">        Cursor position in world coordinates.</span>\n<span class=\"sd\">    ndim : int</span>\n<span class=\"sd\">        Dimensionality of the layer.</span>\n<span class=\"sd\">    thumbnail : (N, M, 4) array</span>\n<span class=\"sd\">        Array of thumbnail data for the layer.</span>\n<span class=\"sd\">    status : str</span>\n<span class=\"sd\">        Displayed in status bar bottom left.</span>\n<span class=\"sd\">    help : str</span>\n<span class=\"sd\">        Displayed in status bar bottom right.</span>\n<span class=\"sd\">    interactive : bool</span>\n<span class=\"sd\">        Determine if canvas pan/zoom interactivity is enabled.</span>\n<span class=\"sd\">    cursor : str</span>\n<span class=\"sd\">        String identifying which cursor displayed over canvas.</span>\n<span class=\"sd\">    cursor_size : int | None</span>\n<span class=\"sd\">        Size of cursor if custom. None yields default size</span>\n<span class=\"sd\">    scale_factor : float</span>\n<span class=\"sd\">        Conversion factor from canvas coordinates to image coordinates, which</span>\n<span class=\"sd\">        depends on the current zoom level.</span>\n\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    Must define the following:</span>\n<span class=\"sd\">        * `_extent_data`: property</span>\n<span class=\"sd\">        * `data` property (setter &amp; getter)</span>\n\n<span class=\"sd\">    May define the following:</span>\n<span class=\"sd\">        * `_set_view_slice()`: called to set currently viewed slice</span>\n<span class=\"sd\">        * `_basename()`: base/default name of the layer</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">ndim</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"s1\">'translucent'</span><span class=\"p\">,</span>\n        <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">multiscale</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">magic_name</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">path_prefix</span><span class=\"o\">=</span><span class=\"n\">ROOT_DIR</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source</span> <span class=\"o\">=</span> <span class=\"n\">current_source</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dask_optimized_slicing</span> <span class=\"o\">=</span> <span class=\"n\">configure_dask</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">metadata</span> <span class=\"ow\">or</span> <span class=\"p\">{})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_opacity</span> <span class=\"o\">=</span> <span class=\"n\">opacity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blending</span> <span class=\"o\">=</span> <span class=\"n\">Blending</span><span class=\"p\">(</span><span class=\"n\">blending</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visible</span> <span class=\"o\">=</span> <span class=\"n\">visible</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_freeze</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_status</span> <span class=\"o\">=</span> <span class=\"s1\">'Ready'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_help</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor</span> <span class=\"o\">=</span> <span class=\"s1\">'standard'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interactive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scale_factor</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span> <span class=\"o\">=</span> <span class=\"n\">multiscale</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_clipping_planes</span> <span class=\"o\">=</span> <span class=\"n\">ClippingPlaneList</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndim</span> <span class=\"o\">=</span> <span class=\"n\">ndim</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Create a transform chain consisting of four transforms:</span>\n        <span class=\"c1\"># 1. `tile2data`: An initial transform only needed to display tiles</span>\n        <span class=\"c1\">#   of an image. It maps pixels of the tile into the coordinate space</span>\n        <span class=\"c1\">#   of the full resolution data and can usually be represented by a</span>\n        <span class=\"c1\">#   scale factor and a translation. A common use case is viewing part</span>\n        <span class=\"c1\">#   of lower resolution level of a multiscale image, another is using a</span>\n        <span class=\"c1\">#   downsampled version of an image when the full image size is larger</span>\n        <span class=\"c1\">#   than the maximum allowed texture size of your graphics card.</span>\n        <span class=\"c1\"># 2. `data2physical`: The main transform mapping data to a world-like</span>\n        <span class=\"c1\">#   physical coordinate that may also encode acquisition parameters or</span>\n        <span class=\"c1\">#   sample spacing.</span>\n        <span class=\"c1\"># 3. `physical2world`: An extra transform applied in world-coordinates that</span>\n        <span class=\"c1\">#   typically aligns this layer with another.</span>\n        <span class=\"c1\"># 4. `world2grid`: An additional transform mapping world-coordinates</span>\n        <span class=\"c1\">#   into a grid for looking at layers side-by-side.</span>\n        <span class=\"k\">if</span> <span class=\"n\">scale</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">ndim</span>\n        <span class=\"k\">if</span> <span class=\"n\">translate</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">ndim</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span> <span class=\"o\">=</span> <span class=\"n\">TransformChain</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">Affine</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'tile2data'</span><span class=\"p\">),</span>\n                <span class=\"n\">CompositeAffine</span><span class=\"p\">(</span>\n                    <span class=\"n\">scale</span><span class=\"p\">,</span>\n                    <span class=\"n\">translate</span><span class=\"p\">,</span>\n                    <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"n\">rotate</span><span class=\"p\">,</span>\n                    <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"n\">shear</span><span class=\"p\">,</span>\n                    <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"n\">ndim</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'data2physical'</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">coerce_affine</span><span class=\"p\">(</span><span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'physical2world'</span><span class=\"p\">),</span>\n                <span class=\"n\">Affine</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'world2grid'</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"n\">ndim</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">ndim</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_editable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">experimental_clipping_planes</span> <span class=\"o\">=</span> <span class=\"n\">experimental_clipping_planes</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">EmitterGroup</span><span class=\"p\">(</span>\n            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">auto_connect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">set_data</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">thumbnail</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">cursor</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">cursor_size</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">loaded</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">_ndisplay</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"n\">WarningEmitter</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"'layer.events.select' is deprecated and will be removed in napari v0.4.9, use 'viewer.layers.selection.events.changed' instead, and inspect the 'added' attribute on the event.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'select'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">deselect</span><span class=\"o\">=</span><span class=\"n\">WarningEmitter</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"'layer.events.deselect' is deprecated and will be removed in napari v0.4.9, use 'viewer.layers.selection.events.changed' instead, and inspect the 'removed' attribute on the event.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'deselect'</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return self.name.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"&lt;</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\"> layer </span><span class=\"si\">{</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> at </span><span class=\"si\">{</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"s2\">&gt;\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_mode_setter_helper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">Modeclass</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Helper to manage callbacks in multiple layers</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        mode : Modeclass | str</span>\n<span class=\"sd\">            New mode for the current layer.</span>\n<span class=\"sd\">        Modeclass : Enum</span>\n<span class=\"sd\">            Enum for the current class representing the modes it can takes,</span>\n<span class=\"sd\">            this is usually specific on each subclass.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple (new Mode, mode changed)</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">Modeclass</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">mode</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span><span class=\"p\">:</span>\n            <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">Modeclass</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">Modeclass</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Mode not recognized: </span><span class=\"si\">{mode}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">old_mode</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">=</span> <span class=\"n\">mode</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">callback_list</span><span class=\"p\">,</span> <span class=\"n\">mode_dict</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mouse_drag_callbacks</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_modes</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mouse_move_callbacks</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_move_modes</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mouse_double_click_callbacks</span><span class=\"p\">,</span>\n                <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">'_double_click_modes'</span><span class=\"p\">,</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">no_op</span><span class=\"p\">)</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">mode_dict</span><span class=\"p\">[</span><span class=\"n\">old_mode</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">callback_list</span><span class=\"p\">:</span>\n                <span class=\"n\">callback_list</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">mode_dict</span><span class=\"p\">[</span><span class=\"n\">old_mode</span><span class=\"p\">])</span>\n            <span class=\"n\">callback_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mode_dict</span><span class=\"p\">[</span><span class=\"n\">mode</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor_modes</span><span class=\"p\">[</span><span class=\"n\">mode</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"n\">Modeclass</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_basename</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"str: Unique name of the layer.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_basename</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">metadata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Key/value map for user-stored data.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata</span>\n\n    <span class=\"nd\">@metadata</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">metadata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Return True if this layer is fully loaded in memory.</span>\n\n<span class=\"sd\">        This base class says that layers are permanently in the loaded state.</span>\n<span class=\"sd\">        Derived classes that do asynchronous loading can override this.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">opacity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"float: Opacity value between 0.0 and 1.0.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_opacity</span>\n\n    <span class=\"nd\">@opacity</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">opacity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"mf\">0.0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">opacity</span> <span class=\"o\">&lt;=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'opacity must be between 0.0 and 1.0; got </span><span class=\"si\">{opacity}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">opacity</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_opacity</span> <span class=\"o\">=</span> <span class=\"n\">opacity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_thumbnail</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">blending</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Blending mode: Determines how RGB and alpha values get mixed.</span>\n\n<span class=\"sd\">        Blending.OPAQUE</span>\n<span class=\"sd\">            Allows for only the top layer to be visible and corresponds to</span>\n<span class=\"sd\">            depth_test=True, cull_face=False, blend=False.</span>\n<span class=\"sd\">        Blending.TRANSLUCENT</span>\n<span class=\"sd\">            Allows for multiple layers to be blended with different opacity</span>\n<span class=\"sd\">            and corresponds to depth_test=True, cull_face=False,</span>\n<span class=\"sd\">            blend=True, blend_func=('src_alpha', 'one_minus_src_alpha').</span>\n<span class=\"sd\">        Blending.ADDITIVE</span>\n<span class=\"sd\">            Allows for multiple layers to be blended together with</span>\n<span class=\"sd\">            different colors and opacity. Useful for creating overlays. It</span>\n<span class=\"sd\">            corresponds to depth_test=False, cull_face=False, blend=True,</span>\n<span class=\"sd\">            blend_func=('src_alpha', 'one').</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blending</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@blending</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">blending</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blending</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blending</span> <span class=\"o\">=</span> <span class=\"n\">Blending</span><span class=\"p\">(</span><span class=\"n\">blending</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blending</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visible</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"bool: Whether the visual is currently being displayed.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visible</span>\n\n    <span class=\"nd\">@visible</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visible</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visible</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">editable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"bool: Whether the current layer data is editable from the viewer.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_editable</span>\n\n    <span class=\"nd\">@editable</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">editable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">editable</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_editable</span> <span class=\"o\">==</span> <span class=\"n\">editable</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_editable</span> <span class=\"o\">=</span> <span class=\"n\">editable</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">(</span><span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"n\">editable</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">editable</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"list: Anisotropy factors to scale data into world coordinates.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scale</span>\n\n    <span class=\"nd\">@scale</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"list: Factors to shift the layer by in units of world coordinates.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span>\n\n    <span class=\"nd\">@translate</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">translate</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">translate</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"array: Rotation matrix in world coordinates.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rotate</span>\n\n    <span class=\"nd\">@rotate</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rotate</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rotate</span> <span class=\"o\">=</span> <span class=\"n\">rotate</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">shear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"array: Shear matrix in world coordinates.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shear</span>\n\n    <span class=\"nd\">@shear</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">shear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'data2physical'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shear</span> <span class=\"o\">=</span> <span class=\"n\">shear</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">shear</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">affine</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"napari.utils.transforms.Affine: Extra affine transform to go from physical to world coordinates.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'physical2world'</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@affine</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">affine</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Assignment by transform name is not supported by TransformChain and</span>\n        <span class=\"c1\"># EventedList, so use the integer index instead. For more details, see:</span>\n        <span class=\"c1\"># https://github.com/napari/napari/issues/3058</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">coerce_affine</span><span class=\"p\">(</span>\n            <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'physical2world'</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">translate_grid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"list: Factors to shift the layer by.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'world2grid'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span>\n\n    <span class=\"nd\">@translate_grid</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">translate_grid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">translate_grid</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">translate_grid</span> <span class=\"o\">==</span> <span class=\"n\">translate_grid</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"s1\">'world2grid'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">translate_grid</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"tuple: Cursor position in world slice coordinates.\"\"\"</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"layer.position is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should no longer know where the cursor position is. You can get the cursor position in world coordinates from viewer.cursor.position.\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span>\n\n    <span class=\"nd\">@position</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"layer.position is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should no longer know where the cursor position is. You can get the cursor position in world coordinates from viewer.cursor.position.\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"p\">:]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">==</span> <span class=\"n\">_position</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"n\">_position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_is_moving</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_private_is_moving</span>\n\n    <span class=\"nd\">@_is_moving</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_is_moving</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_moving_coordinates</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_private_is_moving</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_dims_displayed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"To be removed displayed dimensions.\"\"\"</span>\n        <span class=\"c1\"># Ultimately we aim to remove all slicing information from the layer</span>\n        <span class=\"c1\"># itself so that layers can be sliced in different ways for multiple</span>\n        <span class=\"c1\"># canvas. See https://github.com/napari/napari/pull/1919#issuecomment-738585093</span>\n        <span class=\"c1\"># for additional discussion.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"p\">:]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_dims_not_displayed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"To be removed not displayed dimensions.\"\"\"</span>\n        <span class=\"c1\"># Ultimately we aim to remove all slicing information from the layer</span>\n        <span class=\"c1\"># itself so that layers can be sliced in different ways for multiple</span>\n        <span class=\"c1\"># canvas. See https://github.com/napari/napari/pull/1919#issuecomment-738585093</span>\n        <span class=\"c1\"># for additional discussion.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span><span class=\"p\">[:</span> <span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_dims_displayed_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"To be removed order of displayed dimensions.\"\"\"</span>\n        <span class=\"c1\"># Ultimately we aim to remove all slicing information from the layer</span>\n        <span class=\"c1\"># itself so that layers can be sliced in different ways for multiple</span>\n        <span class=\"c1\"># canvas. See https://github.com/napari/napari/pull/1919#issuecomment-738585093</span>\n        <span class=\"c1\"># for additional discussion.</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n        <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_dims</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Updates dims model, which is useful after data has been changed.\"\"\"</span>\n        <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_ndim</span><span class=\"p\">()</span>\n\n        <span class=\"n\">old_ndim</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndim</span>\n        <span class=\"k\">if</span> <span class=\"n\">old_ndim</span> <span class=\"o\">&gt;</span> <span class=\"n\">ndim</span><span class=\"p\">:</span>\n            <span class=\"n\">keep_axes</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">old_ndim</span> <span class=\"o\">-</span> <span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">old_ndim</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"o\">.</span><span class=\"n\">set_slice</span><span class=\"p\">(</span><span class=\"n\">keep_axes</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">ndim</span><span class=\"p\">:]</span>\n            <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">ndim</span><span class=\"p\">:])</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">ndim</span><span class=\"p\">:]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">old_ndim</span> <span class=\"o\">&lt;</span> <span class=\"n\">ndim</span><span class=\"p\">:</span>\n            <span class=\"n\">new_axes</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"n\">old_ndim</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"o\">.</span><span class=\"n\">expand_dims</span><span class=\"p\">(</span><span class=\"n\">new_axes</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"n\">old_ndim</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"n\">old_ndim</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n                <span class=\"n\">o</span> <span class=\"o\">+</span> <span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"n\">old_ndim</span> <span class=\"k\">for</span> <span class=\"n\">o</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span>\n            <span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"n\">old_ndim</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndim</span> <span class=\"o\">=</span> <span class=\"n\">ndim</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># user writes own docstring</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layer in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_data : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Range of layer in world coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_world : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Get full nD bounding box</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data_extent</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Range of layer in world coordinates base on provided data_extent</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_world : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">data_extent</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">full_data_extent</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">data_extent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span>\n            <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">D</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">full_world_extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span><span class=\"p\">(</span><span class=\"n\">full_data_extent</span><span class=\"p\">)</span>\n        <span class=\"n\">world_extent</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">full_world_extent</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">full_world_extent</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">world_extent</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Extent</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layer in data and world coordinates.\"\"\"</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span>\n        <span class=\"k\">return</span> <span class=\"n\">Extent</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_extent_world</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_slice_indices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"(D, ) array: Slice indices in data coordinates.\"\"\"</span>\n        <span class=\"n\">inv_transform</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span><span class=\"o\">.</span><span class=\"n\">inverse</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Subspace spanned by non displayed dimensions</span>\n            <span class=\"n\">non_displayed_subspace</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">:</span>\n                <span class=\"n\">non_displayed_subspace</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># Map subspace through inverse transform, ignoring translation</span>\n            <span class=\"n\">mapped_nd_subspace</span> <span class=\"o\">=</span> <span class=\"n\">inv_transform</span><span class=\"p\">(</span>\n                <span class=\"n\">non_displayed_subspace</span>\n            <span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">inv_transform</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Look at displayed subspace</span>\n            <span class=\"n\">displayed_mapped_subspace</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">mapped_nd_subspace</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span>\n            <span class=\"p\">]</span>\n            <span class=\"c1\"># Check that displayed subspace is null</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">displayed_mapped_subspace</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'Non-orthogonal slicing is being requested, but is not fully supported. Data is displayed without applying an out-of-slice rotation or shear component.'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">UserWarning</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"n\">slice_inv_transform</span> <span class=\"o\">=</span> <span class=\"n\">inv_transform</span><span class=\"o\">.</span><span class=\"n\">set_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"n\">world_pts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span><span class=\"p\">[</span><span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">]</span>\n        <span class=\"n\">data_pts</span> <span class=\"o\">=</span> <span class=\"n\">slice_inv_transform</span><span class=\"p\">(</span><span class=\"n\">world_pts</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">\"_round_index\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_round_index</span><span class=\"p\">:</span>\n            <span class=\"c1\"># A round is taken to convert these values to slicing integers</span>\n            <span class=\"n\">data_pts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">data_pts</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n        <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">):</span>\n            <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data_pts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_editable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">editable</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_base_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get dictionary of attributes on base layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        state : dict</span>\n<span class=\"sd\">            Dictionary of attributes on base layer.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">base_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s1\">'metadata'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n            <span class=\"s1\">'scale'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">),</span>\n            <span class=\"s1\">'translate'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">),</span>\n            <span class=\"s1\">'rotate'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">],</span>\n            <span class=\"s1\">'shear'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shear</span><span class=\"p\">),</span>\n            <span class=\"s1\">'opacity'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">,</span>\n            <span class=\"s1\">'blending'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blending</span><span class=\"p\">,</span>\n            <span class=\"s1\">'visible'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">,</span>\n            <span class=\"s1\">'experimental_clipping_planes'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"n\">plane</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">plane</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">experimental_clipping_planes</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">base_dict</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_type_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_layer_data_tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_state</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_type_string</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"array: Integer array of thumbnail for the layer\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail</span>\n\n    <span class=\"nd\">@thumbnail</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">thumbnail</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"ow\">in</span> <span class=\"n\">thumbnail</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">:</span>\n            <span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">thumbnail</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"o\">!=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">simplefilter</span><span class=\"p\">(</span><span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n                <span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">convert_to_uint8</span><span class=\"p\">(</span><span class=\"n\">thumbnail</span><span class=\"p\">)</span>\n\n        <span class=\"n\">padding_needed</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">,</span> <span class=\"n\">thumbnail</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n        <span class=\"n\">pad_amounts</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">p</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">padding_needed</span><span class=\"p\">]</span>\n        <span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pad</span><span class=\"p\">(</span><span class=\"n\">thumbnail</span><span class=\"p\">,</span> <span class=\"n\">pad_amounts</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'constant'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># blend thumbnail with opaque black background</span>\n        <span class=\"n\">background</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"n\">background</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">255</span>\n\n        <span class=\"n\">f_dest</span> <span class=\"o\">=</span> <span class=\"n\">thumbnail</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">255</span>\n        <span class=\"n\">f_source</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">f_dest</span>\n        <span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">thumbnail</span> <span class=\"o\">*</span> <span class=\"n\">f_dest</span> <span class=\"o\">+</span> <span class=\"n\">background</span> <span class=\"o\">*</span> <span class=\"n\">f_source</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">thumbnail</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">thumbnail</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"int: Number of dimensions in the data.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndim</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"bool: Whether this layer is selected or not.\"\"\"</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"'layer.selected' is deprecated and will be removed in v0.4.9. Please use `layer in viewer.layers.selection`\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">'_deprecated_layerlist'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">layers</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">selection</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@selected</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selected</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"'layer.selected' is deprecated and will be removed in v0.4.9. Please use `viewer.layers.selection.add(layer)` or `viewer.layers.selection.remove(layer)`\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">'_deprecated_layerlist'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">layers</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">selected</span><span class=\"p\">:</span>\n                <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"str: displayed in status bar bottom right.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_help</span>\n\n    <span class=\"nd\">@help</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">help</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">help</span><span class=\"o\">=</span><span class=\"n\">help</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_help</span> <span class=\"o\">=</span> <span class=\"n\">help</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interactive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"bool: Determine if canvas pan/zoom interactivity is enabled.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interactive</span>\n\n    <span class=\"nd\">@interactive</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interactive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">interactive</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">interactive</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"n\">interactive</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_interactive</span> <span class=\"o\">=</span> <span class=\"n\">interactive</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cursor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"str: String identifying cursor displayed over canvas.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor</span>\n\n    <span class=\"nd\">@cursor</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cursor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cursor</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cursor</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">=</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cursor_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"int | None: Size of cursor if custom. None yields default size.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor_size</span>\n\n    <span class=\"nd\">@cursor_size</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cursor_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cursor_size</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cursor_size</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor_size</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">cursor_size</span><span class=\"p\">(</span><span class=\"n\">cursor_size</span><span class=\"o\">=</span><span class=\"n\">cursor_size</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cursor_size</span> <span class=\"o\">=</span> <span class=\"n\">cursor_size</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">experimental_clipping_planes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_clipping_planes</span>\n\n    <span class=\"nd\">@experimental_clipping_planes</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">experimental_clipping_planes</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n            <span class=\"nb\">dict</span><span class=\"p\">,</span>\n            <span class=\"n\">ClippingPlane</span><span class=\"p\">,</span>\n            <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ClippingPlane</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]],</span>\n            <span class=\"n\">ClippingPlaneList</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_clipping_planes</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ClippingPlane</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">new_plane</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"n\">ClippingPlane</span><span class=\"p\">()</span>\n            <span class=\"n\">plane</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">new_plane</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_experimental_clipping_planes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">plane</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_view_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dask_optimized_slicing</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_view_slice</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_view_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_slice_dims</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ndisplay</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Slice data with values from a global dims model.</span>\n\n<span class=\"sd\">        Note this will likely be moved off the base layer soon.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        point : list</span>\n<span class=\"sd\">            Values of data to slice at in world coordinates.</span>\n<span class=\"sd\">        ndisplay : int</span>\n<span class=\"sd\">            Number of dimensions to be displayed.</span>\n<span class=\"sd\">        order : list of int</span>\n<span class=\"sd\">            Order of dimensions, where last `ndisplay` will be</span>\n<span class=\"sd\">            rendered in canvas.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">point</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">order</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ndim</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># adjust the order of the global dims based on the number of</span>\n        <span class=\"c1\"># dimensions that a layer has - for example a global order of</span>\n        <span class=\"c1\"># [2, 1, 0, 3] -&gt; [0, 1] for a layer that only has two dimensions</span>\n        <span class=\"c1\"># or -&gt; [1, 0, 2] for a layer with three as that corresponds to</span>\n        <span class=\"c1\"># the relative order of the last two and three dimensions</span>\n        <span class=\"c1\"># respectively</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">offset</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">offset</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">order</span> <span class=\"o\">-</span> <span class=\"n\">offset</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">[</span><span class=\"n\">order</span> <span class=\"o\">&gt;=</span> <span class=\"n\">offset</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">offset</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">point</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">ndim</span>\n            <span class=\"n\">nd</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">ndisplay</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">nd</span><span class=\"p\">:]:</span>\n                <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If no slide data has changed, then do nothing</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">order</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">ndisplay</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span>\n            <span class=\"ow\">and</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_order</span> <span class=\"o\">=</span> <span class=\"n\">order</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">!=</span> <span class=\"n\">ndisplay</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">=</span> <span class=\"n\">ndisplay</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Update the point values</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_point</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Value of the data at a position in data coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value : tuple</span>\n<span class=\"sd\">            Value of the data.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Layer.get_value\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.get_value\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_value</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">view_direction</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dims_displayed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Value of the data at a position.</span>\n\n<span class=\"sd\">        If the layer is not visible, return None.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in either data or world coordinates.</span>\n<span class=\"sd\">        view_direction : Optional[np.ndarray]</span>\n<span class=\"sd\">            A unit vector giving the direction of the ray in nD world coordinates.</span>\n<span class=\"sd\">            The default value is None.</span>\n<span class=\"sd\">        dims_displayed : Optional[List[int]]</span>\n<span class=\"sd\">            A list of the dimensions currently being displayed in the viewer.</span>\n<span class=\"sd\">            The default value is None.</span>\n<span class=\"sd\">        world : bool</span>\n<span class=\"sd\">            If True the position is taken to be in world coordinates</span>\n<span class=\"sd\">            and converted into data coordinates. False by default.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value : tuple, None</span>\n<span class=\"sd\">            Value of the data. If the layer is not visible return None.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">world</span><span class=\"p\">:</span>\n                <span class=\"n\">ndim_world</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">dims_displayed</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># convert the dims_displayed to the layer dims.This accounts</span>\n                    <span class=\"c1\"># for differences in the number of dimensions in the world</span>\n                    <span class=\"c1\"># dims versus the layer and for transpose and rolls.</span>\n                    <span class=\"n\">dims_displayed</span> <span class=\"o\">=</span> <span class=\"n\">dims_displayed_world_to_layer</span><span class=\"p\">(</span>\n                        <span class=\"n\">dims_displayed</span><span class=\"p\">,</span>\n                        <span class=\"n\">ndim_world</span><span class=\"o\">=</span><span class=\"n\">ndim_world</span><span class=\"p\">,</span>\n                        <span class=\"n\">ndim_layer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">dims_displayed</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dims_displayed</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_value</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">))</span>\n\n                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dims_displayed</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                    <span class=\"n\">view_direction</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_world_to_data_ray</span><span class=\"p\">(</span>\n                        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">view_direction</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_ray_intersections</span><span class=\"p\">(</span>\n                        <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">position</span><span class=\"p\">,</span>\n                        <span class=\"n\">view_direction</span><span class=\"o\">=</span><span class=\"n\">view_direction</span><span class=\"p\">,</span>\n                        <span class=\"n\">dims_displayed</span><span class=\"o\">=</span><span class=\"n\">dims_displayed</span><span class=\"p\">,</span>\n                        <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_value_3d</span><span class=\"p\">(</span>\n                        <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">,</span>\n                        <span class=\"n\">end_point</span><span class=\"o\">=</span><span class=\"n\">end_point</span><span class=\"p\">,</span>\n                        <span class=\"n\">dims_displayed</span><span class=\"o\">=</span><span class=\"n\">dims_displayed</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_value</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># This should be removed as soon as possible, it is still</span>\n        <span class=\"c1\"># used in Points and Shapes.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_value_3d</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">start_point</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span>\n        <span class=\"n\">end_point</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span>\n        <span class=\"n\">dims_displayed</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Get the layer data value along a ray</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        start_point : np.ndarray</span>\n<span class=\"sd\">            The start position of the ray used to interrogate the data.</span>\n<span class=\"sd\">        end_point : np.ndarray</span>\n<span class=\"sd\">            The end position of the ray used to interrogate the data.</span>\n<span class=\"sd\">        dims_displayed : List[int]</span>\n<span class=\"sd\">            The indices of the dimensions currently displayed in the Viewer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value</span>\n<span class=\"sd\">            The data value along the supplied ray.</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">block_update_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">yield</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_highlight</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Render layer highlights when appropriate.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        force : bool</span>\n<span class=\"sd\">            Bool that forces a redraw to occur when `True`.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"Layer.refresh\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.refresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Refresh all layer data based on current view slice.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_view_slice</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">set_data</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_thumbnail</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">coordinates</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Cursor position in data coordinates.\"\"\"</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"layer.coordinates is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should no longer know where the cursor position is. You can get the cursor position in world coordinates from viewer.cursor.position. You can then transform that into data coordinates using the layer.world_to_data method.\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Note we ignore the first transform which is tile2data</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Layer.world_to_data\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.world_to_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">world_to_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Convert from world coordinates to data coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple, list, 1D array</span>\n<span class=\"sd\">            Position in world coordinates. If longer then the</span>\n<span class=\"sd\">            number of dimensions of the layer, the later</span>\n<span class=\"sd\">            dimensions will be used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            Position in data coordinates.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">:</span>\n            <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"p\">:])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">simplified</span><span class=\"o\">.</span><span class=\"n\">inverse</span><span class=\"p\">(</span><span class=\"n\">coords</span><span class=\"p\">))</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_data_to_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Affine</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"The transform from data to world coordinates.</span>\n\n<span class=\"sd\">        This affine transform is composed from the affine property and the</span>\n<span class=\"sd\">        other transform properties in the following order:</span>\n\n<span class=\"sd\">        affine * (rotate * shear * scale + translate)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">simplified</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_world_to_data_ray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Convert a vector defining an orientation from world coordinates to data coordinates.</span>\n<span class=\"sd\">        For example, this would be used to convert the view ray.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        vector : tuple, list, 1D array</span>\n<span class=\"sd\">            A vector in world coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            Vector in data coordinates.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">))</span>\n        <span class=\"n\">p0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)))</span>\n        <span class=\"n\">normalized_vector</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">-</span> <span class=\"n\">p0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">-</span> <span class=\"n\">p0</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">normalized_vector</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_display_bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dims_displayed_mask</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"An axis aligned (self._ndisplay, 2) bounding box around the data\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span><span class=\"p\">[:,</span> <span class=\"n\">dims_displayed_mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<div class=\"viewcode-block\" id=\"Layer.get_ray_intersections\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.get_ray_intersections\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_ray_intersections</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span>\n        <span class=\"n\">view_direction</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span>\n        <span class=\"n\">dims_displayed</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span>\n        <span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"Get the start and end point for the ray extending</span>\n<span class=\"sd\">        from a point through the data bounding box.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position</span>\n<span class=\"sd\">            the position of the point in nD coordinates. World vs. data</span>\n<span class=\"sd\">            is set by the world keyword argument.</span>\n<span class=\"sd\">        view_direction : np.ndarray</span>\n<span class=\"sd\">            a unit vector giving the direction of the ray in nD coordinates.</span>\n<span class=\"sd\">            World vs. data is set by the world keyword argument.</span>\n<span class=\"sd\">        dims_displayed</span>\n<span class=\"sd\">            a list of the dimensions currently being displayed in the viewer.</span>\n<span class=\"sd\">        world : bool</span>\n<span class=\"sd\">            True if the provided coordinates are in world coordinates.</span>\n<span class=\"sd\">            Default value is True.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        start_point : np.ndarray</span>\n<span class=\"sd\">            The point on the axis-aligned data bounding box that the cursor click</span>\n<span class=\"sd\">            intersects with. This is the point closest to the camera.</span>\n<span class=\"sd\">            The point is the full nD coordinates of the layer data.</span>\n<span class=\"sd\">            If the click does not intersect the axis-aligned data bounding box,</span>\n<span class=\"sd\">            None is returned.</span>\n<span class=\"sd\">        end_point : np.ndarray</span>\n<span class=\"sd\">            The point on the axis-aligned data bounding box that the cursor click</span>\n<span class=\"sd\">            intersects with. This is the point farthest from the camera.</span>\n<span class=\"sd\">            The point is the full nD coordinates of the layer data.</span>\n<span class=\"sd\">            If the click does not intersect the axis-aligned data bounding box,</span>\n<span class=\"sd\">            None is returned.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dims_displayed</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"c1\"># create a mask to select the in view dimensions</span>\n            <span class=\"n\">dims_displayed</span> <span class=\"o\">=</span> <span class=\"n\">dims_displayed</span>\n            <span class=\"n\">dims_displayed_mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">)</span>\n            <span class=\"n\">dims_displayed_mask</span><span class=\"p\">[</span><span class=\"n\">dims_displayed</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"c1\"># create the bounding box in data coordinates</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_display_bounding_box</span><span class=\"p\">(</span><span class=\"n\">dims_displayed_mask</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># get the view direction in data coords (only displayed dims)</span>\n            <span class=\"k\">if</span> <span class=\"n\">world</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"n\">view_dir</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_world_to_data_ray</span><span class=\"p\">(</span><span class=\"n\">view_direction</span><span class=\"p\">))[</span>\n                    <span class=\"n\">dims_displayed_mask</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">view_dir</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">view_direction</span><span class=\"p\">)[</span><span class=\"n\">dims_displayed_mask</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># Get the clicked point in data coords (only displayed dims)</span>\n            <span class=\"k\">if</span> <span class=\"n\">world</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"n\">click_pos_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">))[</span>\n                    <span class=\"n\">dims_displayed_mask</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">click_pos_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)[</span><span class=\"n\">dims_displayed_mask</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># Determine the front and back faces</span>\n            <span class=\"n\">front_face_normal</span><span class=\"p\">,</span> <span class=\"n\">back_face_normal</span> <span class=\"o\">=</span> <span class=\"n\">find_front_back_face</span><span class=\"p\">(</span>\n                <span class=\"n\">click_pos_data</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">view_dir</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Get the locations in the plane where the ray intersects</span>\n            <span class=\"k\">if</span> <span class=\"n\">front_face_normal</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">back_face_normal</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point_disp_dims</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">intersect_line_with_axis_aligned_bounding_box_3d</span><span class=\"p\">(</span>\n                        <span class=\"n\">click_pos_data</span><span class=\"p\">,</span> <span class=\"n\">view_dir</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">front_face_normal</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">end_point_disp_dims</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">intersect_line_with_axis_aligned_bounding_box_3d</span><span class=\"p\">(</span>\n                        <span class=\"n\">click_pos_data</span><span class=\"p\">,</span> <span class=\"n\">view_dir</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">back_face_normal</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"c1\"># add the coordinates for the axes not displayed</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">start_point</span><span class=\"p\">[</span><span class=\"n\">dims_displayed_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">start_point_disp_dims</span>\n                <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">end_point</span><span class=\"p\">[</span><span class=\"n\">dims_displayed_mask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">end_point_disp_dims</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># if the click doesn't intersect the data bounding box,</span>\n                <span class=\"c1\"># return None</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"n\">end_point</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_displayed_axes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">displayed_axes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed_order</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">displayed_axes</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_corner_pixels_displayed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">displayed_axes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_axes</span>\n        <span class=\"n\">corner_pixels_displayed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span><span class=\"p\">[:,</span> <span class=\"n\">displayed_axes</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">corner_pixels_displayed</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_draw</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"p\">,</span> <span class=\"n\">corner_pixels_displayed</span><span class=\"p\">,</span> <span class=\"n\">shape_threshold</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update canvas scale and corner values on draw.</span>\n\n<span class=\"sd\">        For layer multiscale determining if a new resolution level or tile is</span>\n<span class=\"sd\">        required.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        scale_factor : float</span>\n<span class=\"sd\">            Scale factor going from canvas to world coordinates.</span>\n<span class=\"sd\">        corner_pixels_displayed : array, shape (2, 2)</span>\n<span class=\"sd\">            Coordinates of the top-left and bottom-right canvas pixels in</span>\n<span class=\"sd\">            world coordinates.</span>\n<span class=\"sd\">        shape_threshold : tuple</span>\n<span class=\"sd\">            Requested shape of field of view in data coordinates.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scale_factor</span> <span class=\"o\">=</span> <span class=\"n\">scale_factor</span>\n\n        <span class=\"n\">displayed_axes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_axes</span>\n        <span class=\"c1\"># we need to compute all four corners to compute a complete,</span>\n        <span class=\"c1\"># data-aligned bounding box, because top-left/bottom-right may not</span>\n        <span class=\"c1\"># remain top-left and bottom-right after transformations.</span>\n        <span class=\"n\">all_corners</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">corner_pixels_displayed</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Note that we ignore the first transform which is tile2data</span>\n        <span class=\"n\">data_corners</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_transforms</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n            <span class=\"o\">.</span><span class=\"n\">simplified</span><span class=\"o\">.</span><span class=\"n\">set_slice</span><span class=\"p\">(</span><span class=\"n\">displayed_axes</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">inverse</span><span class=\"p\">(</span><span class=\"n\">all_corners</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># find the maximal data-axis-aligned bounding box containing all four</span>\n        <span class=\"c1\"># canvas corners</span>\n        <span class=\"n\">data_bbox</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">data_corners</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">data_corners</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># round and clip the bounding box values</span>\n        <span class=\"n\">data_bbox_int</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">data_bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">data_bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"n\">displayed_extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"n\">displayed_axes</span><span class=\"p\">]</span>\n        <span class=\"n\">data_bbox_clipped</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n            <span class=\"n\">data_bbox_int</span><span class=\"p\">,</span> <span class=\"n\">displayed_extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">displayed_extent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiscale</span><span class=\"p\">:</span>\n            <span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">scaled_corners</span> <span class=\"o\">=</span> <span class=\"n\">compute_multiscale_level_and_corners</span><span class=\"p\">(</span>\n                <span class=\"n\">data_bbox_clipped</span><span class=\"p\">,</span>\n                <span class=\"n\">shape_threshold</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downsample_factors</span><span class=\"p\">[:,</span> <span class=\"n\">displayed_axes</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">corners</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">))</span>\n            <span class=\"n\">corners</span><span class=\"p\">[:,</span> <span class=\"n\">displayed_axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">scaled_corners</span>\n            <span class=\"n\">corners</span> <span class=\"o\">=</span> <span class=\"n\">corners</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_level</span> <span class=\"o\">!=</span> <span class=\"n\">level</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span> <span class=\"o\">==</span> <span class=\"n\">corners</span>\n            <span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_level</span> <span class=\"o\">=</span> <span class=\"n\">level</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span> <span class=\"o\">=</span> <span class=\"n\">corners</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">corner_pixels</span> <span class=\"o\">=</span> <span class=\"n\">data_bbox_clipped</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">displayed_coordinates</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"list: List of currently displayed coordinates.</span>\n\n<span class=\"sd\">        displayed_coordinates is deprecated and will be removed in version 0.4.9.</span>\n<span class=\"sd\">        It should no longer be used as layers should will soon not know</span>\n<span class=\"sd\">        which dimensions are displayed. Instead you should use</span>\n<span class=\"sd\">        `[layer.coordinates[d] for d in viewer.dims.displayed]</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"displayed_coordinates is deprecated and will be removed in version 0.4.9. It should no longer be used as layers should will soon not know which dimensions are displayed. Instead you should use [layer.coordinates[d] for d in viewer.dims.displayed]\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">coordinates</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">world_to_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">coordinates</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"Layer.get_status\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.get_status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_status</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">view_direction</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dims_displayed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Status message of the data at a coordinate position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in either data or world coordinates.</span>\n<span class=\"sd\">        view_direction : Optional[np.ndarray]</span>\n<span class=\"sd\">            A unit vector giving the direction of the ray in nD world coordinates.</span>\n<span class=\"sd\">            The default value is None.</span>\n<span class=\"sd\">        dims_displayed : Optional[List[int]]</span>\n<span class=\"sd\">            A list of the dimensions currently being displayed in the viewer.</span>\n<span class=\"sd\">            The default value is None.</span>\n<span class=\"sd\">        world : bool</span>\n<span class=\"sd\">            If True the position is taken to be in world coordinates</span>\n<span class=\"sd\">            and converted into data coordinates. False by default.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        msg : string</span>\n<span class=\"sd\">            String containing a message that can be used as a status update.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span>\n            <span class=\"n\">position</span><span class=\"p\">,</span>\n            <span class=\"n\">view_direction</span><span class=\"o\">=</span><span class=\"n\">view_direction</span><span class=\"p\">,</span>\n            <span class=\"n\">dims_displayed</span><span class=\"o\">=</span><span class=\"n\">dims_displayed</span><span class=\"p\">,</span>\n            <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"n\">world</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">generate_layer_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_tooltip_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        tooltip message of the data at a coordinate position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in either data or world coordinates.</span>\n<span class=\"sd\">        world : bool</span>\n<span class=\"sd\">            If True the position is taken to be in world coordinates</span>\n<span class=\"sd\">            and converted into data coordinates. False by default.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        msg : string</span>\n<span class=\"sd\">            String containing a message that can be used as a tooltip.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n\n<div class=\"viewcode-block\" id=\"Layer.save\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Save this layer to ``path`` with default (or specified) plugin.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path : str</span>\n<span class=\"sd\">            A filepath, directory, or URL to open.  Extensions may be used to</span>\n<span class=\"sd\">            specify output format (provided a plugin is available for the</span>\n<span class=\"sd\">            requested format).</span>\n<span class=\"sd\">        plugin : str, optional</span>\n<span class=\"sd\">            Name of the plugin to use for saving. If ``None`` then all plugins</span>\n<span class=\"sd\">            corresponding to appropriate hook specification will be looped</span>\n<span class=\"sd\">            through to find the first one that can save the data.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            File paths of any files that were written.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">...plugins.io</span> <span class=\"kn\">import</span> <span class=\"n\">save_layers</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">save_layers</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">],</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_selection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This method is a temporary workaround to the fact that the Points</span>\n        <span class=\"c1\"># layer needs to know when its selection state changes so that it can</span>\n        <span class=\"c1\"># update the highlight state.  This, along with the events.select and</span>\n        <span class=\"c1\"># events.deselect emitters, (and the LayerList._on_selection_event</span>\n        <span class=\"c1\"># method) can be removed once highlighting logic has been removed from</span>\n        <span class=\"c1\"># the layer model.</span>\n        <span class=\"k\">if</span> <span class=\"n\">selected</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">deselect</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Layer.create\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Layer.html#napari.layers.Layer.create\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Layer</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Create layer from `data` of type `layer_type`.</span>\n\n<span class=\"sd\">        Primarily intended for usage by reader plugin hooks and creating a</span>\n<span class=\"sd\">        layer from an unwrapped layer data tuple.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : Any</span>\n<span class=\"sd\">            Data in a format that is valid for the corresponding `layer_type`.</span>\n<span class=\"sd\">        meta : dict, optional</span>\n<span class=\"sd\">            Dict of keyword arguments that will be passed to the corresponding</span>\n<span class=\"sd\">            layer constructor.  If any keys in `meta` are not valid for the</span>\n<span class=\"sd\">            corresponding layer type, an exception will be raised.</span>\n<span class=\"sd\">        layer_type : str</span>\n<span class=\"sd\">            Type of layer to add. Must be the (case insensitive) name of a</span>\n<span class=\"sd\">            Layer subclass.  If not provided, the layer is assumed to</span>\n<span class=\"sd\">            be \"image\", unless data.dtype is one of (np.int32, np.uint32,</span>\n<span class=\"sd\">            np.int64, np.uint64), in which case it is assumed to be \"labels\".</span>\n\n<span class=\"sd\">        Raises</span>\n<span class=\"sd\">        ------</span>\n<span class=\"sd\">        ValueError</span>\n<span class=\"sd\">            If ``layer_type`` is not one of the recognized layer types.</span>\n<span class=\"sd\">        TypeError</span>\n<span class=\"sd\">            If any keyword arguments in ``meta`` are unexpected for the</span>\n<span class=\"sd\">            corresponding `add_*` method for this layer_type.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        A typical use case might be to upack a tuple of layer data with a</span>\n<span class=\"sd\">        specified layer_type.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; data = (</span>\n<span class=\"sd\">        ...     np.random.random((10, 2)) * 20,</span>\n<span class=\"sd\">        ...     {'face_color': 'blue'},</span>\n<span class=\"sd\">        ...     'points',</span>\n<span class=\"sd\">        ... )</span>\n<span class=\"sd\">        &gt;&gt;&gt; Layer.create(*data)</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">...</span> <span class=\"kn\">import</span> <span class=\"n\">layers</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..image._image_utils</span> <span class=\"kn\">import</span> <span class=\"n\">guess_labels</span>\n\n        <span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">layer_type</span> <span class=\"ow\">or</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># assumes that big integer type arrays are likely labels.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span>\n            <span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"n\">guess_labels</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"Unrecognized layer_type: '</span><span class=\"si\">{</span><span class=\"n\">layer_type</span><span class=\"si\">}</span><span class=\"s2\">'. \"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"Must be one of: </span><span class=\"si\">{</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"si\">}</span><span class=\"s2\">.\"</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">Cls</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">())</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Cls</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">meta</span> <span class=\"ow\">or</span> <span class=\"p\">{}))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s1\">'unexpected keyword argument'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n\n            <span class=\"n\">bad_key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'keyword argument '</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"_add_layer_from_data received an unexpected keyword \"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"argument (</span><span class=\"si\">{</span><span class=\"n\">bad_key</span><span class=\"si\">}</span><span class=\"s2\">) for layer type </span><span class=\"si\">{</span><span class=\"n\">layer_type</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">exc</span></div></div>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}