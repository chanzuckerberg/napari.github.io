{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Multithreading in napari","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"multithreading-in-napari\">\n<span id=\"id1\"></span>\n<p>As described in <a class=\"reference internal\" href=\"event_loop.html#intro-to-event-loop\"><span class=\"std std-ref\">An Introduction to the Event Loop in napari</span></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>, like most GUI\napplications, runs in an event loop that is continually receiving and\nresponding to events like button presses and mouse events.  This works fine\nuntil one of the events takes a very long time to process.  A long-running\nfunction (such as training a machine learning model or running a complicated\nanalysis routine) may “block” the event loop in the main thread, leading to a\ncompletely unresponsive viewer.  The example used there was:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"c1\"># everything is fine so far... but if we trigger a long computation</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"c1\"># the entire interface freezes!</span>\n</pre></div>\n</div>\n<p>In order to avoid freezing the viewer during a long-running blocking function,\nyou must run your function in another thread or process.</p>\n<div class=\"section\" id=\"processes-threads-and-asyncio\">\n<h2>Processes, Threads, and <code class=\"docutils literal notranslate\"><span class=\"pre\">asyncio</span></code><a class=\"headerlink\" href=\"#processes-threads-and-asyncio\" title=\"Permalink to this headline\">¶</a></h2>\n<p>There are multiple ways to achieve “concurrency” (multiple things happening at\nthe same time) in python, each with their own advantages and disadvantages.\nIt’s a rich, complicated topic, and a full treatment is well beyond the scope\nof this document, but strategies generally fall into one of three camps:</p>\n<ol class=\"simple\">\n<li><p>Multithreading</p></li>\n<li><p>Multprocessing</p></li>\n<li><p>Single-thread concurrency with\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"noreferrer\">asyncio</a></p></li>\n</ol>\n<p>For a good high level overview on concurrency in python, see\n<a class=\"reference external\" href=\"https://realpython.com/python-concurrency/\" target=\"_blank\" rel=\"noreferrer\">this post</a>.\nSee the\n<a class=\"reference external\" href=\"https://trio.readthedocs.io/en/stable/tutorial.html\" target=\"_blank\" rel=\"noreferrer\">trio docs</a>\nfor a good introduction to Python’s new <code class=\"docutils literal notranslate\"><span class=\"pre\">async/await</span></code> syntax.\nAnd of course, see the python docs on\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/threading.html\" target=\"_blank\" rel=\"noreferrer\">threading</a>,\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/multiprocessing.html\" target=\"_blank\" rel=\"noreferrer\">multiprocessing</a>,\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/concurrent.futures.html\" target=\"_blank\" rel=\"noreferrer\">concurrent.futures</a>,\nand <a class=\"reference external\" href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"noreferrer\">asyncio</a>.</p>\n<p>If you already have experience with any of these methods, you should be able to\nimmediately leverage them in napari.  <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> also provides a few\nconvenience functions that allow you to easily run your long-running\nmethods in another thread.</p>\n</div>\n<div class=\"section\" id=\"threading-in-napari-with-thread-worker\">\n<h2>Threading in napari with <code class=\"docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code><a class=\"headerlink\" href=\"#threading-in-napari-with-thread-worker\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The simplest way to run a function in another thread in napari is to decorate\nyour function with the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator.\nContinuing with the example above:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"hll\"><span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">thread_worker</span>\n</span>\n\n<span class=\"hll\"><span class=\"nd\">@thread_worker</span>\n</span><span class=\"k\">def</span> <span class=\"nf\">average_large_image</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">average_large_image</span><span class=\"p\">()</span>  <span class=\"c1\"># create \"worker\" object</span>\n<span class=\"hll\"><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">returned</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">)</span>  <span class=\"c1\"># connect callback functions</span>\n</span><span class=\"hll\"><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>  <span class=\"c1\"># start the thread!</span>\n</span><span class=\"hll\"><span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</span></pre></div>\n</div>\n<p>The <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator\nconverts your function into one that returns a\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a> instance. The <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code>\nmanages the work being done by your function in another thread.  It also\nexposes a few “signals” that let you respond to events happening in the other\nthread.  Here, we connect the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker.returned</span></code> signal to the\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">viewer.add_image</span></code>\nfunction, which has the effect of adding the result to the viewer when it is\nready. Lastly, we start the worker with\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\" title=\"napari.qt.threading.WorkerBase.start\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start()</span></code></a> because workers do not\nstart themselves by default.</p>\n<p>The <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator also\naccepts keyword arguments like <code class=\"docutils literal notranslate\"><span class=\"pre\">connect</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">start_thread</span></code>, which may\nenable more concise syntax. The example below is equivalent to lines 7-15 in\nthe above example:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@thread_worker</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"returned\"</span><span class=\"p\">:</span> <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">average_large_image</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">average_large_image</span><span class=\"p\">()</span>\n<span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>When the <code class=\"docutils literal notranslate\"><span class=\"pre\">connect</span></code> argument to\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code>\nis not <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the thread will start\nby default when the decorated function is called.  Otherwise the thread must\nbe manually started by calling\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\" title=\"napari.qt.threading.WorkerBase.start\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.start()</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"responding-to-feedback-from-threads\">\n<h2>Responding to Feedback from Threads<a class=\"headerlink\" href=\"#responding-to-feedback-from-threads\" title=\"Permalink to this headline\">¶</a></h2>\n<p>As shown above, the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code> object returned by a function decorated with\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> has a number of\nsignals that are emitted in response to certain events.  The base signals\nprovided by the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code> are:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">started</span></code> - emitted when the work is started</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">finished</span></code> - emitted when the work is finished</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">returned</span></code> [<em>value</em>] - emitted with return value when the function returns</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">errored</span></code> [<em>exception</em>] - emitted with an <code class=\"docutils literal notranslate\"><span class=\"pre\">Exception</span></code> object if an\nexception is raised in the thread.</p></li>\n</ul>\n<div class=\"section\" id=\"example-custom-exception-handler\">\n<h3>Example: Custom Exception Handler<a class=\"headerlink\" href=\"#example-custom-exception-handler\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Because debugging issues in multithreaded applications can be tricky, the\ndefault behavior of a <code class=\"docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> - decorated function is to re-raise\nany exceptions in the main thread.  But just as we connected the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">worker.returned</span></code> event above to the <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.add_image</span></code> method, you can\nalso connect your own custom handler to the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker.errored</span></code> event:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"We had a minor problem </span><span class=\"si\">{</span><span class=\"n\">exc</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n\n<span class=\"nd\">@thread_worker</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"errored\"</span><span class=\"p\">:</span> <span class=\"n\">my_handler</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">error_prone_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"generators-for-the-win\">\n<h2>Generators for the Win!<a class=\"headerlink\" href=\"#generators-for-the-win\" title=\"Permalink to this headline\">¶</a></h2>\n<div class=\"admonition-quick-reminder admonition\">\n<p class=\"admonition-title\">quick reminder</p>\n<p>A generator function is a\n<a class=\"reference external\" href=\"https://realpython.com/introduction-to-python-generators/\" target=\"_blank\" rel=\"noreferrer\">special kind of function</a>\nthat returns a lazy iterator. To make a generator, you “yield”\nresults rather than (or in addition to) “returning” them:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_generator</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</pre></div>\n</div>\n</div>\n<p><strong>Use a generator!</strong> By writing our decorated function as a generator that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">yields</span></code> results instead of a function that <code class=\"docutils literal notranslate\"><span class=\"pre\">returns</span></code> a single result at\nthe end, we gain a number of valuable features, and a few extra signals and\nmethods on the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code>.</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">yielded</span></code> [<em>value</em>]- emitted with a value when a value is yielded</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">paused</span></code> - emitted when a running job has successfully paused</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">resumed</span></code>  - emitted when a paused job has successfully resumed</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">aborted</span></code> - emitted when a running job is successfully aborted</p></li>\n</ul>\n<p>Additionally, generator <code class=\"docutils literal notranslate\"><span class=\"pre\">workers</span></code> will also have a few additional methods:</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">send</span></code> - send a value <em>into</em> the thread (see below)</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">pause</span></code> - send a request to pause a running worker</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">resume</span></code> - send a request to resume a paused worker</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">toggle_pause</span></code> - send a request to toggle the running state of the worker</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">quit</span></code> - send a request to abort the worker</p></li>\n</ul>\n<div class=\"section\" id=\"retrieving-intermediate-results\">\n<h3>Retrieving Intermediate Results<a class=\"headerlink\" href=\"#retrieving-intermediate-results\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The most obvious benefit of using a generator is that you can monitor\nintermediate results back in the main thread.  Continuing with our example of\ntaking the mean projection of a large stack, if we yield the cumulative average\nas it is generated (rather than taking the average of the fully generated\nstack) we can watch the mean projection as it builds:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">thread_worker</span>\n\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">update_layer</span><span class=\"p\">(</span><span class=\"n\">new_image</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if the layer exists, update the data</span>\n        <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s1\">'result'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">new_image</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># otherwise add it to the viewer</span>\n        <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span>\n            <span class=\"n\">new_image</span><span class=\"p\">,</span> <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.45</span><span class=\"p\">,</span> <span class=\"mf\">0.55</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'result'</span>\n        <span class=\"p\">)</span>\n\n<span class=\"nd\">@thread_worker</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'yielded'</span><span class=\"p\">:</span> <span class=\"n\">update_layer</span><span class=\"p\">})</span>\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">large_random_images</span><span class=\"p\">():</span>\n</span>    <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">):</span>\n        <span class=\"n\">cumsum</span> <span class=\"o\">+=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">16</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">cumsum</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"hll\">\n</span><span class=\"n\">large_random_images</span><span class=\"p\">()</span>  <span class=\"c1\"># call the function!</span>\n<span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note how we periodically (every 16 iterations) <code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code> the image result in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">large_random_images</span></code> function.  We also connected the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">yielded</span></code> event in the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code>\ndecorator to the previously-defined <code class=\"docutils literal notranslate\"><span class=\"pre\">update_layer</span></code> function.  The result is\nthat the image in the viewer is updated every time a new image is yielded.</p>\n<p>Any time you can break up a long-running function into a stream of\nshorter-running yield statements like this, you not only benefit from the\nincreased responsiveness in the viewer, you can often save on precious memory\nresources.</p>\n<div class=\"section\" id=\"flow-control-and-escape-hatches\">\n<h4>Flow Control and Escape Hatches<a class=\"headerlink\" href=\"#flow-control-and-escape-hatches\" title=\"Permalink to this headline\">¶</a></h4>\n<p>A perhaps even more useful aspect of yielding periodically in our long running\nfunction is that we provide a “hook” for the main thread to control the flow of\nour long running function.  When you use the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator on a\ngenerator function, the ability to stop, start, and quit a thread comes for\nfree.  In the example below we decorate what would normally be an infinitely\nyielding generator, but add a button that aborts the worker when clicked:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">thread_worker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"n\">QPushButton</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">update_layer</span><span class=\"p\">(</span><span class=\"n\">new_image</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s1\">'result'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">new_image</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span>\n            <span class=\"n\">new_image</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'result'</span><span class=\"p\">,</span> <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n<span class=\"nd\">@thread_worker</span>\n<span class=\"k\">def</span> <span class=\"nf\">yield_random_images_forever</span><span class=\"p\">():</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>  <span class=\"c1\"># infinite loop!</span>\n<span class=\"hll\">        <span class=\"k\">yield</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</span>        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">yield_random_images_forever</span><span class=\"p\">()</span>\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">update_layer</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add a button to the viewer that, when clicked, stops the worker</span>\n<span class=\"n\">button</span> <span class=\"o\">=</span> <span class=\"n\">QPushButton</span><span class=\"p\">(</span><span class=\"s2\">\"STOP!\"</span><span class=\"p\">)</span>\n<span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n<span class=\"hll\"><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">)</span>\n</span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">button</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"graceful-exit\">\n<h4>Graceful Exit<a class=\"headerlink\" href=\"#graceful-exit\" title=\"Permalink to this headline\">¶</a></h4>\n<p>A side-effect of this added flow control is that <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> can gracefully\nshutdown any still-running workers when you try to quit the program.  Try the\nexample above, but quit the program <em>without</em> pressing the “STOP” button.  No\nproblem!  <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> asks the thread to stop itself the next time it yields,\nand then closes without leaving any orphaned threads.</p>\n<p>Now go back to the first example with the pure (non-generator) function, and\ntry quitting before the function has returned (i.e. before the image appears).\nYou’ll notice that it takes a while to quit: it has to wait for the background\nthread to finish because there is no good way to communicate the request that\nit quit!  If you had a <em>very</em> long function, you’d be left with no choice but\nto force quit your program.</p>\n<p>So whenever possible, sprinkle your long-running functions with <code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"full-two-way-communication\">\n<h2>Full Two-way Communication<a class=\"headerlink\" href=\"#full-two-way-communication\" title=\"Permalink to this headline\">¶</a></h2>\n<p>So far we’ve mostly been <em>receiving</em> results from the threaded function, but we\ncan send values <em>into</em> a generator-based thread as well using\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.send\" title=\"napari.qt.threading.GeneratorWorker.send\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.send()</span></code></a> This works\nexactly like a standard python\n<a class=\"reference external\" href=\"https://docs.python.org/3/reference/expressions.html#generator.send\" target=\"_blank\" rel=\"noreferrer\">generator.send</a>\npattern.  This next example ties together a number of concepts and demonstrates\ntwo-thread communication with conditional flow control.  It’s a simple\ncumulative multiplier that runs in another thread, and exits if the product\nhits “0”:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">thread_worker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"n\">QLineEdit</span><span class=\"p\">,</span> <span class=\"n\">QLabel</span><span class=\"p\">,</span> <span class=\"n\">QWidget</span><span class=\"p\">,</span> <span class=\"n\">QVBoxLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtGui</span> <span class=\"kn\">import</span> <span class=\"n\">QDoubleValidator</span>\n\n\n<span class=\"hll\"><span class=\"nd\">@thread_worker</span>\n</span><span class=\"k\">def</span> <span class=\"nf\">multiplier</span><span class=\"p\">():</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"hll\">        <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">total</span>\n</span><span class=\"hll\">        <span class=\"n\">total</span> <span class=\"o\">*=</span> <span class=\"n\">new</span> <span class=\"k\">if</span> <span class=\"n\">new</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</span><span class=\"hll\">        <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n</span>            <span class=\"k\">return</span> <span class=\"s2\">\"Game Over!\"</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># make a widget to control the worker</span>\n<span class=\"c1\"># (not the main point of this example...)</span>\n<span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">QWidget</span><span class=\"p\">()</span>\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">QVBoxLayout</span><span class=\"p\">()</span>\n<span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">setLayout</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span>\n<span class=\"n\">result_label</span> <span class=\"o\">=</span> <span class=\"n\">QLabel</span><span class=\"p\">()</span>\n<span class=\"n\">line_edit</span> <span class=\"o\">=</span> <span class=\"n\">QLineEdit</span><span class=\"p\">()</span>\n<span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">setValidator</span><span class=\"p\">(</span><span class=\"n\">QDoubleValidator</span><span class=\"p\">())</span>\n<span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"n\">line_edit</span><span class=\"p\">)</span>\n<span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"n\">result_label</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the worker</span>\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">multiplier</span><span class=\"p\">()</span>\n<span class=\"hll\">\n</span><span class=\"c1\"># define some callbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_yielded</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">pause</span><span class=\"p\">()</span>\n<span class=\"hll\">    <span class=\"n\">result_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n</span>    <span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_return</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">setEnabled</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">result_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_next_value</span><span class=\"p\">():</span>\n    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()))</span>\n<span class=\"hll\">    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">resume</span><span class=\"p\">()</span>\n</span><span class=\"hll\">\n</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">on_yielded</span><span class=\"p\">)</span>\n<span class=\"hll\"><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">returned</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">on_return</span><span class=\"p\">)</span>\n</span><span class=\"hll\"><span class=\"n\">line_edit</span><span class=\"o\">.</span><span class=\"n\">returnPressed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">send_next_value</span><span class=\"p\">)</span>\n</span>\n<span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Let’s break it down:</p>\n<ol class=\"simple\">\n<li><p>As usual, we decorate our generator function with\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> and instantiate\nit to create a <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code>.</p></li>\n<li><p>The most interesting line in this example is where we both\n<code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code> the current <code class=\"docutils literal notranslate\"><span class=\"pre\">total</span></code> to the main thread (<code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span> <span class=\"pre\">total</span></code>), <em>and</em>\nreceive a new value from the main thread (with <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span> <span class=\"pre\">=</span> <span class=\"pre\">yield</span></code>).</p></li>\n<li><p>In the main thread, we have connected that <code class=\"docutils literal notranslate\"><span class=\"pre\">worker.yielded</span></code> event\nto a callback that pauses the worker and updates the <code class=\"docutils literal notranslate\"><span class=\"pre\">result_label</span></code>\nwidget.</p></li>\n<li><p>The thread will then wait indefinitely for the <code class=\"docutils literal notranslate\"><span class=\"pre\">resume()</span></code> command,\nwhich we have connected to the <code class=\"docutils literal notranslate\"><span class=\"pre\">line_edit.returnPressed</span></code> signal.</p></li>\n<li><p>However, before that <code class=\"docutils literal notranslate\"><span class=\"pre\">resume()</span></code> command gets sent, we use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">worker.send()</span></code> to send the current value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">line_edit</span></code> widget\ninto the thread for multiplication by the existing total.</p></li>\n<li><p>Lastly, if the thread total ever goes to “0”, we stop the thread by\nreturning the string <code class=\"docutils literal notranslate\"><span class=\"pre\">\"Game</span> <span class=\"pre\">Over\"</span></code>.  In the main thread, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">worker.returned</span></code> event is connected to a callback that disables the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">line_edit</span></code> widget and shows the string returned from the thread.</p></li>\n</ol>\n<p>This example is a bit contrived, since there’s little need to put such a basic\ncomputation in another thread.  But it demonstrates some of the power and\nfeatures provided when decorating a generator function with the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator.</p>\n</div>\n<div class=\"section\" id=\"syntactic-sugar\">\n<h2>Syntactic Sugar<a class=\"headerlink\" href=\"#syntactic-sugar\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> decorator is\njust syntactic sugar for calling <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.html#napari.qt.threading.create_worker\" title=\"napari.qt.threading.create_worker\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">create_worker()</span></code></a> on\nyour function.  In turn, <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.html#napari.qt.threading.create_worker\" title=\"napari.qt.threading.create_worker\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">create_worker()</span></code></a> is just a\nconvenient “factory function” that creates the right subtype of <code class=\"docutils literal notranslate\"><span class=\"pre\">Worker</span></code>\ndepending on your function type. The following three examples are equivalent:</p>\n<p><strong>Using the</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">@thread_worker</span></code> <strong>decorator:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">thread_worker</span>\n\n<span class=\"nd\">@thread_worker</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">my_function</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Using the</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">create_worker</span></code> <strong>function:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">create_worker</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">create_worker</span><span class=\"p\">(</span><span class=\"n\">my_function</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Using a</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">Worker</span></code> <strong>class:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionWorker</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">FunctionWorker</span><span class=\"p\">(</span><span class=\"n\">my_function</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(the main difference between using <code class=\"docutils literal notranslate\"><span class=\"pre\">create_worker</span></code> and directly instantiating\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">FunctionWorker</span></code> class is that <code class=\"docutils literal notranslate\"><span class=\"pre\">create_worker</span></code> will automatically\ndispatch the appropriate type of <code class=\"docutils literal notranslate\"><span class=\"pre\">Worker</span></code> class depending on whether the\nfunction is a generator or not).</p>\n</div>\n<div class=\"section\" id=\"using-a-custom-worker-class\">\n<h2>Using a Custom Worker Class<a class=\"headerlink\" href=\"#using-a-custom-worker-class\" title=\"Permalink to this headline\">¶</a></h2>\n<p>If you need even more control over the worker – such as the ability to define\ncustom methods or signals that the worker can emit, then you can subclass the\nnapari <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a> class.  When doing so, please\nkeep in mind the following guidelines:</p>\n<ol>\n<li><p>The subclass must either implement the\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.work\" title=\"napari.qt.threading.WorkerBase.work\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">work()</span></code></a> method (preferred), or in\nextreme cases, may directly reimplement the\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.run\" title=\"napari.qt.threading.WorkerBase.run\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">run()</span></code></a> method.  (When a worker “start”\nis started with <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\" title=\"napari.qt.threading.WorkerBase.start\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start()</span></code></a>, the call\norder is always\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\" title=\"napari.qt.threading.WorkerBase.start\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.start()</span></code></a> →\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.run\" title=\"napari.qt.threading.WorkerBase.run\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.run()</span></code></a> →\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.work\" title=\"napari.qt.threading.WorkerBase.work\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.work()</span></code></a>.</p></li>\n<li><p>When implementing the <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.work\" title=\"napari.qt.threading.WorkerBase.work\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">work()</span></code></a> method,\nit is important that you periodically check <code class=\"docutils literal notranslate\"><span class=\"pre\">self.abort_requested</span></code> in your\nthread loop, and exit the thread accordingly, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will not\nbe able to gracefully exit a long-running thread.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">abort_requested</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aborted</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n            <span class=\"k\">break</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p>It is also important to be mindful of the fact that the\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\" title=\"napari.qt.threading.WorkerBase.start\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">worker.start()</span></code></a> method adds\nthe worker to a global Pool, such that it can request shutdown when exiting\nnapari.  So if you re-implement <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code>, please be sure to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">super().start()</span></code> to keep track of the <code class=\"docutils literal notranslate\"><span class=\"pre\">worker</span></code>.</p></li>\n<li><p>When reimplementing the <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.run\" title=\"napari.qt.threading.WorkerBase.run\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">run()</span></code></a> method,\nit is your responsibility to emit the <code class=\"docutils literal notranslate\"><span class=\"pre\">started</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">returned</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">finished</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">errored</span></code> signals at the appropriate moments.</p></li>\n</ol>\n<p>For examples of subclassing <a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a>, have a\nlook at the two main concrete subclasses in napari:\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.FunctionWorker.html#napari.qt.threading.FunctionWorker\" title=\"napari.qt.threading.FunctionWorker\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FunctionWorker</span></code></a> and\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker\" title=\"napari.qt.threading.GeneratorWorker\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeneratorWorker</span></code></a>.  You may also wish to simply\nsubclass one of those two classes.</p>\n<div class=\"section\" id=\"adding-custom-signals\">\n<h3>Adding custom signals<a class=\"headerlink\" href=\"#adding-custom-signals\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In order to emit signals, an object must inherit from <code class=\"docutils literal notranslate\"><span class=\"pre\">QObject</span></code>.  However,\ndue to challenges with multiple inheritance in Qt, the signals for\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a> objects actually live in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">WorkerBase._signals</span></code> attribute (though they are accessible directly in the\nworker namespace).  To add custom signals to a\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a> subclass you must first create a new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QObject</span></code> with signals as class attributes:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtCore</span> <span class=\"kn\">import</span> <span class=\"n\">QObject</span><span class=\"p\">,</span> <span class=\"n\">Signal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkerSignals</span><span class=\"p\">(</span><span class=\"n\">QObject</span><span class=\"p\">):</span>\n    <span class=\"n\">signal_name</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or subclass one of the existing signals objects to \"add\"</span>\n<span class=\"c1\"># additional signals:</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">napari.qt.threading</span> <span class=\"kn\">import</span> <span class=\"n\">WorkerBaseSignals</span>\n\n<span class=\"c1\"># WorkerBaseSignals already has started, finished, errored...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyWorkerSignals</span><span class=\"p\">(</span><span class=\"n\">WorkerBaseSignals</span><span class=\"p\">):</span>\n    <span class=\"n\">signal_name</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>and then either directly override the <code class=\"docutils literal notranslate\"><span class=\"pre\">self._signals</span></code> attribute on the\n<a class=\"reference internal\" href=\"../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\" title=\"napari.qt.threading.WorkerBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">WorkerBase</span></code></a> class with an instance of your\nsignals class:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyWorker</span><span class=\"p\">(</span><span class=\"n\">WorkerBase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signals</span> <span class=\"o\">=</span> <span class=\"n\">MyWorkerSignals</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>… or pass the signals class as the <code class=\"docutils literal notranslate\"><span class=\"pre\">SignalsClass</span></code> argument when\ninitializing the superclass in your <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyWorker</span><span class=\"p\">(</span><span class=\"n\">WorkerBase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">SignalsClass</span><span class=\"o\">=</span><span class=\"n\">MyWorkerSignals</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./guides/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#processes-threads-and-asyncio","text":"Processes, Threads, and asyncio"},{"href":"#threading-in-napari-with-thread-worker","text":"Threading in napari with @thread_worker"},{"href":"#responding-to-feedback-from-threads","text":"Responding to Feedback from Threads"},{"href":"#generators-for-the-win","text":"Generators for the Win!"},{"href":"#full-two-way-communication","text":"Full Two-way Communication"},{"href":"#syntactic-sugar","text":"Syntactic Sugar"},{"href":"#using-a-custom-worker-class","text":"Using a Custom Worker Class"}]}},"__N_SSG":true}