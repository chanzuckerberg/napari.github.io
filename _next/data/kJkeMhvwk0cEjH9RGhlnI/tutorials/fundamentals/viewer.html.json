{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"napari viewer tutorial","pageFrontMatter":{},"pageBodyHtml":"\n        <div class=\"section\" id=\"napari-viewer-tutorial\">\n\n<p>Welcome to the tutorial on the <strong>napari</strong> viewer!</p>\n<p>This tutorial assumes you have already installed <strong>napari</strong> and know how to\nlaunch the viewer. For help with installation see our\n<a class=\"reference internal\" href=\"installation.html\"><span class=\"doc std std-doc\">installation</span></a> tutorial. For help getting started with the\nviewer see our <a class=\"reference internal\" href=\"getting_started.html\"><span class=\"doc std std-doc\">getting started</span></a> tutorial.</p>\n<p>This tutorial will teach you about the <strong>napari</strong> viewer, including how to use\nits graphical user interface (GUI) and how the data within it is organized. At\nthe end of the tutorial you should understand the both the layout of the viewer\non the screen and the data inside of it.</p>\n<div class=\"section\" id=\"launching-the-viewer\">\n<h2>launching the viewer</h2>\n<p>As discussed in <a class=\"reference internal\" href=\"getting_started.html\"><span class=\"doc std std-doc\">getting started</span></a> tutorial the napari viewer\ncan be launched from the command-line, a python script, an IPython console, or a\njupyter notebook. All four methods launch the same viewer, and anything related\nto the interacting with the viewer on the screen applies equally to all of them.\nWe will use the syntax inside python scripts so you can copy and paste these\nexamples into scripts and run them.</p>\n<p>Let’s get stated by launching a viewer with a simple 2D image.</p>\n<p>The fastest way to get the viewer open and throw an image up on the screen is\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.view_image</span></code> method:</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"kn\">import</span> <span class=\"n\">data</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Calling <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.view_image</span></code> will return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> object that is the main\nobject inside <strong>napari</strong>. All the data you add to <strong>napari</strong> will be stored\ninside the <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> object and will be accessible from it. This command will\nalso open the viewer to create a GUI that you can interact with.</p>\n<p>You can also create an empty <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> directly and then start adding images to\nit. For example:</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">add_image</span></code> accepts the same arguments as <code class=\"docutils literal notranslate\"><span class=\"pre\">view_image</span></code> but returns a layer\nrather than a <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code>, (as you must already have a viewer to use it).</p>\n<p>After running either of those two commands you should now be able to see the\nphotograph of the astronaut in the <strong>napari</strong> viewer as shown below</p>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.utils</span> <span class=\"kn\">import</span> <span class=\"n\">nbscreenshot</span>\n\n<span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Both the <code class=\"docutils literal notranslate\"><span class=\"pre\">view_image</span></code> and the <code class=\"docutils literal notranslate\"><span class=\"pre\">add_image</span></code> methods accept any numpy-array like\nobject as an input, including n-dimensional arrays. For more information on\nadding images to the viewer see the <a class=\"reference internal\" href=\"image.html\"><span class=\"doc std std-doc\">image layer</span></a> tutorial. Now we will\ncontinue exploring the rest of the viewer.</p>\n</div>\n<div class=\"section\" id=\"layout-of-the-viewer\">\n<h2>layout of the viewer</h2>\n<p>The viewer is organized into a few key areas:</p>\n<p><img alt=\"image: viewer layout\" src=\"../../_images/viewer_layout.jpg\"></p>\n<p>We’ll go through each of these in the next sections.</p>\n<div class=\"section\" id=\"main-canvas\">\n<h3>main canvas</h3>\n<p>The main canvas is in the center of the viewer and contains the visual display\nof the data passed to <strong>napari</strong>, including images, point, shapes, and our other\nsupported data types. Under the hood the canvas is a <code class=\"docutils literal notranslate\"><span class=\"pre\">vispy.scene.SceneCanvas</span></code>\nobject which has built-in support for features such as zooming and panning. As\n<code class=\"docutils literal notranslate\"><span class=\"pre\">vispy</span></code> uses <code class=\"docutils literal notranslate\"><span class=\"pre\">OpenGL</span></code> and your graphics card, panning and zooming are highly\nperformant. You can also return to the original zoom level by clicking the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">home</span></code> button in the viewer buttons panel.</p>\n<p><img alt=\"image: pan and zoom with napari\" src=\"../../_images/viewer_pan_zoom.gif\"></p>\n</div>\n<div class=\"section\" id=\"layer-list\">\n<h3>layer list</h3>\n<p>One of the basic <strong>napari</strong> objects are layers. There are different layer types\nfor <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Shapes</span></code>, and other basic data types. They can be added\nto the viewer either programmatically or through the GUI. Once added they start\nto populate the layer list located on the bottom lefthand side of the main\ncanvas.</p>\n<p>The layer list contains one widget for each of the layers that have been added\nto the viewer and includes a <code class=\"docutils literal notranslate\"><span class=\"pre\">thumbnail</span></code> which shows a miniaturized version of\nthe currently viewed data, a <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> that is an editable text box, <code class=\"docutils literal notranslate\"><span class=\"pre\">visibility</span></code>\nbutton that can be toggled on or off to show or hide the layer, and an <code class=\"docutils literal notranslate\"><span class=\"pre\">icon</span></code>\nfor the layer type.</p>\n<p>Adding the following three image layers using the code below adds three-layer\nwidgets to the layer list as follows:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'astronaut'</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">moon</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'moon'</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'camera'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Note that we’ve also also named each of the layers using the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> keyword\nargument in <code class=\"docutils literal notranslate\"><span class=\"pre\">add_image</span></code>, and that name has appeared as a string in the layer\nwidget. The layer name is coerced into being unique so that it can be used to\nindex into the <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerList</span></code>.</p>\n<p>You can select layers, causing them to become outlined, by clicking on their\nlayer widget. Multiple layers can be simultaneously selected using either\n<code class=\"docutils literal notranslate\"><span class=\"pre\">shift</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">command</span></code> click to select either all the layers in between clicked-on\nlayers or just the clicked-on layers respectively.</p>\n<p>You can rearrange the order of the layers by dragging them, including dragging\nmultiple layers at the same time.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> object also contains our <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerList</span></code> object that allows you to\naccess the data of all the layers by</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>This object can be indexed like a normal list using an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> or using the <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>\nname of the layer as follows</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s1\">'astronaut'</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>You can rearrange layers by clicking and dragging them.</p>\n</div>\n<div class=\"section\" id=\"layer-controls\">\n<h3>layer controls</h3>\n<p>Above the layers list in the top left corner of the viewer there is a box that\ncontains the layer controls. The controls that you have available to you depend\non the layer type that you have selected.</p>\n<p>For example, if you add a <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code> layer after adding an <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> layer you will\nnow see different controls present.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]])</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_points</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Adjusting these properties in the GUI will cause corresponding changes to\nproperties on the individual layers that are accessible in the console through\n<code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.layers</span></code>.</p>\n<p>For example, the name and opacity of a layer can be changed within the console\nas follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'astronaut'</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">opacity</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>\n</pre></div>\n</div>\n<p>and these changes will instantly propagate to the GUI. For more information\nabout the different properties for different layer types please see our layer\nspecific tutorials listed at the bottom of this tutorial.</p>\n</div>\n<div class=\"section\" id=\"new-layer-buttons\">\n<h3>new layer buttons</h3>\n<p>New <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Shapes</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">Labels</span></code> layers can be added to the viewer using the\nnew layer buttons in the bottom righthand corner of the GUI. These correspond to\nthe calls such as:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_points</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_shapes</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_labels</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>but with empty data. Once added in the GUI these layers become accessible in the\nlayers list and at <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.layers</span></code>.</p>\n<p>Layers can also be deleted by selecting them and then clicking on the trash\nicon, or by dragging the layers and dropping them into the trash.</p>\n<p>In the console a layer at index <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> can be removed by</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"dimension-sliders\">\n<h2>dimension sliders</h2>\n<p>One of the main strengths of <strong>napari</strong> is that it has been designed from the\nbeginning to handle n-dimensional data. While much consumer photography is 2D\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">RGB</span></code>, scientific image data can often be volumetric (i.e. 3D), volumetric\ntimeseries (i.e. 4D), or even higher dimensional. <strong>napari</strong> places no limits on\nthe dimensionality of its input data for all its layer types.</p>\n<p>Adding data with a dimensionality greater than 2D will cause dimension sliders\nto appear directly underneath the main canvas and above the status bar. As many\nsliders as needed will appear to ensure the data can be fully browsed. For\nexample, a 3D dataset needs one slider, a 4D dataset needs two sliders, and so\non. The widths of the scroll bars of the dimension sliders are directly related\nto how many slices are in each dimension.</p>\n<p>It is also possible to mix data of different shapes and dimensionality in\ndifferent layers. If a 2D and 4D dataset are both added to the viewer then the\nsliders will only affect the 4D dataset and the 2D dataset will be remain the\nsame. Effectively, the two datasets are broadcast together using <a class=\"reference external\" href=\"https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\">NumPy\nbroadcasting\nrules</a>.</p>\n<p>For example, the following commands from the console will add a both 2D and 3D\ndatasets to the same viewer:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">moon</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'moon'</span><span class=\"p\">)</span>\n<span class=\"n\">blobs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">binary_blobs</span><span class=\"p\">(</span>\n            <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">blob_size_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">volume_fraction</span><span class=\"o\">=</span><span class=\"n\">f</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">blobs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'blobs'</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"viewer-buttons\">\n<h3>viewer buttons</h3>\n<p>Underneath the layers list there is a row of buttons that includes the <code class=\"docutils literal notranslate\"><span class=\"pre\">Console</span></code>\nbutton that will show or hide our console that allows you to interact with a\npython kernel. Inside the console you can access the viewer using the <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer</span></code>\nargument.</p>\n<p>When the console button is clicked, the console will appear at the bottom of the\nviewer as follows:</p>\n<p><img alt=\"image: console within napari\" src=\"../../_images/console.png\"></p>\n<p>We then have a button that switches between <code class=\"docutils literal notranslate\"><span class=\"pre\">2D</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">3D</span></code> rendering. After\nrunning the following code:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">ndimage</span> <span class=\"k\">as</span> <span class=\"n\">ndi</span>\n\n<span class=\"n\">blobs</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">binary_blobs</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">volume_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">n_dim</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">blobs</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'blobs'</span><span class=\"p\">)</span>\n<span class=\"n\">labeled</span> <span class=\"o\">=</span> <span class=\"n\">ndi</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"n\">blobs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_labels</span><span class=\"p\">(</span><span class=\"n\">labeled</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'blob ID'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>… clicking on the 3D button</p>\n<p><img alt=\"image: 3D_button\" src=\"../../_images/3D_button.png\"></p>\n<p>and rotating the camera view with the mouse gives something like the following\nview:</p>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># programmatically adjust the camera angle</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">zoom</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">)</span>\n<span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Next to the 2D / 3D button is a button to roll the dimensions that are currently\nbeing displayed in the viewer - for example if you have a <code class=\"docutils literal notranslate\"><span class=\"pre\">ZYX</span></code> volume and are\nlooking at the <code class=\"docutils literal notranslate\"><span class=\"pre\">YX</span></code> slice this will then show you the <code class=\"docutils literal notranslate\"><span class=\"pre\">ZY</span></code> slice.</p>\n<p>After that is a button that transposes the displayed dimensions.</p>\n<p>Finally, there is the <code class=\"docutils literal notranslate\"><span class=\"pre\">home</span></code> button that will reset the camera state to its\ninitial values.</p>\n</div>\n<div class=\"section\" id=\"status-bar\">\n<h3>status bar</h3>\n<p>At the very bottom of the GUI there is a status bar that contains useful updates\nand tips.</p>\n<p>On the lefthand side of the status bar there is a message that contains\ninformation about the position of the mouse and the values of any images or the\nindices of any points that are currently hovered over, depending on which layer\nis selected. The status bar will also display information about what button you\nare clicking in the layer control panel too.</p>\n<p>The righthand side of the status bar contains some helpful tips depending on\nwhich layer and tools are currently selected.</p>\n</div>\n</div>\n<div class=\"section\" id=\"changing-viewer-theme\">\n<h2>changing viewer theme</h2>\n<p>Currently, <strong>napari</strong> comes with two different themes <code class=\"docutils literal notranslate\"><span class=\"pre\">light</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">dark</span></code>, which\nis the default. To change the theme, update <code class=\"docutils literal notranslate\"><span class=\"pre\">theme</span></code> property of the viewer:</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'astronaut'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># change the viewer theme</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">theme</span> <span class=\"o\">=</span> <span class=\"s1\">'light'</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_hide-input docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nbscreenshot</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Adding your own custom theme isn’t too hard either but does require creating\nyour own color <code class=\"docutils literal notranslate\"><span class=\"pre\">palette</span></code> and rebuilding the icons. If people want more themes,\nwe’re happy to add them or if you look at our <a class=\"reference external\" href=\"https://github.com/napari/napari/tree/master/docs/CONTRIBUTING\">contributing\nguidelines</a> for\nmore information about building the icons and add one yourself!</p>\n</div>\n<div class=\"section\" id=\"custom-keybinding\">\n<h2>custom keybinding</h2>\n<p>One of the promises of <strong>napari</strong> is to provide a beginner friendly environment\nfor interactive analysis. For example, we want to enable workflows where people\ncan interact with the GUI, say click on the centers of some objects, or paint\nover some regions and then perform custom analysis. As a first step towards\nenabling custom interactivity we’ve provided support to add your own custom\nkeybindings to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> or individual <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer</span></code> objects such that when the\ncorresponding key gets clicked your custom function gets executed. Depending on\nwhich object you bind your key to, your function will either get access to the\nstate of the entire <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">layer</span></code> object.</p>\n<p>For example, to bind function that loops through all layers in the viewer and\nprints their names to your console when you press the <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> key you can do the\nfollowing:</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'astronaut'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_names</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>By default, your key will bind to the key press event, but it is also possible\nto bind to the key release event by including a <code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code> inside your function.\nAll code before the <code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code> will get executed on key press and all code after\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code> will get executed on key release. The following example will print\n<code class=\"docutils literal notranslate\"><span class=\"pre\">hello</span></code> when you start to press the <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code> key and print <code class=\"docutils literal notranslate\"><span class=\"pre\">goodbye</span></code> when you release\nit.</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'astronaut'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_message</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'goodbye'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Keys can be bound both to the object class or a particular instance depending on\nif you want the keybinding to apply to all instances of the class or only one\nparticular instance.</p>\n<p>Currently the keybindings only work when the main canvas is in focus, we are\nworking to ensure they always work.</p>\n<p>The ability to add custom keybindings dramatically increases what is possible\nwithin <strong>napari</strong> and we hope you take full advantage of them.</p>\n</div>\n<div class=\"section\" id=\"next-steps\">\n<h2>next steps</h2>\n<p>Hopefully, this tutorial has given you an overview of the functionality\navailable on the <strong>napari</strong> viewer, including the <code class=\"docutils literal notranslate\"><span class=\"pre\">LayerList</span></code> and some of the\ndifferent layer types. To learn more about the different layer types that\n<strong>napari</strong> supports checkout some more of our tutorials listed below. The <a class=\"reference internal\" href=\"image.html\"><span class=\"doc std std-doc\">image\nlayer</span></a> tutorial is a great one to try next as viewing images is a\nfundamental part of what <strong>napari</strong> is about.</p>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./tutorials/fundamentals\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#launching-the-viewer","text":"launching the viewer"},{"href":"#layout-of-the-viewer","text":"layout of the viewer"},{"href":"#dimension-sliders","text":"dimension sliders"},{"href":"#changing-viewer-theme","text":"changing viewer theme"},{"href":"#custom-keybinding","text":"custom keybinding"},{"href":"#next-steps","text":"next steps"}]}},"__N_SSG":true}