{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html","/tutorials/further-resources/napari-workshops.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.layers.points.points","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span><span class=\"p\">,</span> <span class=\"n\">deepcopy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">cycle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.stats</span> <span class=\"kn\">import</span> <span class=\"n\">gmean</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.colormaps</span> <span class=\"kn\">import</span> <span class=\"n\">Colormap</span><span class=\"p\">,</span> <span class=\"n\">ValidColormapArg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.colormaps.standardize_color</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">get_color_namelist</span><span class=\"p\">,</span>\n    <span class=\"n\">hex_to_name</span><span class=\"p\">,</span>\n    <span class=\"n\">rgb_to_hex</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events.custom_types</span> <span class=\"kn\">import</span> <span class=\"n\">Array</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.transforms</span> <span class=\"kn\">import</span> <span class=\"n\">Affine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..base</span> <span class=\"kn\">import</span> <span class=\"n\">Layer</span><span class=\"p\">,</span> <span class=\"n\">no_op</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils._color_manager_constants</span> <span class=\"kn\">import</span> <span class=\"n\">ColorMode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.color_manager</span> <span class=\"kn\">import</span> <span class=\"n\">ColorManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.color_transformations</span> <span class=\"kn\">import</span> <span class=\"n\">ColorType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.layer_utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">coerce_current_properties</span><span class=\"p\">,</span>\n    <span class=\"n\">get_current_properties</span><span class=\"p\">,</span>\n    <span class=\"n\">prepare_properties</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.text_manager</span> <span class=\"kn\">import</span> <span class=\"n\">TextManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._points_constants</span> <span class=\"kn\">import</span> <span class=\"n\">SYMBOL_ALIAS</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._points_mouse_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">highlight</span><span class=\"p\">,</span> <span class=\"n\">select</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._points_utils</span> <span class=\"kn\">import</span> <span class=\"n\">create_box</span><span class=\"p\">,</span> <span class=\"n\">fix_data_points</span><span class=\"p\">,</span> <span class=\"n\">points_to_squares</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"n\">DataFrame</span>\n\n<span class=\"n\">DEFAULT_COLOR_CYCLE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n\n<div class=\"viewcode-block\" id=\"Points\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Points</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Points layer.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : array (N, D)</span>\n<span class=\"sd\">        Coordinates for N points in D dimensions.</span>\n<span class=\"sd\">    ndim : int</span>\n<span class=\"sd\">        Number of dimensions for shapes. When data is not None, ndim must be D.</span>\n<span class=\"sd\">        An empty points layer can be instantiated with arbitrary ndim.</span>\n<span class=\"sd\">    properties : dict {str: array (N,)}, DataFrame</span>\n<span class=\"sd\">        Properties for each point. Each property should be an array of length N,</span>\n<span class=\"sd\">        where N is the number of points.</span>\n<span class=\"sd\">    property_choices : dict {str: array (N,)}</span>\n<span class=\"sd\">        possible values for each property.</span>\n<span class=\"sd\">    text : str, dict</span>\n<span class=\"sd\">        Text to be displayed with the points. If text is set to a key in properties,</span>\n<span class=\"sd\">        the value of that property will be displayed. Multiple properties can be</span>\n<span class=\"sd\">        composed using f-string-like syntax (e.g., '{property_1}, {float_property:.2f}).</span>\n<span class=\"sd\">        A dictionary can be provided with keyword arguments to set the text values</span>\n<span class=\"sd\">        and display properties. See TextManager.__init__() for the valid keyword arguments.</span>\n<span class=\"sd\">        For example usage, see /napari/examples/add_points_with_text.py.</span>\n<span class=\"sd\">    symbol : str</span>\n<span class=\"sd\">        Symbol to be used for the point markers. Must be one of the</span>\n<span class=\"sd\">        following: arrow, clobber, cross, diamond, disc, hbar, ring,</span>\n<span class=\"sd\">        square, star, tailed_arrow, triangle_down, triangle_up, vbar, x.</span>\n<span class=\"sd\">    size : float, array</span>\n<span class=\"sd\">        Size of the point marker. If given as a scalar, all points are made</span>\n<span class=\"sd\">        the same size. If given as an array, size must be the same</span>\n<span class=\"sd\">        broadcastable to the same shape as the data.</span>\n<span class=\"sd\">    edge_width : float</span>\n<span class=\"sd\">        Width of the symbol edge in pixels.</span>\n<span class=\"sd\">    edge_color : str, array-like, dict</span>\n<span class=\"sd\">        Color of the point marker border. Numeric color values should be RGB(A).</span>\n<span class=\"sd\">    edge_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to edge_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    edge_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set edge_color if a continuous attribute is used to set face_color.</span>\n<span class=\"sd\">    edge_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n<span class=\"sd\">    face_color : str, array-like, dict</span>\n<span class=\"sd\">        Color of the point marker body. Numeric color values should be RGB(A).</span>\n<span class=\"sd\">    face_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to face_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    face_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set face_color if a continuous attribute is used to set face_color.</span>\n<span class=\"sd\">    face_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n<span class=\"sd\">    n_dimensional : bool</span>\n<span class=\"sd\">        If True, renders points not just in central plane but also in all</span>\n<span class=\"sd\">        n-dimensions according to specified point marker size.</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        Name of the layer.</span>\n<span class=\"sd\">    metadata : dict</span>\n<span class=\"sd\">        Layer metadata.</span>\n<span class=\"sd\">    scale : tuple of float</span>\n<span class=\"sd\">        Scale factors for the layer.</span>\n<span class=\"sd\">    translate : tuple of float</span>\n<span class=\"sd\">        Translation values for the layer.</span>\n<span class=\"sd\">    rotate : float, 3-tuple of float, or n-D array.</span>\n<span class=\"sd\">        If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">        angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">        pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">        assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">        np.degrees if needed.</span>\n<span class=\"sd\">    shear : 1-D array or n-D array</span>\n<span class=\"sd\">        Either a vector of upper triangular values, or an nD shear matrix with</span>\n<span class=\"sd\">        ones along the main diagonal.</span>\n<span class=\"sd\">    affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">        (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">        The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">        the final column is a length N translation vector and a 1 or a napari</span>\n<span class=\"sd\">        `Affine` transform object. Applied as an extra transform on top of the</span>\n<span class=\"sd\">        provided scale, rotate, and shear values.</span>\n<span class=\"sd\">    opacity : float</span>\n<span class=\"sd\">        Opacity of the layer visual, between 0.0 and 1.0.</span>\n<span class=\"sd\">    blending : str</span>\n<span class=\"sd\">        One of a list of preset blending modes that determines how RGB and</span>\n<span class=\"sd\">        alpha values of the layer visual get mixed. Allowed values are</span>\n<span class=\"sd\">        {'opaque', 'translucent', and 'additive'}.</span>\n<span class=\"sd\">    visible : bool</span>\n<span class=\"sd\">        Whether the layer visual is currently being displayed.</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : array (N, D)</span>\n<span class=\"sd\">        Coordinates for N points in D dimensions.</span>\n<span class=\"sd\">    properties : dict {str: array (N,)} or DataFrame</span>\n<span class=\"sd\">        Annotations for each point. Each property should be an array of length N,</span>\n<span class=\"sd\">        where N is the number of points.</span>\n<span class=\"sd\">    text : str</span>\n<span class=\"sd\">        Text to be displayed with the points. If text is set to a key in properties, the value of</span>\n<span class=\"sd\">        that property will be displayed. Multiple properties can be composed using f-string-like</span>\n<span class=\"sd\">        syntax (e.g., '{property_1}, {float_property:.2f}).</span>\n<span class=\"sd\">        For example usage, see /napari/examples/add_points_with_text.py.</span>\n<span class=\"sd\">    symbol : str</span>\n<span class=\"sd\">        Symbol used for all point markers.</span>\n<span class=\"sd\">    size : array (N, D)</span>\n<span class=\"sd\">        Array of sizes for each point in each dimension. Must have the same</span>\n<span class=\"sd\">        shape as the layer `data`.</span>\n<span class=\"sd\">    edge_width : float</span>\n<span class=\"sd\">        Width of the marker edges in pixels for all points</span>\n<span class=\"sd\">    edge_color : Nx4 numpy array</span>\n<span class=\"sd\">        Array of edge color RGBA values, one for each point.</span>\n<span class=\"sd\">    edge_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to edge_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    edge_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set edge_color if a continuous attribute is used to set face_color.</span>\n<span class=\"sd\">    edge_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n<span class=\"sd\">    face_color : Nx4 numpy array</span>\n<span class=\"sd\">        Array of face color RGBA values, one for each point.</span>\n<span class=\"sd\">    face_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to face_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    face_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set face_color if a continuous attribute is used to set face_color.</span>\n<span class=\"sd\">    face_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n<span class=\"sd\">    current_size : float</span>\n<span class=\"sd\">        Size of the marker for the next point to be added or the currently</span>\n<span class=\"sd\">        selected point.</span>\n<span class=\"sd\">    current_edge_color : str</span>\n<span class=\"sd\">        Size of the marker edge for the next point to be added or the currently</span>\n<span class=\"sd\">        selected point.</span>\n<span class=\"sd\">    current_face_color : str</span>\n<span class=\"sd\">        Size of the marker edge for the next point to be added or the currently</span>\n<span class=\"sd\">        selected point.</span>\n<span class=\"sd\">    n_dimensional : bool</span>\n<span class=\"sd\">        If True, renders points not just in central plane but also in all</span>\n<span class=\"sd\">        n-dimensions according to specified point marker size.</span>\n<span class=\"sd\">    selected_data : set</span>\n<span class=\"sd\">        Integer indices of any selected points.</span>\n<span class=\"sd\">    mode : str</span>\n<span class=\"sd\">        Interactive mode. The normal, default mode is PAN_ZOOM, which</span>\n<span class=\"sd\">        allows for normal interactivity with the canvas.</span>\n\n<span class=\"sd\">        In ADD mode clicks of the cursor add points at the clicked location.</span>\n\n<span class=\"sd\">        In SELECT mode the cursor can select points by clicking on them or</span>\n<span class=\"sd\">        by dragging a box around them. Once selected points can be moved,</span>\n<span class=\"sd\">        have their properties edited, or be deleted.</span>\n<span class=\"sd\">    face_color_mode : str</span>\n<span class=\"sd\">        Face color setting mode.</span>\n\n<span class=\"sd\">        DIRECT (default mode) allows each point to be set arbitrarily</span>\n\n<span class=\"sd\">        CYCLE allows the color to be set via a color cycle over an attribute</span>\n\n<span class=\"sd\">        COLORMAP allows color to be set via a color map over an attribute</span>\n<span class=\"sd\">    edge_color_mode : str</span>\n<span class=\"sd\">        Edge color setting mode.</span>\n\n<span class=\"sd\">        DIRECT (default mode) allows each point to be set arbitrarily</span>\n\n<span class=\"sd\">        CYCLE allows the color to be set via a color cycle over an attribute</span>\n\n<span class=\"sd\">        COLORMAP allows color to be set via a color map over an attribute</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    _property_choices : dict {str: array (N,)}</span>\n<span class=\"sd\">        Possible values for the properties in Points.properties.</span>\n<span class=\"sd\">    _view_data : array (M, 2)</span>\n<span class=\"sd\">        2D coordinates of points in the currently viewed slice.</span>\n<span class=\"sd\">    _view_size : array (M, )</span>\n<span class=\"sd\">        Size of the point markers in the currently viewed slice.</span>\n<span class=\"sd\">    _indices_view : array (M, )</span>\n<span class=\"sd\">        Integer indices of the points in the currently viewed slice.</span>\n<span class=\"sd\">    _selected_view :</span>\n<span class=\"sd\">        Integer indices of selected points in the currently viewed slice within</span>\n<span class=\"sd\">        the `_view_data` array.</span>\n<span class=\"sd\">    _selected_box : array (4, 2) or None</span>\n<span class=\"sd\">        Four corners of any box either around currently selected points or</span>\n<span class=\"sd\">        being created during a drag action. Starting in the top left and</span>\n<span class=\"sd\">        going clockwise.</span>\n<span class=\"sd\">    _drag_start : list or None</span>\n<span class=\"sd\">        Coordinates of first cursor click during a drag action. Gets reset to</span>\n<span class=\"sd\">        None after dragging is done.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\"># TODO  write better documentation for edge_color and face_color</span>\n\n    <span class=\"c1\"># The max number of points that will ever be used to render the thumbnail</span>\n    <span class=\"c1\"># If more points are present then they are randomly subsampled</span>\n    <span class=\"n\">_max_points_thumbnail</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s1\">'black'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_color_cycle</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_colormap</span><span class=\"o\">=</span><span class=\"s1\">'viridis'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_contrast_limits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">face_color</span><span class=\"o\">=</span><span class=\"s1\">'white'</span><span class=\"p\">,</span>\n        <span class=\"n\">face_color_cycle</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">face_colormap</span><span class=\"o\">=</span><span class=\"s1\">'viridis'</span><span class=\"p\">,</span>\n        <span class=\"n\">face_contrast_limits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">n_dimensional</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"s1\">'translucent'</span><span class=\"p\">,</span>\n        <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">property_choices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">ndim</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">scale</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"n\">fix_data_points</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">ndim</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n            <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">scale</span><span class=\"p\">,</span>\n            <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"n\">translate</span><span class=\"p\">,</span>\n            <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"n\">rotate</span><span class=\"p\">,</span>\n            <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"n\">shear</span><span class=\"p\">,</span>\n            <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n            <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">opacity</span><span class=\"p\">,</span>\n            <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"n\">blending</span><span class=\"p\">,</span>\n            <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"n\">visible</span><span class=\"p\">,</span>\n            <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"n\">experimental_clipping_planes</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">face_color</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">current_face_color</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">current_edge_color</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">current_properties</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">n_dimensional</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">highlight</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_colors</span> <span class=\"o\">=</span> <span class=\"n\">get_color_namelist</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Save the point coordinates</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save the properties</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span> <span class=\"o\">=</span> <span class=\"n\">prepare_properties</span><span class=\"p\">(</span>\n            <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">property_choices</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">save_choices</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># make the text</span>\n        <span class=\"k\">if</span> <span class=\"n\">text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span> <span class=\"o\">=</span> <span class=\"n\">TextManager</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">copied_text</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n            <span class=\"n\">copied_text</span><span class=\"p\">[</span><span class=\"s1\">'properties'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span>\n            <span class=\"n\">copied_text</span><span class=\"p\">[</span><span class=\"s1\">'n_text'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span> <span class=\"o\">=</span> <span class=\"n\">TextManager</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">copied_text</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'text should be a string, array, or dict'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save the point style params</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">symbol</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_n_dimensional</span> <span class=\"o\">=</span> <span class=\"n\">n_dimensional</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span> <span class=\"o\">=</span> <span class=\"n\">edge_width</span>\n\n        <span class=\"c1\"># The following point properties are for the new points that will</span>\n        <span class=\"c1\"># be added. For any given property, if a list is passed to the</span>\n        <span class=\"c1\"># constructor so each point gets its own value then the default</span>\n        <span class=\"c1\"># value is used when adding new points</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isscalar</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"mi\">10</span>\n        <span class=\"c1\"># Indices of selected points</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data_stored</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data_history</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Indices of selected points within the currently viewed slice</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># Index of hovered point</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_stored</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_status</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_box</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_start</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># initialize view data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_size_scale</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box_stored</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_selecting</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_round_index</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span> <span class=\"o\">=</span> <span class=\"n\">ColorManager</span><span class=\"o\">.</span><span class=\"n\">_from_layer_kwargs</span><span class=\"p\">(</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n            <span class=\"n\">continuous_colormap</span><span class=\"o\">=</span><span class=\"n\">edge_colormap</span><span class=\"p\">,</span>\n            <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"n\">edge_contrast_limits</span><span class=\"p\">,</span>\n            <span class=\"n\">categorical_colormap</span><span class=\"o\">=</span><span class=\"n\">edge_color_cycle</span><span class=\"p\">,</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span> <span class=\"o\">=</span> <span class=\"n\">ColorManager</span><span class=\"o\">.</span><span class=\"n\">_from_layer_kwargs</span><span class=\"p\">(</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"n\">face_color</span><span class=\"p\">,</span>\n            <span class=\"n\">continuous_colormap</span><span class=\"o\">=</span><span class=\"n\">face_colormap</span><span class=\"p\">,</span>\n            <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"n\">face_contrast_limits</span><span class=\"p\">,</span>\n            <span class=\"n\">categorical_colormap</span><span class=\"o\">=</span><span class=\"n\">face_color_cycle</span><span class=\"p\">,</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">get_current_properties</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Trigger generation of view slice and thumbnail</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(N, D) array: coordinates for N points in D dimensions.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"nd\">@data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]):</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">fix_data_points</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n        <span class=\"n\">cur_npoints</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n        <span class=\"c1\"># Adjust the size array when the number of points has changed</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n                <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">cur_npoints</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># If there are now fewer points, remove the size and colors of the</span>\n                        <span class=\"c1\"># extra ones</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_remove</span><span class=\"p\">(</span>\n                                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">))</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_remove</span><span class=\"p\">(</span>\n                                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">))</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"p\">[:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)]</span>\n\n                        <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span>\n                                <span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n                            <span class=\"p\">]</span>\n\n                    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">cur_npoints</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># If there are now more points, add the size and colors of the</span>\n                        <span class=\"c1\"># new ones</span>\n                        <span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">cur_npoints</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                            <span class=\"n\">new_size</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">:</span>\n                                <span class=\"n\">new_size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_size</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"c1\"># Add the default size, with a value for each dimension</span>\n                            <span class=\"n\">new_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_size</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">([</span><span class=\"n\">new_size</span><span class=\"p\">],</span> <span class=\"n\">adding</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n                        <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                            <span class=\"n\">new_property</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">adding</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span>\n                                <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">new_property</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                            <span class=\"p\">)</span>\n\n                        <span class=\"c1\"># add new colors</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_add</span><span class=\"p\">(</span><span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"n\">adding</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_add</span><span class=\"p\">(</span><span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"n\">adding</span><span class=\"p\">)</span>\n\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n                            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">cur_npoints</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n                        <span class=\"p\">)</span>\n\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">,</span> <span class=\"n\">adding</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_selection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selected</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">selected</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_box</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">highlight</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">property_choices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"dict {str: np.ndarray (N,)}, DataFrame: Annotations for each point\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_color_manager</span><span class=\"p\">(</span>\n        <span class=\"n\">color_manager</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">current_properties</span><span class=\"p\">,</span> <span class=\"n\">name</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">properties</span><span class=\"p\">:</span>\n                <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">DIRECT</span>\n                <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'property used for </span><span class=\"si\">{name}</span><span class=\"s1\"> dropped'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">color_name</span> <span class=\"o\">=</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">color_name</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">color_name</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'current_value'</span><span class=\"p\">:</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"n\">color_name</span><span class=\"p\">],</span>\n                <span class=\"p\">}</span>\n\n    <span class=\"nd\">@properties</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">properties</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">],</span> <span class=\"s1\">'DataFrame'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span> <span class=\"o\">=</span> <span class=\"n\">prepare_properties</span><span class=\"p\">(</span>\n            <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Updating current_properties can modify properties, so block to avoid</span>\n        <span class=\"c1\"># infinite recursion when explicitly setting the properties.</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_update_properties</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">get_current_properties</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_color_manager</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_properties</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"face_color\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_color_manager</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_properties</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"edge_color\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_text</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"dict{str: np.ndarray(1,)}: properties for the next added point.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_properties</span>\n\n    <span class=\"nd\">@current_properties</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">current_properties</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_properties</span> <span class=\"o\">=</span> <span class=\"n\">coerce_current_properties</span><span class=\"p\">(</span>\n            <span class=\"n\">current_properties</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_update_current_properties</span><span class=\"p\">(</span><span class=\"n\">current_properties</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_update_current_properties</span><span class=\"p\">(</span><span class=\"n\">current_properties</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TextManager</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"TextManager: the TextManager object containing containing the text properties\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span>\n\n    <span class=\"nd\">@text</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_text</span><span class=\"o\">.</span><span class=\"n\">_set_text</span><span class=\"p\">(</span>\n            <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">n_text</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Points.refresh_text\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.refresh_text\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Refresh the text values.</span>\n\n<span class=\"sd\">        This is generally used if the properties were updated without changing the data</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">refresh_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Determine number of dimensions of the layer.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layer in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_data : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">extrema</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">n_dimensional</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"bool: renders points as n-dimensionsal.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_n_dimensional</span>\n\n    <span class=\"nd\">@n_dimensional</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">n_dimensional</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n_dimensional</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_n_dimensional</span> <span class=\"o\">=</span> <span class=\"n\">n_dimensional</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">n_dimensional</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">symbol</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: symbol used for all point markers.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_symbol</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@symbol</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">symbol</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Convert the alias string to the deduplicated string</span>\n            <span class=\"k\">if</span> <span class=\"n\">symbol</span> <span class=\"ow\">in</span> <span class=\"n\">SYMBOL_ALIAS</span><span class=\"p\">:</span>\n                <span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">SYMBOL_ALIAS</span><span class=\"p\">[</span><span class=\"n\">symbol</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_symbol</span> <span class=\"o\">=</span> <span class=\"n\">symbol</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">symbol</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">highlight</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"(N, D) array: size of all N points in D dimensions.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span>\n\n    <span class=\"nd\">@size</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">broadcast_to</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">broadcast_to</span><span class=\"p\">(</span>\n                    <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s2\">\"Size is not compatible for broadcasting\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"float: size of marker for the next added point.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_size</span>\n\n    <span class=\"nd\">@current_size</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">size</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"float: width used for all point markers.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span>\n\n    <span class=\"nd\">@edge_width</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_width</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span> <span class=\"o\">=</span> <span class=\"n\">edge_width</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(N x 4) np.ndarray: Array of RGBA edge colors for each point\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span>\n\n    <span class=\"nd\">@edge_color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_set_color</span><span class=\"p\">(</span>\n            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n            <span class=\"n\">current_properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Union[list, np.ndarray] :  Color cycle for edge_color.</span>\n<span class=\"sd\">        Can be a list of colors defined by name, RGB or RGBA</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span><span class=\"o\">.</span><span class=\"n\">fallback_color</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n    <span class=\"nd\">@edge_color_cycle</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color_cycle</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span> <span class=\"o\">=</span> <span class=\"n\">edge_color_cycle</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Colormap</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Return the colormap to be applied to a property to get the edge color.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        colormap : napari.utils.Colormap</span>\n<span class=\"sd\">            The Colormap object.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span>\n\n    <span class=\"nd\">@edge_colormap</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">:</span> <span class=\"n\">ValidColormapArg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_contrast_limits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"None, (float, float): contrast limits for mapping</span>\n<span class=\"sd\">        the edge_color colormap property to 0 and 1</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@edge_contrast_limits</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_contrast_limits</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contrast_limits</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span> <span class=\"o\">=</span> <span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: Edge color of marker for the next added point or the selected point(s).\"\"\"</span>\n        <span class=\"n\">hex_</span> <span class=\"o\">=</span> <span class=\"n\">rgb_to_hex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">current_color</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">hex_to_name</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">hex_</span><span class=\"p\">,</span> <span class=\"n\">hex_</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@current_edge_color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"p\">:</span> <span class=\"n\">ColorType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">update_indices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">update_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_update_current_color</span><span class=\"p\">(</span>\n            <span class=\"n\">edge_color</span><span class=\"p\">,</span> <span class=\"n\">update_indices</span><span class=\"o\">=</span><span class=\"n\">update_indices</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_edge_color</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: Edge color setting mode</span>\n\n<span class=\"sd\">        DIRECT (default mode) allows each point to be set arbitrarily</span>\n\n<span class=\"sd\">        CYCLE allows the color to be set via a color cycle over an attribute</span>\n\n<span class=\"sd\">        COLORMAP allows color to be set via a color map over an attribute</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_mode</span>\n\n    <span class=\"nd\">@edge_color_mode</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color_mode</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ColorMode</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_color_mode</span><span class=\"p\">(</span><span class=\"n\">edge_color_mode</span><span class=\"p\">,</span> <span class=\"s1\">'edge'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(N x 4) np.ndarray: Array of RGBA face colors for each point\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">colors</span>\n\n    <span class=\"nd\">@face_color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_color</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_set_color</span><span class=\"p\">(</span>\n            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">face_color</span><span class=\"p\">,</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n            <span class=\"n\">current_properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">face_color</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Union[np.ndarray, cycle]:  Color cycle for face_color</span>\n<span class=\"sd\">        Can be a list of colors defined by name, RGB or RGBA</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span><span class=\"o\">.</span><span class=\"n\">fallback_color</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n    <span class=\"nd\">@face_color_cycle</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_color_cycle</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">cycle</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span> <span class=\"o\">=</span> <span class=\"n\">face_color_cycle</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Colormap</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Return the colormap to be applied to a property to get the face color.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        colormap : napari.utils.Colormap</span>\n<span class=\"sd\">            The Colormap object.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span>\n\n    <span class=\"nd\">@face_colormap</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">:</span> <span class=\"n\">ValidColormapArg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_contrast_limits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"None, (float, float) : clims for mapping the face_color</span>\n<span class=\"sd\">        colormap property to 0 and 1</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@face_contrast_limits</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_contrast_limits</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contrast_limits</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span> <span class=\"o\">=</span> <span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Face color of marker for the next added point or the selected point(s).\"\"\"</span>\n        <span class=\"n\">hex_</span> <span class=\"o\">=</span> <span class=\"n\">rgb_to_hex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">current_color</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">hex_to_name</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">hex_</span><span class=\"p\">,</span> <span class=\"n\">hex_</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@current_face_color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">current_face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_color</span><span class=\"p\">:</span> <span class=\"n\">ColorType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_properties</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">update_indices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">update_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_update_current_color</span><span class=\"p\">(</span>\n            <span class=\"n\">face_color</span><span class=\"p\">,</span> <span class=\"n\">update_indices</span><span class=\"o\">=</span><span class=\"n\">update_indices</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_face_color</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: Face color setting mode</span>\n\n<span class=\"sd\">        DIRECT (default mode) allows each point to be set arbitrarily</span>\n\n<span class=\"sd\">        CYCLE allows the color to be set via a color cycle over an attribute</span>\n\n<span class=\"sd\">        COLORMAP allows color to be set via a color map over an attribute</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">color_mode</span>\n\n    <span class=\"nd\">@face_color_mode</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">face_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_color_mode</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_color_mode</span><span class=\"p\">(</span><span class=\"n\">face_color_mode</span><span class=\"p\">,</span> <span class=\"s1\">'face'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_color_mode</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color_mode</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ColorMode</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the face_color_mode or edge_color_mode property</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        color_mode : str, ColorMode</span>\n<span class=\"sd\">            The value for setting edge or face_color_mode. If color_mode is a string,</span>\n<span class=\"sd\">            it should be one of: 'direct', 'cycle', or 'colormap'</span>\n<span class=\"sd\">        attribute : str in {'edge', 'face'}</span>\n<span class=\"sd\">            The name of the attribute to set the color of.</span>\n<span class=\"sd\">            Should be 'edge' for edge_color_mode or 'face' for face_color_mode.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">ColorMode</span><span class=\"p\">(</span><span class=\"n\">color_mode</span><span class=\"p\">)</span>\n        <span class=\"n\">color_manager</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'_</span><span class=\"si\">{</span><span class=\"n\">attribute</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">color_mode</span> <span class=\"o\">==</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">DIRECT</span><span class=\"p\">:</span>\n            <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">color_mode</span>\n        <span class=\"k\">elif</span> <span class=\"n\">color_mode</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">CYCLE</span><span class=\"p\">,</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">COLORMAP</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n            <span class=\"k\">if</span> <span class=\"n\">color_property</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_color_property</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">))</span>\n                    <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">new_color_property</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">new_color_property</span><span class=\"p\">],</span>\n                        <span class=\"s1\">'current_value'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"n\">new_color_property</span><span class=\"p\">]</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s1\">'_</span><span class=\"si\">{attribute}</span><span class=\"s1\">_color_property was not set, setting to: </span><span class=\"si\">{new_color_property}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"n\">attribute</span><span class=\"p\">,</span>\n                            <span class=\"n\">new_color_property</span><span class=\"o\">=</span><span class=\"n\">new_color_property</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s1\">'There must be a valid Points.properties to use </span><span class=\"si\">{color_mode}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">color_mode</span><span class=\"o\">=</span><span class=\"n\">color_mode</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"c1\"># ColorMode.COLORMAP can only be applied to numeric properties</span>\n            <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">color_mode</span> <span class=\"o\">==</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">COLORMAP</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">color_property</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">number</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'selected property must be numeric to use ColorMode.COLORMAP'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">color_manager</span><span class=\"o\">.</span><span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">color_mode</span>\n\n<div class=\"viewcode-block\" id=\"Points.refresh_colors\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.refresh_colors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">update_color_mapping</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Calculate and update face and edge colors if using a cycle or color map</span>\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        update_color_mapping : bool</span>\n<span class=\"sd\">            If set to True, the function will recalculate the color cycle map</span>\n<span class=\"sd\">            or colormap (whichever is being used). If set to False, the function</span>\n<span class=\"sd\">            will use the current color cycle map or color map. For example, if you</span>\n<span class=\"sd\">            are adding/modifying points and want them to be colored with the same</span>\n<span class=\"sd\">            mapping as the other points (i.e., the new points shouldn't affect</span>\n<span class=\"sd\">            the color cycle map or colormap), set update_color_mapping=False.</span>\n<span class=\"sd\">            Default value is False.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_refresh_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">update_color_mapping</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_refresh_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">update_color_mapping</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get dictionary of layer state.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        state : dict</span>\n<span class=\"sd\">            Dictionary of layer state.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_base_state</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'symbol'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">symbol</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_width'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n                <span class=\"s1\">'face_color'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_color</span><span class=\"p\">,</span>\n                <span class=\"s1\">'face_color_cycle'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_color_cycle</span><span class=\"p\">,</span>\n                <span class=\"s1\">'face_colormap'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_colormap</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">'face_contrast_limits'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_contrast_limits</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_color'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_color_cycle'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color_cycle</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_colormap'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_colormap</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_contrast_limits'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_contrast_limits</span><span class=\"p\">,</span>\n                <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n                <span class=\"s1\">'property_choices'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n                <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(),</span>\n                <span class=\"s1\">'n_dimensional'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_dimensional</span><span class=\"p\">,</span>\n                <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span>\n                <span class=\"s1\">'ndim'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span>\n                <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selected_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">set</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"set: set of currently selected points.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span>\n\n    <span class=\"nd\">@selected_data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selected_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selected_data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span><span class=\"p\">)),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">,</span>\n                <span class=\"n\">return_indices</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update properties based on selected points</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_colors</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edge_colors</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">edge_color</span> <span class=\"o\">=</span> <span class=\"n\">edge_colors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_update_properties</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_edge_color</span> <span class=\"o\">=</span> <span class=\"n\">edge_color</span>\n\n        <span class=\"n\">face_colors</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_color</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">face_colors</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">face_color</span> <span class=\"o\">=</span> <span class=\"n\">face_colors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_update_properties</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_face_color</span> <span class=\"o\">=</span> <span class=\"n\">face_color</span>\n\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">({</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">index</span><span class=\"p\">})</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_update_properties</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n\n        <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># pandas uses `object` as dtype for strings by default, which</span>\n            <span class=\"c1\"># combined with the axis argument breaks np.unique</span>\n            <span class=\"n\">axis</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">)</span>\n\n        <span class=\"n\">n_unique_properties</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()])</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">n_unique_properties</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_update_properties</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">properties</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Points.interaction_box\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.interaction_box\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">interaction_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Create the interaction box around a list of points in view.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        index : list</span>\n<span class=\"sd\">            List of points around which to construct the interaction box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        box : np.ndarray or None</span>\n<span class=\"sd\">            4x2 array of corners of the interaction box in clockwise order</span>\n<span class=\"sd\">            starting in the upper-left corner.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_size</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">points_to_squares</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">create_box</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: Interactive mode</span>\n\n<span class=\"sd\">        Interactive mode. The normal, default mode is PAN_ZOOM, which</span>\n<span class=\"sd\">        allows for normal interactivity with the canvas.</span>\n\n<span class=\"sd\">        In ADD mode clicks of the cursor add points at the clicked location.</span>\n\n<span class=\"sd\">        In SELECT mode the cursor can select points by clicking on them or</span>\n<span class=\"sd\">        by dragging a box around them. Once selected points can be moved,</span>\n<span class=\"sd\">        have their properties edited, or be deleted.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span><span class=\"p\">)</span>\n\n    <span class=\"n\">_drag_modes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span><span class=\"p\">:</span> <span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span><span class=\"p\">:</span> <span class=\"n\">select</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span><span class=\"p\">:</span> <span class=\"n\">no_op</span><span class=\"p\">}</span>\n\n    <span class=\"n\">_move_modes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span><span class=\"p\">:</span> <span class=\"n\">no_op</span><span class=\"p\">,</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span><span class=\"p\">:</span> <span class=\"n\">highlight</span><span class=\"p\">,</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span><span class=\"p\">:</span> <span class=\"n\">no_op</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">_cursor_modes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span><span class=\"p\">:</span> <span class=\"s1\">'pointing'</span><span class=\"p\">,</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span><span class=\"p\">:</span> <span class=\"s1\">'standard'</span><span class=\"p\">,</span>\n        <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span><span class=\"p\">:</span> <span class=\"s1\">'standard'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@mode</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n        <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">changed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode_setter_helper</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">Mode</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">changed</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">assert</span> <span class=\"n\">mode</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mode</span>\n        <span class=\"n\">old_mode</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">ADD</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'hold &lt;space&gt; to pan/zoom'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span> <span class=\"ow\">or</span> <span class=\"n\">old_mode</span> <span class=\"o\">!=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data_stored</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Get the coords of the points in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        view_data : (N x D) np.ndarray</span>\n<span class=\"sd\">            Array of coordinates for the N points in view</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if no points in this slice send dummy data</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Get the values of the text elements in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        text : (N x 1) np.ndarray</span>\n<span class=\"sd\">            Array of text strings for the N text elements in view</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">view_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_text_coords</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Get the coordinates of the text elements in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        text_coords : (N x D) np.ndarray</span>\n<span class=\"sd\">            Array of coordinates for the N text elements in view</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># TODO check if it is used, as it has wrong signature and this not cause errors.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">compute_text_coords</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Get the sizes of the points in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        view_size : (N x D) np.ndarray</span>\n<span class=\"sd\">            Array of sizes for the N points in view</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get the point sizes and scale for ndim display</span>\n            <span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span>\n                    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_size_scale</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if no points, return an empty list</span>\n            <span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([])</span>\n        <span class=\"k\">return</span> <span class=\"n\">sizes</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Get the face colors of the points in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        view_face_color : (N x 4) np.ndarray</span>\n<span class=\"sd\">            RGBA color array for the face colors of the N points in view.</span>\n<span class=\"sd\">            If there are no points in view, returns array of length 0.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_color</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Get the edge colors of the points in view</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        view_edge_color : (N x 4) np.ndarray</span>\n<span class=\"sd\">            RGBA color array for the edge colors of the N points in view.</span>\n<span class=\"sd\">            If there are no points in view, returns array of length 0.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_editable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">editable</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set editable mode based on layer properties.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">editable</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editable</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">PAN_ZOOM</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_slice_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dims_indices</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"Determines the slice of points given the indices.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        dims_indices : sequence of int or slice</span>\n<span class=\"sd\">            Indices to slice with.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        slice_indices : list</span>\n<span class=\"sd\">            Indices of points in the currently viewed slice.</span>\n<span class=\"sd\">        scale : float, (N, ) array</span>\n<span class=\"sd\">            If in `n_dimensional` mode then the scale factor of points, where</span>\n<span class=\"sd\">            values of 1 corresponds to points located in the slice, and values</span>\n<span class=\"sd\">            less than 1 correspond to points located in neighboring slices.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Get a list of the data for the points in this slice</span>\n        <span class=\"n\">not_disp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">)</span>\n        <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">dims_indices</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_dimensional</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">])</span>\n                <span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[:,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n                <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">distances</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sizes</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">size_match</span> <span class=\"o\">=</span> <span class=\"n\">sizes</span><span class=\"p\">[</span><span class=\"n\">matches</span><span class=\"p\">]</span>\n                <span class=\"n\">size_match</span><span class=\"p\">[</span><span class=\"n\">size_match</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">scale_per_dim</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">size_match</span> <span class=\"o\">-</span> <span class=\"n\">distances</span><span class=\"p\">[</span><span class=\"n\">matches</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">size_match</span>\n                <span class=\"n\">scale_per_dim</span><span class=\"p\">[</span><span class=\"n\">size_match</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">scale_per_dim</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">slice_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">slice_indices</span><span class=\"p\">,</span> <span class=\"n\">scale</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span>\n                <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">-</span> <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">])</span>\n                <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">distances</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1e-5</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">slice_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">slice_indices</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Value of the data at a position in data coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value : int or None</span>\n<span class=\"sd\">            Index of point that is at the current coordinate if any.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Display points if there are any in this slice</span>\n        <span class=\"n\">view_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span>\n        <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">displayed_position</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span>\n            <span class=\"c1\"># Get the point sizes</span>\n            <span class=\"n\">distances</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">view_data</span> <span class=\"o\">-</span> <span class=\"n\">displayed_position</span><span class=\"p\">)</span>\n            <span class=\"n\">in_slice_matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span>\n                <span class=\"n\">distances</span> <span class=\"o\">&lt;=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">expand_dims</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_size</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">in_slice_matches</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">[</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">selection</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_view_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Sets the view given the indices to slice with.\"\"\"</span>\n        <span class=\"c1\"># get the indices of points in view</span>\n        <span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_size_scale</span> <span class=\"o\">=</span> <span class=\"n\">scale</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)</span>\n        <span class=\"c1\"># get the selected points that are in view</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span><span class=\"p\">)),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">,</span>\n                <span class=\"n\">return_indices</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">highlight</span><span class=\"o\">.</span><span class=\"n\">blocker</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_highlight</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_highlight</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Render highlights of shapes including boundaries, vertices,</span>\n<span class=\"sd\">        interaction boxes, and the drag selection box when appropriate.</span>\n<span class=\"sd\">        Highlighting only occurs in Mode.SELECT.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        force : bool</span>\n<span class=\"sd\">            Bool that forces a redraw to occur when `True`</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Check if any point ids have changed since last call</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data_stored</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_stored</span>\n            <span class=\"ow\">and</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box_stored</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span><span class=\"p\">)</span>\n                <span class=\"c1\"># highlight the hovered point if not in adding mode</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span>\n                    <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">==</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span>\n                    <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_selecting</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">hover_point</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">hover_point</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">index</span><span class=\"p\">:</span>\n                        <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">hover_point</span><span class=\"p\">)</span>\n                <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># only highlight hovered points in select mode</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span>\n                    <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mode</span> <span class=\"o\">==</span> <span class=\"n\">Mode</span><span class=\"o\">.</span><span class=\"n\">SELECT</span>\n                    <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_selecting</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">hover_point</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span>\n                    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">hover_point</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_index</span> <span class=\"o\">=</span> <span class=\"n\">index</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_index</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># only display dragging selection box in 2D</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_selecting</span><span class=\"p\">:</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">create_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_box</span><span class=\"p\">)</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_highlight_box</span> <span class=\"o\">=</span> <span class=\"n\">pos</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">highlight</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update thumbnail with current points and colors.\"\"\"</span>\n        <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">)</span>\n        <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">view_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">de</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span>\n            <span class=\"n\">min_vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span>\n            <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">zoom_factor</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_max_points_thumbnail</span><span class=\"p\">:</span>\n                <span class=\"n\">thumbnail_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_data</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_max_points_thumbnail</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">view_data</span><span class=\"p\">[</span><span class=\"n\">thumbnail_indices</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">view_data</span>\n                <span class=\"n\">thumbnail_indices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices_view</span>\n            <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span>\n                <span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"o\">-</span> <span class=\"n\">min_vals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">zoom_factor</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n                <span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">thumbnail_indices</span><span class=\"p\">]</span>\n            <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"n\">coords</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">coords</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">colors</span>\n\n        <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">colormapped</span>\n\n<div class=\"viewcode-block\" id=\"Points.add\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.add\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">coord</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Adds point at coordinate.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        coord : sequence of indices to add point at</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">atleast_2d</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Points.remove_selected\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.remove_selected\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove_selected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Removes selected points if any.\"\"\"</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n        <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_remove</span><span class=\"p\">(</span><span class=\"n\">indices_to_remove</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_remove</span><span class=\"p\">(</span><span class=\"n\">indices_to_remove</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">coord</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Moves points relative drag start location.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        index : list</span>\n<span class=\"sd\">            Integer indices of points to move</span>\n<span class=\"sd\">        coord : tuple</span>\n<span class=\"sd\">            Coordinates to move points to</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"n\">disp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_start</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">disp</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_start</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">)[</span><span class=\"n\">disp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">center</span>\n            <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">disp</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">shift</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">coord</span><span class=\"p\">)[</span><span class=\"n\">disp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">center</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drag_start</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">disp</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">disp</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">shift</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_paste_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Paste any point from clipboard and select them.\"\"\"</span>\n        <span class=\"n\">npoints</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"p\">)</span>\n        <span class=\"n\">totpoints</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">not_disp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">])</span>\n            <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'indices'</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">not_disp</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'size'</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_paste</span><span class=\"p\">(</span>\n                <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'edge_color'</span><span class=\"p\">],</span>\n                <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'properties'</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face</span><span class=\"o\">.</span><span class=\"n\">_paste</span><span class=\"p\">(</span>\n                <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'face_color'</span><span class=\"p\">],</span>\n                <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'properties'</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'properties'</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]),</span>\n                    <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_view</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n                <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">npoints</span><span class=\"p\">,</span> <span class=\"n\">npoints</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]))</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_selected_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n                <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">totpoints</span><span class=\"p\">,</span> <span class=\"n\">totpoints</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]))</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_copy_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Copy selected points to clipboard.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selected_data</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]),</span>\n                <span class=\"s1\">'edge_color'</span><span class=\"p\">:</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]),</span>\n                <span class=\"s1\">'face_color'</span><span class=\"p\">:</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_color</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]),</span>\n                <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]),</span>\n                <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                <span class=\"p\">},</span>\n                <span class=\"s1\">'indices'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clipboard</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<div class=\"viewcode-block\" id=\"Points.to_mask\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Points.html#napari.layers.Points.to_mask\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to_mask</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span>\n        <span class=\"n\">data_to_world</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Affine</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">isotropic_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return a binary mask array of all the points as balls.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        shape : tuple</span>\n<span class=\"sd\">            The shape of the mask to be generated.</span>\n<span class=\"sd\">        data_to_world : Optional[Affine]</span>\n<span class=\"sd\">            The data-to-world transform of the output mask image. This likely comes from a reference image.</span>\n<span class=\"sd\">            If None, then this is the same as this layer's data-to-world transform.</span>\n<span class=\"sd\">        isotropic_output : bool</span>\n<span class=\"sd\">            If True, then force the output mask to always contain isotropic balls in data/pixel coordinates.</span>\n<span class=\"sd\">            Otherwise, allow the anisotropy in the data-to-world transform to squash the balls in certain dimensions.</span>\n<span class=\"sd\">            By default this is True, but you should set it to False if you are going to create a napari image</span>\n<span class=\"sd\">            layer from the result with the same data-to-world transform and want the visualized balls to be</span>\n<span class=\"sd\">            roughly isotropic.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        np.ndarray</span>\n<span class=\"sd\">            The output binary mask array of the given shape containing this layer's points as balls.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">data_to_world</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">data_to_world</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span>\n        <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">)</span>\n        <span class=\"n\">mask_world_to_data</span> <span class=\"o\">=</span> <span class=\"n\">data_to_world</span><span class=\"o\">.</span><span class=\"n\">inverse</span>\n        <span class=\"n\">points_data_to_mask_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">(</span>\n            <span class=\"n\">mask_world_to_data</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">points_in_mask_data_coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">atleast_2d</span><span class=\"p\">(</span>\n            <span class=\"n\">points_data_to_mask_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Calculating the radii of the output points in the mask is complex.</span>\n\n        <span class=\"c1\"># Points.size tells the size of the points in pixels in each dimension,</span>\n        <span class=\"c1\"># so we take the arithmetic mean across dimensions to define a scalar size</span>\n        <span class=\"c1\"># per point, which is consistent with visualization.</span>\n        <span class=\"n\">mean_radii</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n        <span class=\"c1\"># Scale each radius by the geometric mean scale of the Points layer to</span>\n        <span class=\"c1\"># keep the balls isotropic when visualized in world coordinates.</span>\n        <span class=\"c1\"># Then scale each radius by the scale of the output image mask</span>\n        <span class=\"c1\"># using the geometric mean if isotropic output is desired.</span>\n        <span class=\"c1\"># The geometric means are used instead of the arithmetic mean</span>\n        <span class=\"c1\"># to maintain the volume scaling factor of the transforms.</span>\n        <span class=\"n\">point_data_to_world_scale</span> <span class=\"o\">=</span> <span class=\"n\">gmean</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_to_world</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">))</span>\n        <span class=\"n\">mask_world_to_data_scale</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">gmean</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">mask_world_to_data</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">isotropic_output</span>\n            <span class=\"k\">else</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">mask_world_to_data</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">radii_scale</span> <span class=\"o\">=</span> <span class=\"n\">point_data_to_world_scale</span> <span class=\"o\">*</span> <span class=\"n\">mask_world_to_data_scale</span>\n\n        <span class=\"n\">output_data_radii</span> <span class=\"o\">=</span> <span class=\"n\">mean_radii</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">atleast_2d</span><span class=\"p\">(</span><span class=\"n\">radii_scale</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">radii</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span>\n            <span class=\"n\">points_in_mask_data_coords</span><span class=\"p\">,</span> <span class=\"n\">output_data_radii</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># Define a minimal set of coordinates where the mask could be present</span>\n            <span class=\"c1\"># by defining an inclusive lower and exclusive upper bound for each dimension.</span>\n            <span class=\"n\">lower_coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">coords</span> <span class=\"o\">-</span> <span class=\"n\">radii</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">upper_coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">coords</span> <span class=\"o\">+</span> <span class=\"n\">radii</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">shape</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Generate every possible coordinate within the bounds defined above</span>\n            <span class=\"c1\"># in a grid of size D1 x D2 x ... x Dd x D (e.g. for D=2, this might be 4x5x2).</span>\n            <span class=\"n\">submask_coords</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">lower_coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">upper_coords</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">submask_grids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">submask_coords</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">indexing</span><span class=\"o\">=</span><span class=\"s1\">'ij'</span><span class=\"p\">),</span>\n                <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"c1\"># Update the mask coordinates based on the normalized square distance</span>\n            <span class=\"c1\"># using a logical or to maintain any existing positive mask locations.</span>\n            <span class=\"n\">normalized_square_distances</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span>\n                <span class=\"p\">((</span><span class=\"n\">submask_grids</span> <span class=\"o\">-</span> <span class=\"n\">coords</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">radii</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=-</span><span class=\"mi\">1</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">submask_coords</span><span class=\"p\">)]</span> <span class=\"o\">|=</span> <span class=\"n\">normalized_square_distances</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">mask</span></div></div>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}