{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.layers.vectors.vectors","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.colormaps</span> <span class=\"kn\">import</span> <span class=\"n\">Colormap</span><span class=\"p\">,</span> <span class=\"n\">ValidColormapArg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.events.custom_types</span> <span class=\"kn\">import</span> <span class=\"n\">Array</span>\n<span class=\"kn\">from</span> <span class=\"nn\">...utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..base</span> <span class=\"kn\">import</span> <span class=\"n\">Layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils._color_manager_constants</span> <span class=\"kn\">import</span> <span class=\"n\">ColorMode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.color_manager</span> <span class=\"kn\">import</span> <span class=\"n\">ColorManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.color_transformations</span> <span class=\"kn\">import</span> <span class=\"n\">ColorType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.layer_utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_properties</span><span class=\"p\">,</span> <span class=\"n\">prepare_properties</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._vector_utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">,</span> <span class=\"n\">vectors_to_coordinates</span>\n\n\n<div class=\"viewcode-block\" id=\"Vectors\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Vectors.html#napari.layers.Vectors\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Vectors</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Vectors layer renders lines onto the canvas.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : (N, 2, D) or (N1, N2, ..., ND, D) array</span>\n<span class=\"sd\">        An (N, 2, D) array is interpreted as \"coordinate-like\" data and a</span>\n<span class=\"sd\">        list of N vectors with start point and projections of the vector in</span>\n<span class=\"sd\">        D dimensions. An (N1, N2, ..., ND, D) array is interpreted as</span>\n<span class=\"sd\">        \"image-like\" data where there is a length D vector of the</span>\n<span class=\"sd\">        projections at each pixel.</span>\n<span class=\"sd\">    properties : dict {str: array (N,)}, DataFrame</span>\n<span class=\"sd\">        Properties for each vector. Each property should be an array of length N,</span>\n<span class=\"sd\">        where N is the number of vectors.</span>\n<span class=\"sd\">    property_choices : dict {str: array (N,)}</span>\n<span class=\"sd\">        possible values for each property.</span>\n<span class=\"sd\">    edge_width : float</span>\n<span class=\"sd\">        Width for all vectors in pixels.</span>\n<span class=\"sd\">    length : float</span>\n<span class=\"sd\">         Multiplicative factor on projections for length of all vectors.</span>\n<span class=\"sd\">    edge_color : str</span>\n<span class=\"sd\">        Color of all of the vectors.</span>\n<span class=\"sd\">    edge_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to edge_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    edge_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set vector color if a continuous attribute is used to set edge_color.</span>\n<span class=\"sd\">    edge_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        Name of the layer.</span>\n<span class=\"sd\">    metadata : dict</span>\n<span class=\"sd\">        Layer metadata.</span>\n<span class=\"sd\">    scale : tuple of float</span>\n<span class=\"sd\">        Scale factors for the layer.</span>\n<span class=\"sd\">    translate : tuple of float</span>\n<span class=\"sd\">        Translation values for the layer.</span>\n<span class=\"sd\">    rotate : float, 3-tuple of float, or n-D array.</span>\n<span class=\"sd\">        If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">        angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">        pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">        assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">        np.degrees if needed.</span>\n<span class=\"sd\">    shear : 1-D array or n-D array</span>\n<span class=\"sd\">        Either a vector of upper triangular values, or an nD shear matrix with</span>\n<span class=\"sd\">        ones along the main diagonal.</span>\n<span class=\"sd\">    affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">        (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">        The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">        the final column is a length N translation vector and a 1 or a napari</span>\n<span class=\"sd\">        `Affine` transform object. Applied as an extra transform on top of the</span>\n<span class=\"sd\">        provided scale, rotate, and shear values.</span>\n<span class=\"sd\">    opacity : float</span>\n<span class=\"sd\">        Opacity of the layer visual, between 0.0 and 1.0.</span>\n<span class=\"sd\">    blending : str</span>\n<span class=\"sd\">        One of a list of preset blending modes that determines how RGB and</span>\n<span class=\"sd\">        alpha values of the layer visual get mixed. Allowed values are</span>\n<span class=\"sd\">        {'opaque', 'translucent', and 'additive'}.</span>\n<span class=\"sd\">    visible : bool</span>\n<span class=\"sd\">        Whether the layer visual is currently being displayed.</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : (N, 2, D) array</span>\n<span class=\"sd\">        The start point and projections of N vectors in D dimensions.</span>\n<span class=\"sd\">    properties : dict {str: array (N,)}, DataFrame</span>\n<span class=\"sd\">        Properties for each vector. Each property should be an array of length N,</span>\n<span class=\"sd\">        where N is the number of vectors.</span>\n<span class=\"sd\">    edge_width : float</span>\n<span class=\"sd\">        Width for all vectors in pixels.</span>\n<span class=\"sd\">    length : float</span>\n<span class=\"sd\">         Multiplicative factor on projections for length of all vectors.</span>\n<span class=\"sd\">    edge_color : str</span>\n<span class=\"sd\">        Color of all of the vectors.</span>\n<span class=\"sd\">    edge_color_cycle : np.ndarray, list</span>\n<span class=\"sd\">        Cycle of colors (provided as string name, RGB, or RGBA) to map to edge_color if a</span>\n<span class=\"sd\">        categorical attribute is used color the vectors.</span>\n<span class=\"sd\">    edge_colormap : str, napari.utils.Colormap</span>\n<span class=\"sd\">        Colormap to set vector color if a continuous attribute is used to set edge_color.</span>\n<span class=\"sd\">    edge_contrast_limits : None, (float, float)</span>\n<span class=\"sd\">        clims for mapping the property to a color map. These are the min and max value</span>\n<span class=\"sd\">        of the specified property that are mapped to 0 and 1, respectively.</span>\n<span class=\"sd\">        The default value is None. If set the none, the clims will be set to</span>\n<span class=\"sd\">        (property.min(), property.max())</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    _view_data : (M, 2, 2) array</span>\n<span class=\"sd\">        The start point and projections of N vectors in 2D for vectors whose</span>\n<span class=\"sd\">        start point is in the currently viewed slice.</span>\n<span class=\"sd\">    _view_face_color : (M, 4) np.ndarray</span>\n<span class=\"sd\">        colors for the M in view vectors</span>\n<span class=\"sd\">    _view_indices : (1, M) array</span>\n<span class=\"sd\">        indices for the M in view vectors</span>\n<span class=\"sd\">    _view_vertices : (4M, 2) or (8M, 2) np.ndarray</span>\n<span class=\"sd\">        the corner points for the M in view faces. Shape is (4M, 2) for 2D and (8M, 2) for 3D.</span>\n<span class=\"sd\">    _view_faces : (2M, 3) or (4M, 3) np.ndarray</span>\n<span class=\"sd\">        indices of the _mesh_vertices that form the faces of the M in view vectors.</span>\n<span class=\"sd\">        Shape is (2M, 2) for 2D and (4M, 2) for 3D.</span>\n<span class=\"sd\">    _property_choices : dict {str: array (N,)}</span>\n<span class=\"sd\">        Possible values for the properties in Vectors.properties.</span>\n<span class=\"sd\">    _mesh_vertices : (4N, 2) array</span>\n<span class=\"sd\">        The four corner points for the mesh representation of each vector as as</span>\n<span class=\"sd\">        rectangle in the slice that it starts in.</span>\n<span class=\"sd\">    _mesh_triangles : (2N, 3) array</span>\n<span class=\"sd\">        The integer indices of the `_mesh_vertices` that form the two triangles</span>\n<span class=\"sd\">        for the mesh representation of the vectors.</span>\n<span class=\"sd\">    _max_vectors_thumbnail : int</span>\n<span class=\"sd\">        The maximum number of vectors that will ever be used to render the</span>\n<span class=\"sd\">        thumbnail. If more vectors are present then they are randomly</span>\n<span class=\"sd\">        subsampled.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\"># The max number of vectors that will ever be used to render the thumbnail</span>\n    <span class=\"c1\"># If more vectors are present then they are randomly subsampled</span>\n    <span class=\"n\">_max_vectors_thumbnail</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">property_choices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_color_cycle</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_colormap</span><span class=\"o\">=</span><span class=\"s1\">'viridis'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_contrast_limits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n        <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"s1\">'translucent'</span><span class=\"p\">,</span>\n        <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">,</span>\n            <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">scale</span><span class=\"p\">,</span>\n            <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"n\">translate</span><span class=\"p\">,</span>\n            <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"n\">rotate</span><span class=\"p\">,</span>\n            <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"n\">shear</span><span class=\"p\">,</span>\n            <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span>\n            <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">opacity</span><span class=\"p\">,</span>\n            <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"n\">blending</span><span class=\"p\">,</span>\n            <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"n\">visible</span><span class=\"p\">,</span>\n            <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"n\">experimental_clipping_planes</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># events for non-napari calculations</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n            <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_color_mode</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save the vector style params</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span> <span class=\"o\">=</span> <span class=\"n\">edge_width</span>\n\n        <span class=\"c1\"># length attribute</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">length</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">vectors_to_coordinates</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">triangles</span> <span class=\"o\">=</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span> <span class=\"o\">=</span> <span class=\"n\">triangles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span> <span class=\"o\">=</span> <span class=\"n\">prepare_properties</span><span class=\"p\">(</span>\n            <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">property_choices</span><span class=\"p\">,</span> <span class=\"n\">num_data</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span> <span class=\"o\">=</span> <span class=\"n\">ColorManager</span><span class=\"o\">.</span><span class=\"n\">_from_layer_kwargs</span><span class=\"p\">(</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n            <span class=\"n\">continuous_colormap</span><span class=\"o\">=</span><span class=\"n\">edge_colormap</span><span class=\"p\">,</span>\n            <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"n\">edge_contrast_limits</span><span class=\"p\">,</span>\n            <span class=\"n\">categorical_colormap</span><span class=\"o\">=</span><span class=\"n\">edge_color_cycle</span><span class=\"p\">,</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Data containing vectors in the currently viewed slice</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_vertices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># now that everything is set up, make the layer visible (if set to visible)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"n\">visible</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(N, 2, D) array: start point and projections of vectors.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"nd\">@data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vectors</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">):</span>\n        <span class=\"n\">previous_n_vectors</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">vectors_to_coordinates</span><span class=\"p\">(</span><span class=\"n\">vectors</span><span class=\"p\">)</span>\n        <span class=\"n\">n_vectors</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">triangles</span> <span class=\"o\">=</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span> <span class=\"o\">=</span> <span class=\"n\">triangles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Adjust the props/color arrays when the number of vectors has changed</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">blocker_all</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">n_vectors</span> <span class=\"o\">&lt;</span> <span class=\"n\">previous_n_vectors</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If there are now fewer points, remove the size and colors of the</span>\n                    <span class=\"c1\"># extra ones</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">n_vectors</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_remove</span><span class=\"p\">(</span>\n                            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">n_vectors</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">))</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][:</span><span class=\"n\">n_vectors</span><span class=\"p\">]</span>\n\n                <span class=\"k\">elif</span> <span class=\"n\">n_vectors</span> <span class=\"o\">&gt;</span> <span class=\"n\">previous_n_vectors</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If there are now more points, add the size and colors of the</span>\n                    <span class=\"c1\"># new ones</span>\n                    <span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"n\">n_vectors</span> <span class=\"o\">-</span> <span class=\"n\">previous_n_vectors</span>\n\n                    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_property</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">adding</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span>\n                            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"n\">new_property</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"c1\"># add new colors</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_add</span><span class=\"p\">(</span><span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"n\">adding</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_dims</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_editable</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"dict {str: array (N,)}, DataFrame: Annotations for each point\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span>\n\n    <span class=\"nd\">@properties</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span> <span class=\"o\">=</span> <span class=\"n\">prepare_properties</span><span class=\"p\">(</span>\n            <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span> <span class=\"n\">num_data</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">DIRECT</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'property used for edge_color dropped'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_color_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">edge_color_name</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">edge_color_name</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'current_value'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">[</span><span class=\"n\">edge_color_name</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">property_choices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get dictionary of layer state.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        state : dict</span>\n<span class=\"sd\">            Dictionary of layer state.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_base_state</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">'length'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_width'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_color'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_color_cycle'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color_cycle</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_colormap'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_colormap</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s1\">'edge_contrast_limits'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_contrast_limits</span><span class=\"p\">,</span>\n                <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n                <span class=\"s1\">'property_choices'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Determine number of dimensions of the layer.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layer in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_data : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Convert from projections to endpoints using the current length</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n            <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">extrema</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"float: Width for all vectors in pixels.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span>\n\n    <span class=\"nd\">@edge_width</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_width</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span> <span class=\"o\">=</span> <span class=\"n\">edge_width</span>\n\n        <span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">triangles</span> <span class=\"o\">=</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_width</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span> <span class=\"o\">=</span> <span class=\"n\">triangles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"float: Multiplicative factor for length of all vectors.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span>\n\n    <span class=\"nd\">@length</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">length</span>\n\n        <span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">triangles</span> <span class=\"o\">=</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span> <span class=\"o\">=</span> <span class=\"n\">triangles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(1 x 4) np.ndarray: Array of RGBA edge colors (applied to all vectors)\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span>\n\n    <span class=\"nd\">@edge_color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"p\">:</span> <span class=\"n\">ColorType</span><span class=\"p\">):</span>\n        <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">get_current_properties</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_set_color</span><span class=\"p\">(</span>\n            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">edge_color</span><span class=\"p\">,</span>\n            <span class=\"n\">n_colors</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span>\n            <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n            <span class=\"n\">current_properties</span><span class=\"o\">=</span><span class=\"n\">current_properties</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Vectors.refresh_colors\"><a class=\"viewcode-back\" href=\"../../../../api/stable/napari.layers.Vectors.html#napari.layers.Vectors.refresh_colors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">update_color_mapping</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Calculate and update edge colors if using a cycle or color map</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        update_color_mapping : bool</span>\n<span class=\"sd\">            If set to True, the function will recalculate the color cycle map</span>\n<span class=\"sd\">            or colormap (whichever is being used). If set to False, the function</span>\n<span class=\"sd\">            will use the current color cycle map or color map. For example, if you</span>\n<span class=\"sd\">            are adding/modifying vectors and want them to be colored with the same</span>\n<span class=\"sd\">            mapping as the other vectors (i.e., the new vectors shouldn't affect</span>\n<span class=\"sd\">            the color cycle map or colormap), set update_color_mapping=False.</span>\n<span class=\"sd\">            Default value is False.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">_refresh_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">update_color_mapping</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ColorMode</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"str: Edge color setting mode</span>\n\n<span class=\"sd\">        DIRECT (default mode) allows each vector to be set arbitrarily</span>\n\n<span class=\"sd\">        CYCLE allows the color to be set via a color cycle over an attribute</span>\n\n<span class=\"sd\">        COLORMAP allows color to be set via a color map over an attribute</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_mode</span>\n\n    <span class=\"nd\">@edge_color_mode</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color_mode</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ColorMode</span><span class=\"p\">]):</span>\n        <span class=\"n\">edge_color_mode</span> <span class=\"o\">=</span> <span class=\"n\">ColorMode</span><span class=\"p\">(</span><span class=\"n\">edge_color_mode</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edge_color_mode</span> <span class=\"o\">==</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">DIRECT</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge_color_mode</span> <span class=\"o\">=</span> <span class=\"n\">edge_color_mode</span>\n        <span class=\"k\">elif</span> <span class=\"n\">edge_color_mode</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">CYCLE</span><span class=\"p\">,</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">COLORMAP</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n            <span class=\"k\">if</span> <span class=\"n\">color_property</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">:</span>\n                    <span class=\"n\">color_property</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">))</span>\n                    <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">get_current_properties</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_properties</span><span class=\"p\">,</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_property_choices</span><span class=\"p\">,</span>\n                        <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">),</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">color_property</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">color_property</span><span class=\"p\">],</span>\n                        <span class=\"s1\">'current_value'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span>\n                            <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"n\">color_property</span><span class=\"p\">]</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s1\">'edge_color property was not set, setting to: </span><span class=\"si\">{color_property}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">color_property</span><span class=\"o\">=</span><span class=\"n\">color_property</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s1\">'There must be a valid Points.properties to use </span><span class=\"si\">{edge_color_mode}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">edge_color_mode</span><span class=\"o\">=</span><span class=\"n\">edge_color_mode</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"c1\"># ColorMode.COLORMAP can only be applied to numeric properties</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">edge_color_mode</span> <span class=\"o\">==</span> <span class=\"n\">ColorMode</span><span class=\"o\">.</span><span class=\"n\">COLORMAP</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"n\">color_property</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'selected property must be numeric to use ColorMode.COLORMAP'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">color_mode</span> <span class=\"o\">=</span> <span class=\"n\">edge_color_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">edge_color_mode</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"list, np.ndarray :  Color cycle for edge_color.</span>\n<span class=\"sd\">        Can be a list of colors defined by name, RGB or RGBA</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span><span class=\"o\">.</span><span class=\"n\">fallback_color</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n    <span class=\"nd\">@edge_color_cycle</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_color_cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_color_cycle</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">categorical_colormap</span> <span class=\"o\">=</span> <span class=\"n\">edge_color_cycle</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Colormap</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Return the colormap to be applied to a property to get the edge color.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        colormap : napari.utils.Colormap</span>\n<span class=\"sd\">            The Colormap object.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span>\n\n    <span class=\"nd\">@edge_colormap</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_colormap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">:</span> <span class=\"n\">ValidColormapArg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">continuous_colormap</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_contrast_limits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"None, (float, float): contrast limits for mapping</span>\n<span class=\"sd\">        the edge_color colormap property to 0 and 1</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@edge_contrast_limits</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edge_contrast_limits</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contrast_limits</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">contrast_limits</span> <span class=\"o\">=</span> <span class=\"n\">contrast_limits</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_view_face_color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"(Mx4) np.ndarray : colors for the M in view vectors\"\"\"</span>\n        <span class=\"n\">face_color</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_color</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">face_color</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">face_color</span><span class=\"p\">,</span> <span class=\"n\">face_color</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">face_color</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_view_slice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Sets the view given the indices to slice with.\"\"\"</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">triangles</span> <span class=\"o\">=</span> <span class=\"n\">generate_vector_meshes</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)],</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edge_width</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span> <span class=\"o\">=</span> <span class=\"n\">triangles</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_displayed_stored</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_vertices</span>\n        <span class=\"n\">not_disp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_not_displayed</span><span class=\"p\">)</span>\n        <span class=\"n\">disp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">)</span>\n        <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_slice_indices</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">not_disp</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'int'</span><span class=\"p\">)</span>\n            <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">not_disp</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span> <span class=\"o\">=</span> <span class=\"n\">matches</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ix_</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">disp</span><span class=\"p\">)]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">keep_inds</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"n\">keep_inds</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">keep_inds</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ndisplay</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                    <span class=\"n\">keep_inds</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"n\">keep_inds</span><span class=\"p\">,</span>\n                            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">keep_inds</span><span class=\"p\">,</span>\n                        <span class=\"p\">],</span>\n                        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span><span class=\"p\">[</span><span class=\"n\">keep_inds</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh_triangles</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">disp</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_vertices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_vertices</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_faces</span> <span class=\"o\">=</span> <span class=\"n\">faces</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_thumbnail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update thumbnail with current vectors and colors.\"\"\"</span>\n        <span class=\"c1\"># calculate min vals for the vertices and pad with 0.5</span>\n        <span class=\"c1\"># the offset is needed to ensure that the top left corner of the</span>\n        <span class=\"c1\"># vectors corresponds to the top left corner of the thumbnail</span>\n        <span class=\"n\">de</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extent_data</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)[</span>\n            <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"p\">]</span>\n        <span class=\"c1\"># calculate range of values for the vertices and pad with 1</span>\n        <span class=\"c1\"># padding ensures the entire vector can be represented in the thumbnail</span>\n        <span class=\"c1\"># without getting clipped</span>\n        <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">de</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dims_displayed</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n        <span class=\"n\">zoom_factor</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">shape</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># vectors = copy(self._data_view[:, :, -2:])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_max_vectors_thumbnail</span><span class=\"p\">:</span>\n            <span class=\"n\">thumbnail_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span>\n                <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_max_vectors_thumbnail</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">vectors</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"p\">[</span><span class=\"n\">thumbnail_indices</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n            <span class=\"n\">thumbnail_color_indices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span><span class=\"p\">[</span><span class=\"n\">thumbnail_indices</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vectors</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n            <span class=\"n\">thumbnail_color_indices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view_indices</span>\n        <span class=\"n\">vectors</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">vectors</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"n\">vectors</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">vectors</span> <span class=\"o\">-</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">zoom_factor</span>\n        <span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span>\n            <span class=\"n\">downsampled</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">colormapped</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thumbnail_shape</span><span class=\"p\">)</span>\n        <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">edge_colors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edge</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">thumbnail_color_indices</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">ec</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">downsampled</span><span class=\"p\">,</span> <span class=\"n\">edge_colors</span><span class=\"p\">):</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">stop</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">))))</span>\n            <span class=\"n\">x_vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n            <span class=\"n\">y_vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">stop</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">x_vals</span><span class=\"p\">,</span> <span class=\"n\">y_vals</span><span class=\"p\">):</span>\n                <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">ec</span>\n        <span class=\"n\">colormapped</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opacity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">colormapped</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Value of the data at a position in data coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : tuple</span>\n<span class=\"sd\">            Position in data coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        value : None</span>\n<span class=\"sd\">            Value of the data at the coord.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}