{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"annotating videos with napari","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"annotating-videos-with-napari\">\n\n<p><strong>Note</strong>: this tutorial has been updated and is now compatible with napari &gt; 0.4.5 and magicgui &gt; 0.2.5. For details, see <a class=\"reference external\" href=\"https://github.com/napari/tutorials/pull/114\">this pull request</a>.</p>\n<p>In this tutorial, we will use napari (requires version 0.3.2 or greater) to make a simple GUI application for annotating points in videos.\nThis GUI could be useful for making annotations required to train algorithms for markless tracking of animals (e.g., <a class=\"reference external\" href=\"http://www.mousemotorlab.org/deeplabcut\">DeepLabCut</a>).\nIn this tutorial, we will cover creating and interacting with a Points layer with properties (i.e., labels for the points), connecting custom UI elements to events, and creating custom keybindings.</p>\n<p>At the end of this tutorial, we will have created a GUI for annotating points in videos that we can simply call by:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">im_path</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;path to directory with data&gt;/*.png'</span>\n<span class=\"n\">point_annotator</span><span class=\"p\">(</span><span class=\"n\">im_path</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'ear_l'</span><span class=\"p\">,</span> <span class=\"s1\">'ear_r'</span><span class=\"p\">,</span> <span class=\"s1\">'tail'</span><span class=\"p\">])</span>\n\n</pre></div>\n</div>\n<p>The resulting viewer looks like this (images from <a class=\"reference external\" href=\"https://www.nature.com/articles/s41593-018-0209-y\">Mathis et al., 2018</a>, downloaded from <a class=\"reference external\" href=\"https://github.com/DeepLabCut/DeepLabCut/tree/f21321ef8060c537f9df0ce9346189bda07701b5/examples/openfield-Pranav-2018-10-30/labeled-data/m4s1\">here</a>):</p>\n<p><img alt=\"image: point annotator demo\" src=\"../../_images/point_annotator_demo.gif\"></p>\n<p>You can explore the project in <a class=\"reference external\" href=\"https://github.com/kevinyamauchi/PointAnnotator\">this repository</a> or check out the main function below.\nWe will walk through the code in the following sections.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dask_image.imread</span> <span class=\"kn\">import</span> <span class=\"n\">imread</span>\n<span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">from</span> <span class=\"nn\">magicgui.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">ComboBox</span><span class=\"p\">,</span> <span class=\"n\">Container</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"n\">COLOR_CYCLE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'#1f77b4'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#ff7f0e'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#2ca02c'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#d62728'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#9467bd'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#8c564b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#e377c2'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#7f7f7f'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#bcbd22'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#17becf'</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_label_menu</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Create a label menu widget that can be added to the napari viewer dock</span>\n\n<span class=\"sd\">    Parameters:</span>\n<span class=\"sd\">    -----------</span>\n<span class=\"sd\">    points_layer : napari.layers.Points</span>\n<span class=\"sd\">        a napari points layer</span>\n<span class=\"sd\">    labels : List[str]</span>\n<span class=\"sd\">        list of the labels for each keypoint to be annotated (e.g., the body parts to be labeled).</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    label_menu : Container</span>\n<span class=\"sd\">        the magicgui Container with our dropdown menu widget</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># Create the label selection menu</span>\n    <span class=\"n\">label_menu</span> <span class=\"o\">=</span> <span class=\"n\">ComboBox</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'feature_label'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n    <span class=\"n\">label_widget</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">widgets</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">label_menu</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_label_menu</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update the label menu when the point selection changes\"\"\"</span>\n        <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">new_label</span> <span class=\"o\">!=</span> <span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">new_label</span>\n\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">update_label_menu</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">label_changed</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update the Points layer when the label menu selection changes\"\"\"</span>\n        <span class=\"n\">selected_label</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n        <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"n\">selected_label</span><span class=\"p\">])</span>\n        <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n\n    <span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">label_changed</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">label_widget</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">point_annotator</span><span class=\"p\">(</span>\n        <span class=\"n\">im_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Create a GUI for annotating points in a series of images.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    im_path : str</span>\n<span class=\"sd\">        glob-like string for the images to be labeled.</span>\n<span class=\"sd\">    labels : List[str]</span>\n<span class=\"sd\">        list of the labels for each keypoint to be annotated (e.g., the body parts to be labeled).</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">im_path</span><span class=\"p\">)</span>\n\n    <span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n    <span class=\"n\">points_layer</span> <span class=\"o\">=</span> <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_points</span><span class=\"p\">(</span>\n        <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">},</span>\n        <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s1\">'label'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_color_cycle</span><span class=\"o\">=</span><span class=\"n\">COLOR_CYCLE</span><span class=\"p\">,</span>\n        <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span>\n        <span class=\"n\">face_color</span><span class=\"o\">=</span><span class=\"s1\">'transparent'</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n        <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">edge_color_mode</span> <span class=\"o\">=</span> <span class=\"s1\">'cycle'</span>\n\n    <span class=\"c1\"># add the label menu widget to the viewer</span>\n    <span class=\"n\">label_widget</span> <span class=\"o\">=</span> <span class=\"n\">create_label_menu</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n    <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">label_widget</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">next_label</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Keybinding to advance to the next label with wraparound\"\"\"</span>\n        <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n        <span class=\"n\">current_label</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">current_label</span><span class=\"p\">)</span>\n        <span class=\"n\">new_ind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ind</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">new_ind</span><span class=\"p\">]</span>\n        <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">new_label</span><span class=\"p\">])</span>\n        <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">next_on_click</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Mouse click binding to advance the label when a point is added\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">'add'</span><span class=\"p\">:</span>\n            <span class=\"n\">next_label</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># by default, napari selects the point that was just added</span>\n            <span class=\"c1\"># disable that behavior, as the highlight gets in the way</span>\n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s1\">'add'</span>\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">mouse_drag_callbacks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">next_on_click</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">prev_label</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Keybinding to decrement to the previous label with wraparound\"\"\"</span>\n        <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n        <span class=\"n\">current_label</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">current_label</span><span class=\"p\">)</span>\n        <span class=\"n\">n_labels</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"n\">new_ind</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">ind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n_labels</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">n_labels</span>\n        <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">new_ind</span><span class=\"p\">]</span>\n        <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">new_label</span><span class=\"p\">])</span>\n        <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"point-annotator\">\n<h2>point_annotator()</h2>\n<p>We will create the GUI within a function called <code class=\"docutils literal notranslate\"><span class=\"pre\">point_annotator()</span></code>.\nWrapping the GUI creation in the function allows us to integrate it into other functions (e.g., a command line interface) and applications.\nSee below for the function definition.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">point_annotator</span><span class=\"p\">(</span>\n    <span class=\"n\">im_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Create a GUI for annotating points in a series of images.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    im_path : str</span>\n<span class=\"sd\">        glob-like string for the images to be labeled.</span>\n<span class=\"sd\">    labels : List[str]</span>\n<span class=\"sd\">        list of the labels for each keypoint to be annotated (e.g., the body parts to be labeled).</span>\n<span class=\"sd\">    \"\"\"</span>\n\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"loading-the-video\">\n<h2>Loading the video</h2>\n<p>First, we load the movie to be annotated.\nSince behavior movies can be quite long, we will use a lazy loading strategy (i.e., we will only load the frames as they are used).\nUsing <a class=\"reference external\" href=\"https://github.com/dask/dask-image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dask-image</span></code></a>, we can construct an object that we can pass to napari for lazy loading in just one line.\nFor more explanation on using dask to lazily load images in napari, see <a class=\"reference external\" href=\"https://napari.org/tutorials/applications/dask\">this</a> tutorial.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">im_path</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can then start the viewer.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n<span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"annotating-with-points\">\n<h2>Annotating with points</h2>\n<p>We will annotate the features of interest using points in a napari Points layer.\nEach feature will be given a different label so that we can track them across frames.\nTo achieve this, we will store the label in the <code class=\"docutils literal notranslate\"><span class=\"pre\">Points.properties</span></code> property in the ‘label’ key.\nWe will instantiate the <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code> layer without any points.\nHowever, we will initialize <code class=\"docutils literal notranslate\"><span class=\"pre\">Points.properties</span></code> with the property values we will be using to annotate the images.\nTo do so, we will define a properties dictionary with a key named <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code> and values <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>.\nThe key, ‘label’, is the name of the property we are storing which feature of interest each point corresponds with.\nThe values, ‘labels’, is the list of the names of the features we will be annotating (defined above in the “point_annotator()” section).</p>\n<p>We add the <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code> layer to the viewer using the <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.add_points()</span></code> method.\nAs discussed above, we will be storing which feature of interest each point corresponds to via the <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code> property we defined in the <code class=\"docutils literal notranslate\"><span class=\"pre\">properties</span></code> dictionary.\nTo visualize the feature each point represents, we set the edge color as a color cycle mapped to the <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code> property (<code class=\"docutils literal notranslate\"><span class=\"pre\">edge_color='label'</span></code>).</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"p\">}</span>\n<span class=\"n\">points_layer</span> <span class=\"o\">=</span> <span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">add_points</span><span class=\"p\">(</span>\n    <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"n\">properties</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s1\">'label'</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_color_cycle</span><span class=\"o\">=</span><span class=\"n\">COLOR_CYCLE</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span>\n    <span class=\"n\">face_color</span><span class=\"o\">=</span><span class=\"s1\">'transparent'</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_width</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that we set the <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_color_cycle</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">COLOR_CYCLE</span></code>.\nYou can define your own color cycle as a list of colors.\nThe colors can be defined as hex strings, standard color names or RGBA arrays.\nFor example, the <a class=\"reference external\" href=\"https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#category10\">category10 color palette</a> would be:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">COLOR_CYCLE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'#1f77b4'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#ff7f0e'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#2ca02c'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#d62728'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#9467bd'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#8c564b'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#e377c2'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#7f7f7f'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#bcbd22'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'#17becf'</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We set the points <code class=\"docutils literal notranslate\"><span class=\"pre\">ndim</span></code> to 3 so that the coordinates for the point annotations we add will be 3 dimensional (time + 2D).</p>\n<p>Finally, we set the edge color to a color cycle:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">edge_color_mode</span> <span class=\"o\">=</span> <span class=\"s1\">'cycle'</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"adding-a-gui-for-selecting-points\">\n<h2>Adding a GUI for selecting points</h2>\n<p>First, we will define a function  to create a GUI for select the labels for\npoints. The function <code class=\"docutils literal notranslate\"><span class=\"pre\">create_label_menu()</span></code> will take the points layer we created\nand the list of labels we will annotate with and return the label menu GUI.\nAdditionally, we will create and connect all the required callbacks to make the\nGUI interactive.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">create_label_menu</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Create a label menu widget that can be added to the napari viewer dock</span>\n\n<span class=\"sd\">    Parameters:</span>\n<span class=\"sd\">    -----------</span>\n<span class=\"sd\">    points_layer : napari.layers.Points</span>\n<span class=\"sd\">        a napari points layer</span>\n<span class=\"sd\">    labels : List[str]</span>\n<span class=\"sd\">        list of the labels for each keypoint to be annotated (e.g., the body parts to be labeled).</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    label_menu : Container</span>\n<span class=\"sd\">        the magicgui Container with our dropdown menu widget</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre></div>\n</div>\n<p>Within <code class=\"docutils literal notranslate\"><span class=\"pre\">create_label_menu()</span></code>, we will use magicgui to add a dropdown menu for selecting which the label for the point we are about to add or the point we have selected.\n<a class=\"reference external\" href=\"https://github.com/napari/magicgui\">magicgui</a> is a library from the napari team for building GUIs from functions and works by applying function decorators.\nTo make the a dropdown menu populated with the valid point labels, we simply create a magicgui <code class=\"docutils literal notranslate\"><span class=\"pre\">ComboBox</span></code>. We set the label (title) for the <code class=\"docutils literal notranslate\"><span class=\"pre\">ComboBox</span></code> with the <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code> keyword argument and we set the dropdown menu options via the <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> keyword argument. Recall that the labels names are passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">create_label_menu()</span></code> function as a list via the <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code> parameter. Next, we wrap the <code class=\"docutils literal notranslate\"><span class=\"pre\">label_menu</span></code> in a magicgui <code class=\"docutils literal notranslate\"><span class=\"pre\">Container</span></code> to finish our GUI widget.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Create the label selection menu</span>\n<span class=\"n\">label_menu</span> <span class=\"o\">=</span> <span class=\"n\">ComboBox</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'feature_label'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n<span class=\"n\">label_widget</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">widgets</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">label_menu</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>We then need to connect the dropdown menu (<code class=\"docutils literal notranslate\"><span class=\"pre\">label_menu</span></code>) to the points layer to ensure the menu selection is always synchronized to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Points</span></code> layer model.</p>\n<p>First, we define a function to update the label dropdown menu GUI when the value of the selected point or next point to be added is changed.\nOn the points layer, the property values of the next point to be added are stored in the <code class=\"docutils literal notranslate\"><span class=\"pre\">current_properties</span></code> property.\nThe points layer has an event that gets emitted when the <code class=\"docutils literal notranslate\"><span class=\"pre\">current_properties</span></code> property is changed (<code class=\"docutils literal notranslate\"><span class=\"pre\">points_layer.events.current_properties</span></code>).\nWe connect the function we created to the event so that <code class=\"docutils literal notranslate\"><span class=\"pre\">update_label_menu()</span></code> is called whenever <code class=\"docutils literal notranslate\"><span class=\"pre\">Points.current_property</span></code> is changed.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">update_label_menu</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Update the label menu when the point selection changes\"\"\"</span>\n    <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">new_label</span> <span class=\"o\">!=</span> <span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n        <span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">new_label</span>\n\n<span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_properties</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">update_label_menu</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we define a function to update the points layer if the selection in the labels dropdown menu is changed.\nSimilar to the points layer, the magicgui object has an event that gets emitted whenever the selected label is changed (<code class=\"docutils literal notranslate\"><span class=\"pre\">label_menu.changed</span></code>).\nTo ensure the points layer is updated whenever the GUI selection is changed, we connect <code class=\"docutils literal notranslate\"><span class=\"pre\">label_changed()</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">label_menu.changed</span></code> event.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">label_changed</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Update the Points layer when the label menu selection changes\"\"\"</span>\n    <span class=\"n\">selected_label</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n    <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"n\">selected_label</span><span class=\"p\">])</span>\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n\n<span class=\"n\">label_menu</span><span class=\"o\">.</span><span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">label_changed</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, we add the GUI created by magicgui to the napari viewer dock.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># add the label menu widget to the viewer</span>\n<span class=\"n\">label_widget</span> <span class=\"o\">=</span> <span class=\"n\">create_label_menu</span><span class=\"p\">(</span><span class=\"n\">points_layer</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">label_widget</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"keybindings-for-switching-labels\">\n<h2>Keybindings for switching labels</h2>\n<p>For convenience, we can also define functions to increment and decrement the currently selected label and bind them to key presses using the napari keybindings framework.</p>\n<p>First, we define a function to increment to the next label and decorate it with the viewer key binding decorator.\nThe decorator requires that we pass the key to bind the function to as a string and the decorated function should take an event as an input argument.\nIn this case, we are binding <code class=\"docutils literal notranslate\"><span class=\"pre\">next_label()</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code> key.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">next_label</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Keybinding to advance to the next label with wraparound\"\"\"</span>\n\n    <span class=\"c1\"># get the currently selected label</span>\n    <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n    <span class=\"n\">current_label</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># determine the index of that label in the labels list</span>\n    <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">current_label</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># increment the label with wraparound</span>\n    <span class=\"n\">new_ind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ind</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get the new label and assign it</span>\n    <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">new_ind</span><span class=\"p\">]</span>\n    <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">new_label</span><span class=\"p\">])</span>\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n</pre></div>\n</div>\n<p>We can do the same with another function that instead decrements the label with wraparound.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@viewer</span><span class=\"o\">.</span><span class=\"n\">bind_key</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">prev_label</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Keybinding to decrement to the previous label with wraparound\"\"\"</span>\n    <span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span>\n    <span class=\"n\">current_label</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">current_label</span><span class=\"p\">)</span>\n    <span class=\"n\">n_labels</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n    <span class=\"n\">new_ind</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">ind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n_labels</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">n_labels</span>\n    <span class=\"n\">new_label</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">new_ind</span><span class=\"p\">]</span>\n    <span class=\"n\">current_properties</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">new_label</span><span class=\"p\">])</span>\n    <span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">current_properties</span> <span class=\"o\">=</span> <span class=\"n\">current_properties</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"mousebinding-to-iterate-through-labels\">\n<h2>Mousebinding to iterate through labels</h2>\n<p>Like keybindings, we can also bind functions to mouse events such as clicking or dragging.\nHere, we create a function that will increment the label after a point is added (i.e., the mouse is clicked in the viewer canvas when in the point adding mode).\nThis is convenient for quickly adding all labels to a frame, as one can simply click each feature in order without having to manually swap labels.\nTo achieve this, we first check if the points layer is the the adding mode (<code class=\"docutils literal notranslate\"><span class=\"pre\">layer.mode</span> <span class=\"pre\">==</span> <span class=\"pre\">'add'</span></code>).\nIf so, we then reuse the next_label() function we defined above in the keybindings to increment the label.\nFinally,</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">next_on_click</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Mouse click binding to advance the label when a point is added\"\"\"</span>\n    <span class=\"c1\"># only do something if we are adding points</span>\n    <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">'add'</span><span class=\"p\">:</span>\n        <span class=\"n\">next_label</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># by default, napari selects the point that was just added</span>\n        <span class=\"c1\"># disable that behavior, as the highlight gets in the way</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>\n</div>\n<p>After creating the function, we then add it to the <code class=\"docutils literal notranslate\"><span class=\"pre\">points_layer</span></code> mouse drag callbacks.\nIn napari, clicking and dragging events are both handled under the <code class=\"docutils literal notranslate\"><span class=\"pre\">mouse_drag_callbacks</span></code>.\nFor more details on how mouse event callbacks work,\nsee the examples [<a class=\"reference external\" href=\"https://github.com/napari/napari/blob/master/examples/custom_mouse_functions.py\">1</a>, <a class=\"reference external\" href=\"https://github.com/napari/napari/blob/master/examples/mouse_drag_callback.py\">2</a>].</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># bind the callback to the mouse drag event</span>\n<span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">mouse_drag_callbacks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">next_on_click</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"using-the-gui\">\n<h2>Using the GUI</h2>\n<div class=\"section\" id=\"launching-the-gui\">\n<h3>Launching the GUI</h3>\n<p>Now that you’ve put it all together, you should be ready to test! You can call the function as shown below.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">im_path</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;path to directory with data&gt;/*.png'</span>\n\n<span class=\"n\">point_annotator</span><span class=\"p\">(</span><span class=\"n\">im_path</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'ear_l'</span><span class=\"p\">,</span> <span class=\"s1\">'ear_r'</span><span class=\"p\">,</span> <span class=\"s1\">'tail'</span><span class=\"p\">])</span>\n\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"saving-the-annotations\">\n<h3>Saving the annotations</h3>\n<p>Once we are happy with the annotations, we can save them to a CSV file using the builing CSV writer for the points layer.\nTo do so, first, select the “Points” layer in the layer list and then click “Save Selected layer(s)”  in the “File” menu or press control+S (cmd+S on Mac OS)  to bring up the file save dialog.\nFrom here you can enter the file path and save the annotation coordinates as a CSV.</p>\n<p><img alt=\"image: points save dialog\" src=\"../../_images/points_save_dialog.png\"></p>\n<p>Alternatively, we can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">points_layer.save()</span></code> method to save the coordinates from the points layer to a CSV file.\nWe can enter the command either in the script (e.g., bind a save function to a hot key) or the napari terminal.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">points_layer</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'path/to/file.csv'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./tutorials/applications\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#point-annotator","text":"point_annotator()"},{"href":"#loading-the-video","text":"Loading the video"},{"href":"#annotating-with-points","text":"Annotating with points"},{"href":"#adding-a-gui-for-selecting-points","text":"Adding a GUI for selecting points"},{"href":"#keybindings-for-switching-labels","text":"Keybindings for switching labels"},{"href":"#mousebinding-to-iterate-through-labels","text":"Mousebinding to iterate through labels"},{"href":"#using-the-gui","text":"Using the GUI"}]}},"__N_SSG":true}