{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Rendering in napari","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"rendering-in-napari\">\n\n<div class=\"section\" id=\"status\">\n<h2>Status</h2>\n<p>As of napari version 0.4.3 there are two opt-in experimental features\nrelated to rendering. They can be accessed by setting the environment\nvariables <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC=1</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE=1</span></code>. See the Guide on Rendering\nfor specific information about those two features. This document is more of\na general backgrounder on our approach to rendering.</p>\n</div>\n<div class=\"section\" id=\"framerate\">\n<h2>Framerate</h2>\n<p>The most common screen refresh rate is 60Hz, so most graphics applications\ntry to draw at least 60Hz as well. If napari renders at 60Hz then any\nmotion, for example from panning and zooming the camera, will appear\nsmooth. If 60Hz cannot be achieved, however, it’s important that napari\nrender as fast as possible. The user experience degrades rapidly as the\nframerate gets slower:</p>\n<table class=\"colwidths-auto docutils align-default\">\n<thead>\n<tr class=\"row-odd\"><th class=\"text-align:right head\"><p>Framerate</p></th>\n<th class=\"text-align:right head\"><p>Milliseconds</p></th>\n<th class=\"text-align:left head\"><p>User Experience</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td class=\"text-align:right\"><p>60Hz</p></td>\n<td class=\"text-align:right\"><p>16.7</p></td>\n<td class=\"text-align:left\"><p>Great</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:right\"><p>30Hz</p></td>\n<td class=\"text-align:right\"><p>33.3</p></td>\n<td class=\"text-align:left\"><p>Good</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:right\"><p>20Hz</p></td>\n<td class=\"text-align:right\"><p>50</p></td>\n<td class=\"text-align:left\"><p>Acceptable</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:right\"><p>10Hz</p></td>\n<td class=\"text-align:right\"><p>100</p></td>\n<td class=\"text-align:left\"><p>Bad</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:right\"><p>5Hz</p></td>\n<td class=\"text-align:right\"><p>200</p></td>\n<td class=\"text-align:left\"><p>Unusable</p></td>\n</tr>\n</tbody>\n</table>\n<p>The issue is not just aesthetic. Manipulating user interface elements like\nsliders becomes almost impossible if the framerate is really slow. This\ncreates a deeply frustrating experience for the user. Furthermore, if\nnapari “blocks” for several seconds, the operating system might indicate to\nthe user that the application is hung or has crashed. For example MacOS\nwill show the “spinning wheel of death”. This is clearly not acceptable.</p>\n<p>A fast average framerate is important, but it’s also important that napari\nhas as few isolated slow frames as possible. A framerate that jumps around\nleads to something called <a class=\"reference external\" href=\"http://jankfree.org/\">jank</a>. For the best user\nexperience we want a framerate that’s fast, but also one that’s\nconsistently fast.</p>\n</div>\n<div class=\"section\" id=\"array-like-interface\">\n<h2>Array-like Interface</h2>\n<p>Napari renders data out of an array-like interface. The data can be owned\nby any object that supports <code class=\"docutils literal notranslate\"><span class=\"pre\">numpy</span></code>’s slicing syntax. One common such\nobject is a <a class=\"reference external\" href=\"https://dask.org/\">Dask</a> array. The fact that napari can\nrender out of any array-like data is flexible and powerful, but it means\nthat simple array accesses can result in the execution of arbitrary code.\nFor example, an array access might result disk IO or network IO, or even a\ncomplex machine learning computation. This means array accesses can take an\narbitrary long time to complete.</p>\n</div>\n<div class=\"section\" id=\"asynchronous-rendering\">\n<h2>Asynchronous Rendering</h2>\n<p>Since we don’t know how long an array access will take, and we never want\nthe GUI thread to block, we cannot access array-like objects in the GUI\nthread. Instead, napari’s rendering has to be done <em>asynchronously</em>. This\nmeans rendering proceeds at full speed drawing only the data which is in\nmemory ready to be drawn, while in the background worker threads load more\ndata into memory to be drawn in the future.</p>\n<p>This necessarily means that napari will sometimes have to draw data that’s\nonly partially loaded. For example, napari might have to show a lower\nresolution version of the data, such that the data appears blurry until the\nrest of the data has loaded in. There might even be totally blank portions\nof the screen.</p>\n<p>Although showing the user partial data is not ideal, it’s vastly better\nthan letting the GUI thread block and napari hang. If napari stays\nresponsive the user stays in control. The user can sit still and watch the\ndata load in, or they can navigate somewhere else entirely, they are free\nto choose.</p>\n<p>Issues that napari has without asynchronous rendering include\n<a class=\"reference external\" href=\"https://github.com/napari/napari/issues/845\">#845</a>,\n<a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1300\">#1300</a>, and\n<a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1320%5D\">#1320</a>.</p>\n</div>\n<div class=\"section\" id=\"ram-and-vram\">\n<h2>RAM and VRAM</h2>\n<p>There is a two step process to prepare data for rendering. First the data\nneeds to be loaded in RAM, then it needs to be transferred from RAM to\nVRAM. Some hardware has “unified memory” where there is no actual VRAM, but\nthere is still a change of status when data goes from raw bytes in RAM to a\ngraphics “resource” like a texture or geometry that can be drawn.</p>\n<p>The transfer of data from RAM to VRAM must be done in the GUI thread.\nWorker threads are useful for loading data into RAM in the background, but\nwe cannot load data into VRAM in the background. Therefore to prevent\nhurting the framerate we need to budget how much time is spent copying data\ninto VRAM, we can only do it for a few milliseconds per frame.</p>\n<p><img alt=\"paging-chunks\" src=\"../../_images/paging-chunks.png\"></p>\n</div>\n<div class=\"section\" id=\"chunks\">\n<h2>Chunks</h2>\n<p>For paging into both RAM and VRAM it’s a requirement that the data napari\nrenders is broken down into “chunks”. A chunk is a deliberately vague term\nfor a portion of the data that napari can load and render independently.</p>\n<p>The chunk size needs to be small enough that the renderer can at least load\none chunk per frame into VRAM without a framerate glitch, so that over time\nall chunks can be loaded into VRAM smoothly. However using chunks that are\ntoo small is wasteful, since there is some overhead for each chunk.</p>\n<p>Napari’s chunks play a similar role as do packets on a network or blocks on\na disk. In all cases the goal is to break down large data into digestible\npieces of that can be processed smoothly one at a time.</p>\n</div>\n<div class=\"section\" id=\"renderer-requirements\">\n<h2>Renderer Requirements</h2>\n<p>The above discussion leads to two rigid requirements for rendering:</p>\n<ol class=\"simple\">\n<li><p>Never call <code class=\"docutils literal notranslate\"><span class=\"pre\">asarray</span></code> on user data from the GUI thread, since we don’t know\nwhat it will do or how long it will take.</p></li>\n<li><p>Always break data into chunks. The exact maximum chunk size is TBD.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"render-algorithm\">\n<h2>Render Algorithm</h2>\n<p>The renderer computes a <strong>working set</strong> of chunks based on the current\nview. The working set is the set of chunks that we want to draw in order to\ndepict the current view of the data. The renderer will step through every\nchunk in the working set and do one of these three things:</p>\n<table class=\"colwidths-auto docutils align-default\">\n<thead>\n<tr class=\"row-odd\"><th class=\"text-align:left head\"><p>Case</p></th>\n<th class=\"text-align:left head\"><p>Action</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p>Chunk is in VRAM</p></td>\n<td class=\"text-align:left\"><p>Render the chunk</p></td>\n</tr>\n<tr class=\"row-odd\"><td class=\"text-align:left\"><p>Chunk is in RAM but not VRAM</p></td>\n<td class=\"text-align:left\"><p>Transfer the chunk to VRAM if there is time</p></td>\n</tr>\n<tr class=\"row-even\"><td class=\"text-align:left\"><p>Chunk is not in RAM</p></td>\n<td class=\"text-align:left\"><p>Ask the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> to load the chunk</p></td>\n</tr>\n</tbody>\n</table>\n<p>The important thing about this algorithm is that it never blocks. It draws\nwhat it can draw without blocking, and then it loads more data so that it\ncan draw more in the future.</p>\n<div class=\"section\" id=\"chunked-file-formats\">\n<h3>Chunked File Formats</h3>\n<p>Napari’s rendering chunks will often correspond to blocks of contiguous\nmemory inside a chunked file format like\n<a class=\"reference external\" href=\"https://zarr.readthedocs.io/en/stable/\">Zarr</a>, and exposed by an API like\nDask. The purpose of a chunked file format is to spatially organize the\ndata so that one chunk can be read with one single read operation.</p>\n<p><img alt=\"chunked-format\" src=\"../../_images/chunked-format.png\"></p>\n<p>For 2D images “chunks” are 2D tiles. For 3D images the chunks are 3D\nsub-volumes.\n<a class=\"reference external\" href=\"https://opensource.google/projects/neuroglancer\">Neuroglancer</a> recommends\nthat data is stored in 64x64x64 chunks, which means that each chunk\ncontains 262,144 voxels. Those 256k voxels can be read with one read\noperation. Using cubic chunks is nice because you get the same performance\nwhether you are viewing the data in XY, XZ or YZ orientations. It’s also\nnice because you can scroll through slices quickly since on average 32\nslices above and below your current location are already in RAM.</p>\n</div>\n<div class=\"section\" id=\"render-chunks\">\n<h3>Render Chunks</h3>\n<p>If a chunked file format is available, and those chunks are reasonably\nsized, then Napari can use those chunks for rendering. If chunks are not\navailable, for example with issue\n<a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1300\">#1300</a>, or the chunks are\ntoo large, then Napari will have to break the data into potentially smaller\n“render chunks”.</p>\n<p>Note that with issue <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1320\">#1320</a>\nthe images are small so they are not chunked, but in that issue there are 3\nimage <strong>layers</strong> per slice. In that case the <em>image layers are our chunks</em>.\nIn general we can get creative with chunks, they can be spatial or\nnon-spatial subdivisions. As long as something can be loaded and drawn\nindependently it can be a chunk.</p>\n</div>\n</div>\n<div class=\"section\" id=\"example-computed-layers\">\n<h2>Example: Computed Layers</h2>\n<p>In <a class=\"reference external\" href=\"https://github.com/napari/napari/issues/1320\">#1320</a> the images are not\nchunked since they are very small, but there are 3 layers per slice. These\nper-slice layers are our chunks. Two layers are coming off disk quickly,\nwhile one layer is computed, and that can take some time.</p>\n<p>Without asynchronous rendering we did not draw any of the layers until the\nslowest one was computed. With asynchronous rendering the user can scroll\nthrough the paged layers quickly, and then pause a bit to allow the\ncomputed layer to load in. Asynchronous rendering greatly improves the\nuser’s experience in this case.</p>\n<p><img alt=\"example-1320\" src=\"../../_images/example-1320.png\"></p>\n</div>\n<div class=\"section\" id=\"octree\">\n<h2>Octree</h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_ASYNC</span></code> flag enables the experimental <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> which\nimplements asynchronous loading. One step beyond this is <code class=\"docutils literal notranslate\"><span class=\"pre\">NAPARI_OCTREE</span></code>\nwhich replaces the regular <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> class with a new class called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code>, and replaces the <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageVisual</span></code> with a new <code class=\"docutils literal notranslate\"><span class=\"pre\">TiledImageVisual</span></code>.</p>\n<p>The advantage of <code class=\"docutils literal notranslate\"><span class=\"pre\">OctreeImage</span></code> over <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> is that it renders multi-scale\nimages using tiles. This is much more efficient that one <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> did\nparticularly for remote data.</p>\n<p>An Octree is a hierarchical spatial subdivision datastructure. See Apple’s\nnice <a class=\"reference external\" href=\"https://developer.apple.com/documentation/gameplaykit/gkoctree\">illustration of an\noctree</a>:</p>\n<p><img alt=\"octree\" src=\"../../_images/octree.png\"></p>\n<p>Each level of the Octree contains a depiction of the entire dataset, but at\na different level of detail. In napari we call the data at full resolution\nlevel 0. Level 1 is the entire data again, but downsampled by half, and so\non for each level. The highest level is typically the first level where the\ndownsampled data fits into a single tile.</p>\n<p>For 2D images the Octree is really just a Quadtree, but the intent is that\nwe’ll have one set of Octree code that can be used for 2D images or 3D\nvolumes. So we use the name Octree in the code for both cases.</p>\n<p>A key property of the Octree is that if the user is looking at the data at\none level of detail, it’s trivial to find the same data at a higher or\nlower level of detail. The data is spatially organized so it’s fast and\neasy to jump from one level fo detail to another.</p>\n</div>\n<div class=\"section\" id=\"sparse-octree\">\n<h2>Sparse Octree</h2>\n<p>Napari does not construct or maintain an Octree for the whole dataset. The\nOctree is created on the fly only for the portion of the data napari is\nrendering. For some datasets level 0 of the Octree contains tens of\nmillions of chunks. No matter how little data we stored per chunk, it would\nbe slow and wasteful to create an octree that contains all of the data. So\nwe only create the Octree where the camera is actively looking.</p>\n</div>\n<div class=\"section\" id=\"beyond-images\">\n<h2>Beyond Images</h2>\n<p>Images are the marquee data type for napari, but napari can also display\ngeometry such as points, shapes and meshes. The <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> and Octree\nwill be used for all layer types, but there will be additional challenges\nto make things work with non-image layers:</p>\n<ol class=\"simple\">\n<li><p>Downsampling images is fast and well understood, but “downsampling”\ngeometry is called decimation and it can be slow and complicated. Also\nthere is not one definitive decimation, there will be trade-offs between\nspeed and quality.</p></li>\n<li><p>Sometimes we will to want downsample geometry into a format that\nrepresents the data but does not look like the data. For example we\nmight want to display a heatmap instead of millions of tiny points. This\nwill require new code we did not need for the image layers.</p></li>\n<li><p>With images the data density is spatially uniform but with geometry\nthere might be pockets of super high density data. For example the data\nmight have millions of points or triangles in a tiny geographic area.\nThis might tax the rendering in new ways that images did not.</p></li>\n</ol>\n</div>\n<div class=\"section\" id=\"appendix\">\n<h2>Appendix</h2>\n<div class=\"section\" id=\"a-threads-and-processes\">\n<h3>A. Threads and Processes</h3>\n<p>By default the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChunkLoader</span></code> uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> thread pool.\nThreads are fast and simple and well understood. All threads in a process\ncan access the same process memory, so nothing needs to be serialized or\ncopied.</p>\n<p>However, a drawback of using threads in Python is that only one thread can\nhold the <a class=\"reference external\" href=\"https://medium.com/python-features/pythons-gil-a-hurdle-to-multithreaded-program-d04ad9c1a63\">Global Interpreter Lock\n(GIL)</a>\nat a time. This means two threads cannot execute Python code at the same\ntime.</p>\n<p>This is not as bad as it sounds, because quite often Python threads will\nrelease the GIL when doing IO or compute-intensive operations, if those\noperations are implemented in C/C++. Many scipy packages do their heaviest\ncomputations in C/C++. If the GIL is released those threads <em>can</em> run\nsimultaneously, since Python threads are first-class Operating Systems\nthreads.</p>\n<p>However, if you do need to run Python bytecode fully in parallel, it might\nbe necessary to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> process pool instead of a thread\npool. One downside of using processes is that memory is not shared between\nprocesses by default, so the arguments to and from the worker process need\nto be serialized, and not all objects can be easily serialized.</p>\n<p>The Dask developers have extensive experience with serialization, and their\nlibrary contains it’s own serialization routines. Long term we might decide\nthat napari should only support thread pools, and if you need processes you\nshould use napari with Dask. Basically, we might outsource multi-processing\nto Dask. How exactly napari will interoperate with Dask is to be\ndetermined.</p>\n</div>\n<div class=\"section\" id=\"b-number-of-workers\">\n<h3>B. Number of Workers</h3>\n<p>How many worker threads or processes should we use? The optimal number will\nobviously depend on the hardware, but it also might depend on the workload.\nOne thread per core is a reasonable starting point, but a different number\nof workers might be more efficient in certain situations. Our goal is to\nhave reasonable defaults that most users can live with, but provide\nconfiguration settings for expert users to adjust if needed.</p>\n</div>\n<div class=\"section\" id=\"c-asyncio\">\n<h3>C. asyncio</h3>\n<p>Python also has a newer concurrency mechanism called\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a> which is\ndifferent from threads or processes, <code class=\"docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> tasks are similar to\nco-routines in other languages. The advantage of asyncio tasks is they are\n<em>much</em> lighter weight than threads.</p>\n<p>For example, in theory you can have tens of thousands of concurrent\n<code class=\"docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> tasks in progress at the same time. They generally don’t run in\nparallel, but they can all be in progress in various states of completion\nand worked on round-robin. While we have no current plans to use <code class=\"docutils literal notranslate\"><span class=\"pre\">asyncio</span></code>\nfor rendering, we should keep in mind that it exists and it might be\nsomething we can use down the road.</p>\n</div>\n<div class=\"section\" id=\"d-vram-and-vispy\">\n<h3>D. VRAM and Vispy</h3>\n<p>With OpenGL you cannot directly manage VRAM. Instead we will implicitly\ncontrol what’s in VRAM based on what <a class=\"reference external\" href=\"http://vispy.org/\">vispy</a> objects\nexist and what objects we are drawing.</p>\n<p>For example, if we page data into memory, but do not draw it, then it’s in\nRAM but it’s not in VRAM. If we then create a vispy object for that chunk\nand draw it, the data needed to draw that chunk will necessarily be put\ninto VRAM by <code class=\"docutils literal notranslate\"><span class=\"pre\">vispy</span></code> and OpenGL.</p>\n<p>Since it takes time to copy data into VRAM, we may need to throttle how\nmany new vispy objects we create each frame. For example, we might find\nthat we can only draw two or three new chunks per frame. So if we load ten\nchunks, we might need to page that data into VRAM over four or five frames.</p>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./guides/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#status","text":"Status"},{"href":"#framerate","text":"Framerate"},{"href":"#array-like-interface","text":"Array-like Interface"},{"href":"#asynchronous-rendering","text":"Asynchronous Rendering"},{"href":"#ram-and-vram","text":"RAM and VRAM"},{"href":"#chunks","text":"Chunks"},{"href":"#renderer-requirements","text":"Renderer Requirements"},{"href":"#render-algorithm","text":"Render Algorithm"},{"href":"#example-computed-layers","text":"Example: Computed Layers"},{"href":"#octree","text":"Octree"},{"href":"#sparse-octree","text":"Sparse Octree"},{"href":"#beyond-images","text":"Beyond Images"},{"href":"#appendix","text":"Appendix"}]}},"__N_SSG":true}