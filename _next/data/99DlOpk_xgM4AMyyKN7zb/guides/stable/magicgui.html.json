{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Using magicgui in napari","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"},{"src":"https://unpkg.com/thebe@0.5.1/lib/index.js"},{"children":"\n        const thebe_selector = \".thebe\"\n        const thebe_selector_input = \"pre\"\n        const thebe_selector_output = \".output\"\n    "},{"src":"/_static/sphinx-thebe.js"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../\"></div>\n        <div class=\"section\" id=\"using-magicgui-in-napari\">\n<span id=\"magicgui\"></span>\n<div class=\"section\" id=\"id1\">\n<h2>magicgui<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">¶</a></h2>\n<p><a class=\"reference external\" href=\"https://github.com/napari/magicgui\" target=\"_blank\" rel=\"noreferrer\">magicgui</a> is a python package that assists\nin building small, composable graphical user interfaces (widgets). It is a general\nabstraction layer on GUI toolkit backends (like Qt), with an emphasis on mapping\npython types to widgets.  In particular, it makes building widgets to represent\nfunction inputs easy:</p>\n<div class=\"cell docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">magicgui</span> <span class=\"kn\">import</span> <span class=\"n\">magicgui</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"nd\">@magicgui</span><span class=\"p\">(</span>\n    <span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"s2\">\"Calculate\"</span><span class=\"p\">,</span>\n    <span class=\"n\">slider_float</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"widget_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FloatSlider\"</span><span class=\"p\">,</span> <span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n    <span class=\"n\">dropdown</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"choices\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">]},</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">widget_demo</span><span class=\"p\">(</span>\n    <span class=\"n\">maybe</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"n\">some_int</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">spin_float</span><span class=\"o\">=</span><span class=\"mf\">3.14159</span><span class=\"p\">,</span>\n    <span class=\"n\">slider_float</span><span class=\"o\">=</span><span class=\"mf\">4.5</span><span class=\"p\">,</span>\n    <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s2\">\"Text goes here\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dropdown</span><span class=\"o\">=</span><span class=\"s1\">'first'</span><span class=\"p\">,</span>\n    <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span>\n    <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/some/path.ext'</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">widget_demo</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>For more information on the features and usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code>, see the <a class=\"reference external\" href=\"https://napari.org/magicgui\" target=\"_blank\" rel=\"noreferrer\">magicgui\ndocumentation</a>.  <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> does not require\nnapari, but napari <em>does</em> provide support for using magicgui within napari. The\npurpose of this page is to document some of the conveniences provided by napari\nwhen using <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> with napari-specific type annotations.</p>\n</div>\n<div class=\"section\" id=\"magicgui-and-type-annotations\">\n<h2>magicgui and type annotations<a class=\"headerlink\" href=\"#magicgui-and-type-annotations\" title=\"Permalink to this headline\">¶</a></h2>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> uses <a class=\"reference external\" href=\"https://www.python.org/dev/peps/pep-0484/\" target=\"_blank\" rel=\"noreferrer\">type hints</a> to infer\nthe appropriate widget type for a given function parameter, and to indicate a\ncontext-dependent action for the object returned from the function (in the\nabsence of a type hint, the type of the default value will be used).  Third\nparty packages (like <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> in this case) may provide support for their types\nusing\n<a class=\"reference external\" href=\"https://napari.org/magicgui/usage/types_widgets.html#register-type\" target=\"_blank\" rel=\"noreferrer\"><code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui.register_type</span></code></a>.\nThis is how using the type annotations described below leads to widgets and/or\n“actions” in napari.</p>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>All of the type annotations described below <em>require</em> that the resulting widget\nbe added to a napari viewer (either via <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.window.add_dock_widget</span></code>, or\nby providing a magicgui-based widget via the <a class=\"reference internal\" href=\"../../plugins/stable/hook_specifications.html#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\" title=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_experimental_provide_dock_widget()</span></code></a> plugin hook specification).</p>\n</div>\n</div>\n<div class=\"section\" id=\"parameter-annotations\">\n<h2>Parameter Annotations<a class=\"headerlink\" href=\"#parameter-annotations\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following napari types may be used as <em>parameter</em> type annotations in\nmagicgui functions to get information from the napari viewer into your\nmagicgui function. The consequence of each type annotation is described below:</p>\n<ul class=\"simple\">\n<li><p>any napari <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> type, such as\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> or <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Points.html#napari.layers.Points\" title=\"napari.layers.Points\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Points</span></code></a></p></li>\n<li><p>any of the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;LayerType&gt;Data</span></code> types from <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#module-napari.types\" title=\"napari.types\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">napari.types</span></code></a>, such as\n<a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.ImageData\" title=\"napari.types.ImageData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.ImageData</span></code></a> or  <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LabelsData\" title=\"napari.types.LabelsData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.LabelsData</span></code></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer\" title=\"napari.Viewer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">napari.Viewer</span></code></a></p></li>\n</ul>\n<div class=\"section\" id=\"annotating-as-a-layer-subclass\">\n<h3>Annotating as a <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer</span></code> subclass<a class=\"headerlink\" href=\"#annotating-as-a-layer-subclass\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you annotate one of your function parameters as a\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> subclass (such as <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> or\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Points.html#napari.layers.Points\" title=\"napari.layers.Points\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Points</span></code></a>), it will be rendered as a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ComboBox</span></code> widget (i.e. “dropdown menu”), where the\noptions in the dropdown box are the layers of the corresponding type currently\nin the viewer.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Image</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something with whatever image layer the user has selected</span>\n    <span class=\"c1\"># note: it *may* be None! so your function should handle the null case</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Here’s a complete example:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"nd\">@magicgui</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"s1\">'Pick an Image'</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Image</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"My Image\"</span><span class=\"p\">)</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">my_widget</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p><em>Note the widget at the bottom with “My Image” as the currently selected option</em></p>\n<div class=\"cell tag_remove-input docutils container\">\n</div>\n</div>\n<div class=\"section\" id=\"annotating-as-layer\">\n<h3>Annotating as <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer</span></code><a class=\"headerlink\" href=\"#annotating-as-layer\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the previous example, the dropdown menu will <em>only</em> show\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> layers, because the parameter was annotated as an\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a>.  If you’d like a dropdown menu that allows the\nuser to pick from <em>all</em> layers in the layer list, annotate your parameter as\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Layer</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">Layer</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something with whatever layer the user has selected</span>\n    <span class=\"c1\"># note: it *may* be None! so your function should handle the null case</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"annotating-as-napari-types-data\">\n<h3>Annotating as <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.types.*Data</span></code><a class=\"headerlink\" href=\"#annotating-as-napari-types-data\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the previous example, the object passed to your function will be the actual\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> instance, meaning you will need to access any\nattributes (like <code class=\"docutils literal notranslate\"><span class=\"pre\">layer.data</span></code>) on your own.  If your function is designed to\naccept a numpy array, you can use any of the special <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;LayerType&gt;Data</span></code> types\nfrom <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#module-napari.types\" title=\"napari.types\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">napari.types</span></code></a> to indicate that you only want the data attribute from\nthe layer (where <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;LayerType&gt;</span></code> is one of the available layer types).  Here’s an\nexample using <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.ImageData\" title=\"napari.types.ImageData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.ImageData</span></code></a></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.types</span> <span class=\"kn\">import</span> <span class=\"n\">ImageData</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">ImageData</span><span class=\"p\">):</span>\n    <span class=\"c1\"># note: it *may* be None! so your function should handle the null case</span>\n    <span class=\"k\">if</span> <span class=\"n\">array</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n      <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">)</span>  <span class=\"c1\"># it will be!</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"annotating-as-napari-viewer\">\n<h3>Annotating as <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.Viewer</span></code><a class=\"headerlink\" href=\"#annotating-as-napari-viewer\" title=\"Permalink to this headline\">¶</a></h3>\n<p>Lastly, if you need to access the actual <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Viewer</span></code> instance\nin which the widget is docked, you can annotate one of your parameters as a\n<a class=\"reference internal\" href=\"../../api/stable/napari.Viewer.html#napari.Viewer\" title=\"napari.Viewer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">napari.Viewer</span></code></a>.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari</span> <span class=\"kn\">import</span> <span class=\"n\">Viewer</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">viewer</span><span class=\"p\">:</span> <span class=\"n\">Viewer</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition caution\">\n<p class=\"admonition-title\">Caution</p>\n<p>Please use this sparingly, as a last resort. If you need to <em>add</em> layers\nto the viewer from your function, prefer one of the return-annotation methods\ndescribed <a class=\"reference external\" href=\"#adding-layers-to-napari-from-your-magicgui-function\" target=\"_blank\" rel=\"noreferrer\">below</a>.\nIf you find that you require the viewer instance because of functionality that\nis otherwise missing here, please consider opening an issue in the\n<a class=\"reference external\" href=\"https://github.com/napari/napari/issues/new/choose\" target=\"_blank\" rel=\"noreferrer\">napari issue tracker</a>,\ndescribing your use case.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"return-annotations\">\n<h2>Return Annotations<a class=\"headerlink\" href=\"#return-annotations\" title=\"Permalink to this headline\">¶</a></h2>\n<p>The following napari types may be used as <em>return</em> type annotations in <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code>\nfunctions to add layers to napari from your <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> function. The consequence of\neach type is described below:</p>\n<ul class=\"simple\">\n<li><p>any napari <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> type, such as\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Image.html#napari.layers.Image\" title=\"napari.layers.Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Image</span></code></a> or <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Points.html#napari.layers.Points\" title=\"napari.layers.Points\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Points</span></code></a></p></li>\n<li><p>any of the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;LayerType&gt;Data</span></code> types from <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#module-napari.types\" title=\"napari.types\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">napari.types</span></code></a>, such as\n<a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.ImageData\" title=\"napari.types.ImageData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.ImageData</span></code></a> or  <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LabelsData\" title=\"napari.types.LabelsData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.LabelsData</span></code></a></p></li>\n<li><p><a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.LayerDataTuple</span></code></a></p></li>\n</ul>\n<div class=\"section\" id=\"returning-a-layer-subclass\">\n<h3>Returning a <code class=\"docutils literal notranslate\"><span class=\"pre\">Layer</span></code> subclass<a class=\"headerlink\" href=\"#returning-a-layer-subclass\" title=\"Permalink to this headline\">¶</a></h3>\n<p>If you use a <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> subclass as a <em>return</em> annotation on a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> function, <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> will interpet it to mean that the layer returned\nfrom the function should be added to the viewer.  The object returned from the\nfunction must be an actual <a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> instance.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">ny</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Image</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my Image'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Here’s a complete example</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magicgui</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"s1\">'Add Image'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_widget</span><span class=\"p\">(</span><span class=\"n\">ny</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Image</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">ny</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'My Image'</span><span class=\"p\">)</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">my_widget</span><span class=\"p\">,</span> <span class=\"n\">area</span><span class=\"o\">=</span><span class=\"s1\">'right'</span><span class=\"p\">)</span>\n<span class=\"n\">my_widget</span><span class=\"p\">()</span>  <span class=\"c1\"># \"call the widget\" to call the function.</span>\n             <span class=\"c1\"># Normally this would be caused by some user UI interaction</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p><em>Note the new “My Image” layer in the viewer as a result of having called the widget function.</em></p>\n<div class=\"cell tag_remove-input docutils container\">\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>With this method, a new layer will be added to the layer list each time the\nfunction is called.  To update an existing layer, you must use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code> approach described below</p>\n</div>\n</div>\n<div class=\"section\" id=\"returning-napari-types-data\">\n<h3>Returning <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.types.*Data</span></code><a class=\"headerlink\" href=\"#returning-napari-types-data\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In the previous example, the object returned by the function had to be an actual\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> instance (in keeping with the return type\nannotation).  In many cases, you may only be interested in receiving and\nreturning the layer <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">data</span></code>  itself.  (There are\n<em>many</em> functions already written that accept and return a <code class=\"docutils literal notranslate\"><span class=\"pre\">numpy.ndarray</span></code>, for\nexample). In this case, you may use a return type annotation of one the special\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;LayerType&gt;Data</span></code> types from <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#module-napari.types\" title=\"napari.types\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">napari.types</span></code></a> to indicate that you want data\nreturned by your function to be turned into the corresponding\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a> type, and added to the viewer.</p>\n<p>For example, in combination with the <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.ImageData\" title=\"napari.types.ImageData\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ImageData</span></code></a> paramater\nannotation <a class=\"reference external\" href=\"#annotating-as-napari-types-data\" target=\"_blank\" rel=\"noreferrer\">described above</a>:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">napari.types</span> <span class=\"kn\">import</span> <span class=\"n\">LabelsData</span><span class=\"p\">,</span> <span class=\"n\">ImageData</span>\n\n<span class=\"nd\">@magicgui</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"s1\">'Run Threshold'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">threshold</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">ImageData</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">75</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">LabelsData</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Threshold an image and return a mask.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">image</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">view_image</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)))</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"p\">)</span>\n<span class=\"n\">threshold</span><span class=\"p\">()</span>  <span class=\"c1\"># \"call the widget\" to call the function.</span>\n             <span class=\"c1\"># Normally this would be caused by some user UI interaction</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_remove-input docutils container\">\n</div>\n</div>\n<div class=\"section\" id=\"returning-napari-types-layerdatatuple\">\n<h3>Returning <code class=\"docutils literal notranslate\"><span class=\"pre\">napari.types.LayerDataTuple</span></code><a class=\"headerlink\" href=\"#returning-napari-types-layerdatatuple\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The most flexible return type annotation is <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.LayerDataTuple</span></code></a>:\nit gives you full control over the layer that will be created and added to the\nviewer.  (It also lets you update an existing layer with a matching name).</p>\n<p>A <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code></a> is a <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.9)\" target=\"_blank\" rel=\"noreferrer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a> in one of the\nfollowing three forms:</p>\n<ol class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(layer_data,)</span></code></p>\n<ul class=\"simple\">\n<li><p>a single item tuple containing only layer data (will be interpreted as an image).</p></li>\n</ul>\n</li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(layer_data,</span> <span class=\"pre\">{})</span></code></p>\n<ul class=\"simple\">\n<li><p>a 2-tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">layer_data</span></code> and a metadata <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.9)\" target=\"_blank\" rel=\"noreferrer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>. the keys in the\nmetadata <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> must be valid keyword arguments to the corresponding\n<a class=\"reference internal\" href=\"../../api/stable/napari.layers.Layer.html#napari.layers.Layer\" title=\"napari.layers.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">napari.layers.Layer</span></code></a> constructor.</p></li>\n</ul>\n</li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(layer_data,</span> <span class=\"pre\">{},</span> <span class=\"pre\">'layer_type')</span></code></p>\n<ul class=\"simple\">\n<li><p>a 3-tuple of data, metadata, and layer type string.<code class=\"docutils literal notranslate\"><span class=\"pre\">layer_type</span></code> should be a\nlowercase string form of one of the layer types (like <code class=\"docutils literal notranslate\"><span class=\"pre\">'points'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'shapes'</span></code>, etc…).  If omitted, the layer type is assumed to be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'image'</span></code>.</p></li>\n</ul>\n</li>\n</ol>\n<p>The following are all valid <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">napari.types.LayerDataTuple</span></code></a> examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># an image array</span>\n<span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),)</span> \n\n<span class=\"c1\"># an image with name and custom blending mode</span>\n<span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'My Image'</span><span class=\"p\">,</span> <span class=\"s1\">'blending'</span><span class=\"p\">:</span> <span class=\"s1\">'additive'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># an empty points layer</span>\n<span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"s1\">'points'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># points with properties</span>\n<span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)}},</span> <span class=\"s1\">'points'</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>An example of using a <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code></a> return annotation in\na <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> function:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">napari.types</span>\n\n<span class=\"nd\">@magicgui</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"s1\">'Make Points'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_points</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LayerDataTuple</span><span class=\"p\">:</span>\n  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"mi\">500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">)}</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"n\">props</span><span class=\"p\">},</span> <span class=\"s1\">'points'</span><span class=\"p\">)</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">make_points</span><span class=\"p\">)</span>\n<span class=\"n\">make_points</span><span class=\"p\">()</span>  <span class=\"c1\"># \"call the widget\" to call the function.</span>\n               <span class=\"c1\"># Normally this would be caused by some user UI interaction</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_remove-input docutils container\">\n</div>\n</div>\n<div class=\"section\" id=\"returning-list-napari-types-layerdatatuple\">\n<h3>Returning <code class=\"docutils literal notranslate\"><span class=\"pre\">List[napari.types.LayerDataTuple]</span></code><a class=\"headerlink\" href=\"#returning-list-napari-types-layerdatatuple\" title=\"Permalink to this headline\">¶</a></h3>\n<p>You can also create multiple layers by returning a list of\n<a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code></a>.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_points</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LayerDataTuple</span><span class=\"p\">]:</span>\n  <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Note: the <code class=\"docutils literal notranslate\"><span class=\"pre\">List[]</span></code> syntax here is optional from the perspective of <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>.  You\ncan return either a single tuple or a list of tuples and they will all be added\nto the viewer as long as you use either <code class=\"docutils literal notranslate\"><span class=\"pre\">List[napari.types.LayerDataTuple]</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">napari.types.LayerDataTuple</span></code>.  If you want your code to be properly typed, however,\nyour return type must match your return annotation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"updating-an-existing-layer\">\n<h3>Updating an existing Layer<a class=\"headerlink\" href=\"#updating-an-existing-layer\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The default behavior is to add a new layer to the viewer for each\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code> returned by a magicgui function. By providing a unique\n<code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> key in your <a class=\"reference internal\" href=\"../../api/stable/napari.types.html#napari.types.LayerDataTuple\" title=\"napari.types.LayerDataTuple\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">LayerDataTuple</span></code></a> metadata dict, you can\nupdate an existing layer, rather than creating a new layer each time the\nfunction is called:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magicgui</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"s1\">'Make Points'</span><span class=\"p\">,</span> <span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'maximum'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_points</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LayerDataTuple</span><span class=\"p\">:</span>\n  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"mi\">500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'My Points'</span><span class=\"p\">},</span> <span class=\"s1\">'points'</span><span class=\"p\">)</span>\n\n<span class=\"n\">viewer</span> <span class=\"o\">=</span> <span class=\"n\">napari</span><span class=\"o\">.</span><span class=\"n\">Viewer</span><span class=\"p\">()</span>\n<span class=\"n\">viewer</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">add_dock_widget</span><span class=\"p\">(</span><span class=\"n\">make_points</span><span class=\"p\">)</span>\n<span class=\"c1\"># calling this multiple times will just update 'My Points'</span>\n<span class=\"n\">make_points</span><span class=\"p\">()</span>\n<span class=\"n\">make_points</span><span class=\"o\">.</span><span class=\"n\">n_points</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n<span class=\"n\">make_points</span><span class=\"p\">()</span>\n<span class=\"n\">make_points</span><span class=\"o\">.</span><span class=\"n\">n_points</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>\n<span class=\"n\">make_points</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"cell tag_remove-input docutils container\">\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"avoid-imports-with-forward-references\">\n<h2>Avoid imports with forward references<a class=\"headerlink\" href=\"#avoid-imports-with-forward-references\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Sometimes, it is undesirable to import and/or depend on <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> directly just\nto provide type annotations.  It is possible to avoid importing <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code>\nentirely by annotating with the string form of the napari type.  This is called\na <a class=\"reference external\" href=\"https://www.python.org/dev/peps/pep-0484/#forward-references\" target=\"_blank\" rel=\"noreferrer\">Forward\nreference</a>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition tip\">\n<p class=\"admonition-title\">Tip</p>\n<p>If you’d like to maintain IDE type support and autocompletion, you can\ndo so by hiding the napari imports inside of a <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">typing.TYPE_CHECKING</span></code>\nclause:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">napari</span>\n\n<span class=\"nd\">@magicgui</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This will not require <code class=\"docutils literal notranslate\"><span class=\"pre\">napari</span></code> at runtime, but if it is installed in your\ndevelopment environment, you will still get all the type inference.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-magicgui-in-napari-plugin-widgets\">\n<h2>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> in napari plugin widgets<a class=\"headerlink\" href=\"#using-magicgui-in-napari-plugin-widgets\" title=\"Permalink to this headline\">¶</a></h2>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> can be an effective way to generate widgets for use in napari\n<span class=\"xref myst\">plugins</span>, in particular the\n<a class=\"reference internal\" href=\"../../plugins/stable/hook_specifications.html#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\" title=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_experimental_provide_dock_widget()</span></code></a>\nplugin hook specification.  There is an important distinction to be made,\nhowever, between using <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.window.add_dock_widget</span></code>, and\nusing it with\n<a class=\"reference internal\" href=\"../../plugins/stable/hook_specifications.html#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\" title=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_experimental_provide_dock_widget()</span></code></a>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">viewer.window.add_dock_widget</span></code> expects an <em>instance</em> of a widget, like a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">magicgui.widgets.Widget</span></code> or a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">qtpy.QtWidgets.QWidget</span></code>.\n<a class=\"reference internal\" href=\"../../plugins/stable/hook_specifications.html#napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\" title=\"napari.plugins.hook_specifications.napari_experimental_provide_dock_widget\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">napari_experimental_provide_dock_widget()</span></code></a>,\non the other hand, expects a widget <em>class</em> (or, more broadly, a <code class=\"docutils literal notranslate\"><span class=\"pre\">callable</span></code> that\nreturns a widget instance).  There are two ways to acheive this with <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code>.</p>\n<div class=\"section\" id=\"magic-factory\">\n<h3><code class=\"docutils literal notranslate\"><span class=\"pre\">@magic_factory</span></code><a class=\"headerlink\" href=\"#magic-factory\" title=\"Permalink to this headline\">¶</a></h3>\n<p>In most cases, the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@magicgui</span></code> decorator used in the\npreceding examples can simply be replaced with the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@magic_factory</span></code>\ndecorator, to use it as a plugin dock widget.</p>\n<p>For example, the threshold widget <a class=\"reference external\" href=\"#returning-napari-types-data\" target=\"_blank\" rel=\"noreferrer\">shown above</a>\ncould be provided as a napari plugin as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">magicgui</span> <span class=\"kn\">import</span> <span class=\"n\">magic_factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">napari_hook_implementation</span>\n\n<span class=\"nd\">@magic_factory</span><span class=\"p\">(</span><span class=\"n\">auto_call</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'max'</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"mi\">16</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">threshold</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"s1\">'napari.types.ImageData'</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'napari.types.LabelsData'</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">threshold</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@magic_factory</span></code> behaves very much like\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/functools.html#functools.partial\" title=\"(in Python v3.9)\" target=\"_blank\" rel=\"noreferrer\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">functools.partial()</span></code></a>: it returns a callable that “remembers” some or\nall of the parameters required for a “future” call to <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">magicgui.magicgui()</span></code>.\nThe parameters provided to <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@magic_factory</span></code> can\nalso be overridden when creating a widget from a factory:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magic_factory</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_factory</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">widget1</span> <span class=\"o\">=</span> <span class=\"n\">my_factory</span><span class=\"p\">()</span>\n<span class=\"n\">widget2</span> <span class=\"o\">=</span> <span class=\"n\">my_factory</span><span class=\"p\">(</span><span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'widget_type'</span><span class=\"p\">:</span> <span class=\"s1\">'Slider'</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"magicgui-widgets-functiongui\">\n<h3><code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui.widgets.FunctionGui</span></code><a class=\"headerlink\" href=\"#magicgui-widgets-functiongui\" title=\"Permalink to this headline\">¶</a></h3>\n<p>The other option for using <code class=\"docutils literal notranslate\"><span class=\"pre\">magicgui</span></code> in plugins is to directly subclass\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">magicgui.widgets.FunctionGui</span></code> (which is the type that is returned\nby the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">@magicgui</span></code> decorator).</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">magicgui.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionGui</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyGui</span><span class=\"p\">(</span><span class=\"n\">FunctionGui</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n          <span class=\"n\">my_function</span><span class=\"p\">,</span>\n          <span class=\"n\">call_button</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n          <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"s1\">'vertical'</span><span class=\"p\">,</span>\n          <span class=\"n\">param_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># do whatever other initialization you want here</span>\n\n<span class=\"nd\">@napari_hook_implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">napari_experimental_provide_dock_widget</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">MyGui</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./guides/stable\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>\n      ","pageHeaders":[{"href":"#id1","text":"magicgui"},{"href":"#magicgui-and-type-annotations","text":"magicgui and type annotations"},{"href":"#parameter-annotations","text":"Parameter Annotations"},{"href":"#return-annotations","text":"Return Annotations"},{"href":"#avoid-imports-with-forward-references","text":"Avoid imports with forward references"},{"href":"#using-magicgui-in-napari-plugin-widgets","text":"Using magicgui in napari plugin widgets"}]}},"__N_SSG":true}