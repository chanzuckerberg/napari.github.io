{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for pathlib","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">fnmatch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ntpath</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">posixpath</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">_collections_abc</span> <span class=\"kn\">import</span> <span class=\"n\">Sequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">errno</span> <span class=\"kn\">import</span> <span class=\"n\">EINVAL</span><span class=\"p\">,</span> <span class=\"n\">ENOENT</span><span class=\"p\">,</span> <span class=\"n\">ENOTDIR</span><span class=\"p\">,</span> <span class=\"n\">EBADF</span><span class=\"p\">,</span> <span class=\"n\">ELOOP</span>\n<span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">attrgetter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">stat</span> <span class=\"kn\">import</span> <span class=\"n\">S_ISDIR</span><span class=\"p\">,</span> <span class=\"n\">S_ISLNK</span><span class=\"p\">,</span> <span class=\"n\">S_ISREG</span><span class=\"p\">,</span> <span class=\"n\">S_ISSOCK</span><span class=\"p\">,</span> <span class=\"n\">S_ISBLK</span><span class=\"p\">,</span> <span class=\"n\">S_ISCHR</span><span class=\"p\">,</span> <span class=\"n\">S_ISFIFO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_from_bytes</span> <span class=\"k\">as</span> <span class=\"n\">urlquote_from_bytes</span>\n\n\n<span class=\"n\">supports_symlinks</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'nt'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">nt</span>\n    <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getwindowsversion</span><span class=\"p\">()[:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">nt</span> <span class=\"kn\">import</span> <span class=\"n\">_getfinalpathname</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">supports_symlinks</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">_getfinalpathname</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">nt</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"PurePath\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PurePosixPath\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PureWindowsPath\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Path\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PosixPath\"</span><span class=\"p\">,</span> <span class=\"s2\">\"WindowsPath\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Internals</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\"># EBADF - guard against macOS `stat` throwing EBADF</span>\n<span class=\"n\">_IGNORED_ERROS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ENOENT</span><span class=\"p\">,</span> <span class=\"n\">ENOTDIR</span><span class=\"p\">,</span> <span class=\"n\">EBADF</span><span class=\"p\">,</span> <span class=\"n\">ELOOP</span><span class=\"p\">)</span>\n\n<span class=\"n\">_IGNORED_WINERRORS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"mi\">21</span><span class=\"p\">,</span>  <span class=\"c1\"># ERROR_NOT_READY - drive exists but is not accessible</span>\n    <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"c1\"># ERROR_INVALID_NAME - fix for bpo-35306</span>\n    <span class=\"mi\">1921</span><span class=\"p\">,</span>  <span class=\"c1\"># ERROR_CANT_RESOLVE_FILENAME - fix for broken symlink pointing to itself</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"s1\">'errno'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_IGNORED_ERROS</span> <span class=\"ow\">or</span>\n            <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"s1\">'winerror'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_IGNORED_WINERRORS</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_is_wildcard_pattern</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Whether this pattern needs actual matching using fnmatch, or can</span>\n    <span class=\"c1\"># be looked up directly as a file.</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"*\"</span> <span class=\"ow\">in</span> <span class=\"n\">pat</span> <span class=\"ow\">or</span> <span class=\"s2\">\"?\"</span> <span class=\"ow\">in</span> <span class=\"n\">pat</span> <span class=\"ow\">or</span> <span class=\"s2\">\"[\"</span> <span class=\"ow\">in</span> <span class=\"n\">pat</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_Flavour</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A flavour implements a particular (platform-specific) set of path</span>\n<span class=\"sd\">    semantics.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"o\">.</span><span class=\"n\">join</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span>\n        <span class=\"n\">altsep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">altsep</span>\n        <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">part</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">altsep</span><span class=\"p\">:</span>\n                <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">altsep</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"p\">)</span>\n            <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">splitroot</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">sep</span> <span class=\"ow\">in</span> <span class=\"n\">rel</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">rel</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">)):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span>\n                        <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">rel</span> <span class=\"ow\">and</span> <span class=\"n\">rel</span> <span class=\"o\">!=</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span>\n                    <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"n\">rel</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">drv</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If no drive is present, try to find one in the previous</span>\n                    <span class=\"c1\"># parts. This makes the result of parsing e.g.</span>\n                    <span class=\"c1\"># (\"C:\", \"/\", \"a\") reasonably intuitive.</span>\n                    <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">part</span><span class=\"p\">:</span>\n                            <span class=\"k\">continue</span>\n                        <span class=\"k\">if</span> <span class=\"n\">altsep</span><span class=\"p\">:</span>\n                            <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">altsep</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"p\">)</span>\n                        <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">splitroot</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">drv</span><span class=\"p\">:</span>\n                            <span class=\"k\">break</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">drv</span> <span class=\"o\">+</span> <span class=\"n\">root</span><span class=\"p\">)</span>\n        <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parsed</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">join_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">,</span> <span class=\"n\">drv2</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">,</span> <span class=\"n\">parts2</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Join the two paths represented by the respective</span>\n<span class=\"sd\">        (drive, root, parts) tuples.  Return a new (drive, root, parts) tuple.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">root2</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">drv2</span> <span class=\"ow\">and</span> <span class=\"n\">drv</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">drv</span> <span class=\"o\">+</span> <span class=\"n\">root2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">parts2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">drv2</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">drv2</span> <span class=\"o\">==</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">casefold</span><span class=\"p\">(</span><span class=\"n\">drv2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">casefold</span><span class=\"p\">(</span><span class=\"n\">drv</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Same drive =&gt; second path is relative to the first</span>\n                <span class=\"k\">return</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">+</span> <span class=\"n\">parts2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Second path is non-anchored (common case)</span>\n            <span class=\"k\">return</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">+</span> <span class=\"n\">parts2</span>\n        <span class=\"k\">return</span> <span class=\"n\">drv2</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">,</span> <span class=\"n\">parts2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_WindowsFlavour</span><span class=\"p\">(</span><span class=\"n\">_Flavour</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Reference for Windows paths can be found at</span>\n    <span class=\"c1\"># http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx</span>\n\n    <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span>\n    <span class=\"n\">altsep</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n    <span class=\"n\">has_drv</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">pathmod</span> <span class=\"o\">=</span> <span class=\"n\">ntpath</span>\n\n    <span class=\"n\">is_supported</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'nt'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">drive_letters</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s1\">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class=\"p\">)</span>\n    <span class=\"n\">ext_namespace_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">?</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span>\n\n    <span class=\"n\">reserved_names</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s1\">'CON'</span><span class=\"p\">,</span> <span class=\"s1\">'PRN'</span><span class=\"p\">,</span> <span class=\"s1\">'AUX'</span><span class=\"p\">,</span> <span class=\"s1\">'NUL'</span><span class=\"p\">}</span> <span class=\"o\">|</span>\n        <span class=\"p\">{</span><span class=\"s1\">'COM</span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)}</span> <span class=\"o\">|</span>\n        <span class=\"p\">{</span><span class=\"s1\">'LPT</span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)}</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Interesting findings about extended paths:</span>\n    <span class=\"c1\"># - '\\\\?\\c:\\a', '//?/c:\\a' and '//?/c:/a' are all supported</span>\n    <span class=\"c1\">#   but '\\\\?\\c:/a' is not</span>\n    <span class=\"c1\"># - extended paths are always absolute; \"relative\" extended paths will</span>\n    <span class=\"c1\">#   fail.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">splitroot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"o\">==</span> <span class=\"n\">sep</span> <span class=\"ow\">and</span> <span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">sep</span><span class=\"p\">):</span>\n            <span class=\"c1\"># XXX extended paths should also disable the collapsing of \".\"</span>\n            <span class=\"c1\"># components (according to MSDN docs).</span>\n            <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_split_extended_path</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"o\">==</span> <span class=\"n\">sep</span> <span class=\"ow\">and</span> <span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">sep</span> <span class=\"ow\">and</span> <span class=\"n\">third</span> <span class=\"o\">!=</span> <span class=\"n\">sep</span><span class=\"p\">):</span>\n            <span class=\"c1\"># is a UNC path:</span>\n            <span class=\"c1\"># vvvvvvvvvvvvvvvvvvvvv root</span>\n            <span class=\"c1\"># \\\\machine\\mountpoint\\directory\\etc\\...</span>\n            <span class=\"c1\">#            directory ^^^^^^^^^^^^^^</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">index2</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"c1\"># a UNC path can't have two slashes in a row</span>\n                <span class=\"c1\"># (after the initial two)</span>\n                <span class=\"k\">if</span> <span class=\"n\">index2</span> <span class=\"o\">!=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">index2</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">index2</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">prefix</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">index2</span><span class=\"p\">],</span> <span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"n\">index2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">part</span><span class=\"p\">[:</span><span class=\"n\">index2</span><span class=\"p\">],</span> <span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"n\">index2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"k\">if</span> <span class=\"n\">second</span> <span class=\"o\">==</span> <span class=\"s1\">':'</span> <span class=\"ow\">and</span> <span class=\"n\">first</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">drive_letters</span><span class=\"p\">:</span>\n            <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">third</span>\n        <span class=\"k\">if</span> <span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">sep</span><span class=\"p\">:</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n            <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">part</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">casefold</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">casefold_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compile_pattern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">fnmatch</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">),</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fullmatch</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n        <span class=\"n\">previous_s</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">_getfinalpathname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">strict</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ext_to_normal</span><span class=\"p\">(</span><span class=\"n\">_getfinalpathname</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">tail_parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># End of the path after the first one not found</span>\n                <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ext_to_normal</span><span class=\"p\">(</span><span class=\"n\">_getfinalpathname</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                        <span class=\"n\">previous_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                        <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n                        <span class=\"n\">tail_parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">previous_s</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"n\">path</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">tail_parts</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Means fallback on absolute</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_split_extended_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">ext_prefix</span><span class=\"o\">=</span><span class=\"n\">ext_namespace_prefix</span><span class=\"p\">):</span>\n        <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">ext_prefix</span><span class=\"p\">):</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:]</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'UNC</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">):</span>\n                <span class=\"n\">prefix</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]</span>\n        <span class=\"k\">return</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">s</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_ext_to_normal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Turn back an extended path into a normal DOS-like path</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_split_extended_path</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_reserved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"c1\"># NOTE: the rules for reserved names seem somewhat complicated</span>\n        <span class=\"c1\"># (e.g. r\"..\\NUL\" is reserved but not r\"foo\\NUL\").</span>\n        <span class=\"c1\"># We err on the side of caution and return True for paths which are</span>\n        <span class=\"c1\"># not considered reserved by Windows.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">'</span><span class=\"p\">):</span>\n            <span class=\"c1\"># UNC paths are never reserved</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reserved_names</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Under Windows, file URIs use the UTF-8 encoding.</span>\n        <span class=\"n\">drive</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">drive</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">drive</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">drive</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">':'</span><span class=\"p\">:</span>\n            <span class=\"c1\"># It's a path on a local drive =&gt; 'file:///c:/a/b'</span>\n            <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">as_posix</span><span class=\"p\">()[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'file:///</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">drive</span><span class=\"p\">,</span> <span class=\"n\">urlquote_from_bytes</span><span class=\"p\">(</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># It's a path on a network drive =&gt; 'file://host/share/a/b'</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'file:'</span> <span class=\"o\">+</span> <span class=\"n\">urlquote_from_bytes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">as_posix</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">gethomedir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'USERPROFILE'</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">:</span>\n            <span class=\"n\">userhome</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'USERPROFILE'</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"s1\">'HOMEPATH'</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'HOMEDRIVE'</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n            <span class=\"n\">userhome</span> <span class=\"o\">=</span> <span class=\"n\">drv</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'HOMEPATH'</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Can't determine home directory\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">username</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Try to guess user home directory.  By default all users</span>\n            <span class=\"c1\"># directories are located in the same place and are named by</span>\n            <span class=\"c1\"># corresponding usernames.  If current user home directory points</span>\n            <span class=\"c1\"># to nonstandard place, this guess is likely wrong.</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'USERNAME'</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">username</span><span class=\"p\">:</span>\n                <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">((</span><span class=\"n\">userhome</span><span class=\"p\">,))</span>\n                <span class=\"k\">if</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'USERNAME'</span><span class=\"p\">]:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Can't determine home directory \"</span>\n                                       <span class=\"s2\">\"for </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">username</span><span class=\"p\">)</span>\n                <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">username</span>\n                <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n                    <span class=\"n\">userhome</span> <span class=\"o\">=</span> <span class=\"n\">drv</span> <span class=\"o\">+</span> <span class=\"n\">root</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">userhome</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">userhome</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_PosixFlavour</span><span class=\"p\">(</span><span class=\"n\">_Flavour</span><span class=\"p\">):</span>\n    <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n    <span class=\"n\">altsep</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"n\">has_drv</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">pathmod</span> <span class=\"o\">=</span> <span class=\"n\">posixpath</span>\n\n    <span class=\"n\">is_supported</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s1\">'nt'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">splitroot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">part</span> <span class=\"ow\">and</span> <span class=\"n\">part</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">sep</span><span class=\"p\">:</span>\n            <span class=\"n\">stripped_part</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">)</span>\n            <span class=\"c1\"># According to POSIX path resolution:</span>\n            <span class=\"c1\"># http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11</span>\n            <span class=\"c1\"># \"A pathname that begins with two successive slashes may be</span>\n            <span class=\"c1\"># interpreted in an implementation-defined manner, although more</span>\n            <span class=\"c1\"># than two leading slashes shall be treated as a single slash\".</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stripped_part</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">sep</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stripped_part</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">stripped_part</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">part</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">casefold</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">casefold_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">parts</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compile_pattern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">fnmatch</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">fullmatch</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span>\n        <span class=\"n\">accessor</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">_accessor</span>\n        <span class=\"n\">seen</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># current dir</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'..'</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># parent dir</span>\n                    <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">rpartition</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n                    <span class=\"n\">newpath</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">newpath</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"n\">sep</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n                <span class=\"k\">if</span> <span class=\"n\">newpath</span> <span class=\"ow\">in</span> <span class=\"n\">seen</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Already seen this path</span>\n                    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">seen</span><span class=\"p\">[</span><span class=\"n\">newpath</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># use cached value</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"c1\"># The symlink is not resolved, so we must have a symlink loop.</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Symlink loop from </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">newpath</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Resolve the symbolic link</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">accessor</span><span class=\"o\">.</span><span class=\"n\">readlink</span><span class=\"p\">(</span><span class=\"n\">newpath</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">errno</span> <span class=\"o\">!=</span> <span class=\"n\">EINVAL</span> <span class=\"ow\">and</span> <span class=\"n\">strict</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span>\n                    <span class=\"c1\"># Not a symlink, or non-strict mode. We just leave the path</span>\n                    <span class=\"c1\"># untouched.</span>\n                    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">newpath</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">seen</span><span class=\"p\">[</span><span class=\"n\">newpath</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"c1\"># not resolved symlink</span>\n                    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                    <span class=\"n\">seen</span><span class=\"p\">[</span><span class=\"n\">newpath</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"c1\"># resolved symlink</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n        <span class=\"c1\"># NOTE: according to POSIX, getcwd() cannot contain path components</span>\n        <span class=\"c1\"># which are symlinks.</span>\n        <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"s1\">''</span> <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"n\">sep</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_reserved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We represent the path using the local filesystem encoding,</span>\n        <span class=\"c1\"># for portability to other applications.</span>\n        <span class=\"n\">bpath</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'file://'</span> <span class=\"o\">+</span> <span class=\"n\">urlquote_from_bytes</span><span class=\"p\">(</span><span class=\"n\">bpath</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">gethomedir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">username</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'HOME'</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">pwd</span>\n                <span class=\"k\">return</span> <span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">getpwuid</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getuid</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">pw_dir</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">pwd</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">getpwnam</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pw_dir</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Can't determine home directory \"</span>\n                                   <span class=\"s2\">\"for </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">username</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_windows_flavour</span> <span class=\"o\">=</span> <span class=\"n\">_WindowsFlavour</span><span class=\"p\">()</span>\n<span class=\"n\">_posix_flavour</span> <span class=\"o\">=</span> <span class=\"n\">_PosixFlavour</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_Accessor</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"An accessor implements a particular (system-specific or not) way of</span>\n<span class=\"sd\">    accessing paths on the filesystem.\"\"\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_NormalAccessor</span><span class=\"p\">(</span><span class=\"n\">_Accessor</span><span class=\"p\">):</span>\n\n    <span class=\"n\">stat</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">stat</span>\n\n    <span class=\"n\">lstat</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">lstat</span>\n\n    <span class=\"nb\">open</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">open</span>\n\n    <span class=\"n\">listdir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span>\n\n    <span class=\"n\">scandir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">scandir</span>\n\n    <span class=\"n\">chmod</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chmod</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">,</span> <span class=\"s2\">\"lchmod\"</span><span class=\"p\">):</span>\n        <span class=\"n\">lchmod</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">lchmod</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"nf\">lchmod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pathobj</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"lchmod() not available on this system\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mkdir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">mkdir</span>\n\n    <span class=\"n\">unlink</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">unlink</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">,</span> <span class=\"s2\">\"link\"</span><span class=\"p\">):</span>\n        <span class=\"n\">link_to</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">link</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nd\">@staticmethod</span>\n        <span class=\"k\">def</span> <span class=\"nf\">link_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"os.link() not available on this system\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rmdir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">rmdir</span>\n\n    <span class=\"n\">rename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">rename</span>\n\n    <span class=\"n\">replace</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">replace</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">nt</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">supports_symlinks</span><span class=\"p\">:</span>\n            <span class=\"n\">symlink</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">symlink</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">def</span> <span class=\"nf\">symlink</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">target_is_directory</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"symlink() not available on this system\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Under POSIX, os.symlink() takes two args</span>\n        <span class=\"nd\">@staticmethod</span>\n        <span class=\"k\">def</span> <span class=\"nf\">symlink</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">target_is_directory</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"n\">utime</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">utime</span>\n\n    <span class=\"c1\"># Helper for resolve()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">readlink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">readlink</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_normal_accessor</span> <span class=\"o\">=</span> <span class=\"n\">_NormalAccessor</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Globbing helpers</span>\n<span class=\"c1\">#</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_selector</span><span class=\"p\">(</span><span class=\"n\">pattern_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">):</span>\n    <span class=\"n\">pat</span> <span class=\"o\">=</span> <span class=\"n\">pattern_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">child_parts</span> <span class=\"o\">=</span> <span class=\"n\">pattern_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n    <span class=\"k\">if</span> <span class=\"n\">pat</span> <span class=\"o\">==</span> <span class=\"s1\">'**'</span><span class=\"p\">:</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">_RecursiveWildcardSelector</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">'**'</span> <span class=\"ow\">in</span> <span class=\"n\">pat</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid pattern: '**' can only be an entire path component\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">_is_wildcard_pattern</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">):</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">_WildcardSelector</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">_PreciseSelector</span>\n    <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">functools</span><span class=\"p\">,</span> <span class=\"s2\">\"lru_cache\"</span><span class=\"p\">):</span>\n    <span class=\"n\">_make_selector</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span><span class=\"p\">()(</span><span class=\"n\">_make_selector</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_Selector</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"A selector matches a specific glob pattern part against the children</span>\n<span class=\"sd\">    of a given path.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_parts</span> <span class=\"o\">=</span> <span class=\"n\">child_parts</span>\n        <span class=\"k\">if</span> <span class=\"n\">child_parts</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">successor</span> <span class=\"o\">=</span> <span class=\"n\">_make_selector</span><span class=\"p\">(</span><span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dironly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">successor</span> <span class=\"o\">=</span> <span class=\"n\">_TerminatingSelector</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dironly</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Iterate over all child paths of `parent_path` matched by this</span>\n<span class=\"sd\">        selector.  This can contain parent_path itself.\"\"\"</span>\n        <span class=\"n\">path_cls</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">)</span>\n        <span class=\"n\">is_dir</span> <span class=\"o\">=</span> <span class=\"n\">path_cls</span><span class=\"o\">.</span><span class=\"n\">is_dir</span>\n        <span class=\"n\">exists</span> <span class=\"o\">=</span> <span class=\"n\">path_cls</span><span class=\"o\">.</span><span class=\"n\">exists</span>\n        <span class=\"n\">scandir</span> <span class=\"o\">=</span> <span class=\"n\">parent_path</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">scandir</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_dir</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">([])</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_select_from</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_TerminatingSelector</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">parent_path</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_PreciseSelector</span><span class=\"p\">(</span><span class=\"n\">_Selector</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">_Selector</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">parent_path</span><span class=\"o\">.</span><span class=\"n\">_make_child_relpath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_dir</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dironly</span> <span class=\"k\">else</span> <span class=\"n\">exists</span><span class=\"p\">)(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">successor</span><span class=\"o\">.</span><span class=\"n\">_select_from</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">p</span>\n        <span class=\"k\">except</span> <span class=\"ne\">PermissionError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_WildcardSelector</span><span class=\"p\">(</span><span class=\"n\">_Selector</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">flavour</span><span class=\"o\">.</span><span class=\"n\">compile_pattern</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">)</span>\n        <span class=\"n\">_Selector</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">scandir_it</span><span class=\"p\">:</span>\n                <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">scandir_it</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dironly</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># \"entry.is_dir()\" can raise PermissionError</span>\n                        <span class=\"c1\"># in some cases (see bpo-38894), which is not</span>\n                        <span class=\"c1\"># among the errors ignored by _ignore_error()</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">():</span>\n                            <span class=\"k\">continue</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                            <span class=\"k\">raise</span>\n                        <span class=\"k\">continue</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n                    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">parent_path</span><span class=\"o\">.</span><span class=\"n\">_make_child_relpath</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">successor</span><span class=\"o\">.</span><span class=\"n\">_select_from</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n                        <span class=\"k\">yield</span> <span class=\"n\">p</span>\n        <span class=\"k\">except</span> <span class=\"ne\">PermissionError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_RecursiveWildcardSelector</span><span class=\"p\">(</span><span class=\"n\">_Selector</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">):</span>\n        <span class=\"n\">_Selector</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_parts</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_iterate_directories</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">parent_path</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">scandir_it</span><span class=\"p\">:</span>\n                <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">scandir_it</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">:</span>\n                <span class=\"n\">entry_is_dir</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">entry_is_dir</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                        <span class=\"k\">raise</span>\n                <span class=\"k\">if</span> <span class=\"n\">entry_is_dir</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">is_symlink</span><span class=\"p\">():</span>\n                    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">parent_path</span><span class=\"o\">.</span><span class=\"n\">_make_child_relpath</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterate_directories</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n                        <span class=\"k\">yield</span> <span class=\"n\">p</span>\n        <span class=\"k\">except</span> <span class=\"ne\">PermissionError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">yielded</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">successor_select</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">successor</span><span class=\"o\">.</span><span class=\"n\">_select_from</span>\n                <span class=\"k\">for</span> <span class=\"n\">starting_point</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterate_directories</span><span class=\"p\">(</span><span class=\"n\">parent_path</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">successor_select</span><span class=\"p\">(</span><span class=\"n\">starting_point</span><span class=\"p\">,</span> <span class=\"n\">is_dir</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">scandir</span><span class=\"p\">):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">yielded</span><span class=\"p\">:</span>\n                            <span class=\"k\">yield</span> <span class=\"n\">p</span>\n                            <span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">PermissionError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Public API</span>\n<span class=\"c1\">#</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_PathParents</span><span class=\"p\">(</span><span class=\"n\">Sequence</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This object provides sequence-like access to the logical ancestors</span>\n<span class=\"sd\">    of a path.  Don't try to construct it yourself.\"\"\"</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'_pathcls'</span><span class=\"p\">,</span> <span class=\"s1\">'_drv'</span><span class=\"p\">,</span> <span class=\"s1\">'_root'</span><span class=\"p\">,</span> <span class=\"s1\">'_parts'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We don't store the instance to avoid reference cycles</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pathcls</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">_drv</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">_root</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">_parts</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">IndexError</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pathcls</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span>\n                                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;</span><span class=\"si\">{}</span><span class=\"s2\">.parents&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pathcls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PurePath</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class for manipulating paths without I/O.</span>\n\n<span class=\"sd\">    PurePath represents a filesystem path and offers operations which</span>\n<span class=\"sd\">    don't imply any actual filesystem I/O.  Depending on your system,</span>\n<span class=\"sd\">    instantiating a PurePath will return either a PurePosixPath or a</span>\n<span class=\"sd\">    PureWindowsPath object.  You can also instantiate either of these classes</span>\n<span class=\"sd\">    directly, regardless of your system.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'_drv'</span><span class=\"p\">,</span> <span class=\"s1\">'_root'</span><span class=\"p\">,</span> <span class=\"s1\">'_parts'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'_str'</span><span class=\"p\">,</span> <span class=\"s1\">'_hash'</span><span class=\"p\">,</span> <span class=\"s1\">'_pparts'</span><span class=\"p\">,</span> <span class=\"s1\">'_cached_cparts'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Construct a PurePath from one or several strings and or existing</span>\n<span class=\"sd\">        PurePath objects.  The strings and path objects are combined so as</span>\n<span class=\"sd\">        to yield a canonicalized path, which is incorporated into the</span>\n<span class=\"sd\">        new PurePath object.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">cls</span> <span class=\"ow\">is</span> <span class=\"n\">PurePath</span><span class=\"p\">:</span>\n            <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span> <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'nt'</span> <span class=\"k\">else</span> <span class=\"n\">PurePosixPath</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Using the parts tuple helps share interned path parts</span>\n        <span class=\"c1\"># when pickling related paths.</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_parse_args</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is useful when you don't want to create an instance, just</span>\n        <span class=\"c1\"># canonicalize some constructor arguments.</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">):</span>\n                <span class=\"n\">parts</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">_parts</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fspath</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Force-cast str subclasses to str (issue #21127)</span>\n                    <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">\"argument should be a str object or an os.PathLike \"</span>\n                        <span class=\"s2\">\"object returning str, not </span><span class=\"si\">%r</span><span class=\"s2\">\"</span>\n                        <span class=\"o\">%</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_from_parts</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We need to call _parse_args on the instance, so as to get the</span>\n        <span class=\"c1\"># right flavour.</span>\n        <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_args</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"o\">=</span> <span class=\"n\">drv</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span> <span class=\"o\">=</span> <span class=\"n\">parts</span>\n        <span class=\"k\">if</span> <span class=\"n\">init</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"o\">=</span> <span class=\"n\">drv</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span> <span class=\"o\">=</span> <span class=\"n\">parts</span>\n        <span class=\"k\">if</span> <span class=\"n\">init</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_format_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">drv</span> <span class=\"o\">+</span> <span class=\"n\">root</span> <span class=\"o\">+</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Overridden in concrete Path</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_args</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">join_parsed_parts</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">,</span> <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the string representation of the path, suitable for</span>\n<span class=\"sd\">        passing to system calls.\"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_str</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_format_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span>\n                                                  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s1\">'.'</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_str</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__fspath__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_posix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the string representation of the path with forward (/)</span>\n<span class=\"sd\">        slashes.\"\"\"</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__bytes__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the bytes representation of the path.  This is only</span>\n<span class=\"sd\">        recommended to use under Unix.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fsencode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{!r}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_posix</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the path as a 'file' URI.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"relative path can't be expressed as a file URI\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">make_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_cparts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Cached casefolded parts, for hashing and comparison</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_cparts</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_cparts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">casefold_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_cparts</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span> <span class=\"ow\">is</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_flavour</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__hash__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hash</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hash</span> <span class=\"o\">=</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hash</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"o\">&lt;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_cparts</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"o\">&lt;=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_cparts</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"o\">&gt;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_cparts</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">PurePath</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span> <span class=\"o\">&gt;=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_cparts</span>\n\n    <span class=\"n\">drive</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"n\">attrgetter</span><span class=\"p\">(</span><span class=\"s1\">'_drv'</span><span class=\"p\">),</span>\n                     <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"The drive prefix (letter or UNC path), if any.\"\"\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"n\">attrgetter</span><span class=\"p\">(</span><span class=\"s1\">'_root'</span><span class=\"p\">),</span>\n                    <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"The root of the path, if any.\"\"\"</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">anchor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The concatenation of the drive and root, or ''.\"\"\"</span>\n        <span class=\"n\">anchor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span>\n        <span class=\"k\">return</span> <span class=\"n\">anchor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The final path component, if any.\"\"\"</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">''</span>\n        <span class=\"k\">return</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">suffix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        The final component's last suffix, if any.</span>\n\n<span class=\"sd\">        This includes the leading period. For example: '.txt'</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">''</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">suffixes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        A list of the final component's suffixes, if any.</span>\n\n<span class=\"sd\">        These include the leading periods. For example: ['.tar', '.gz']</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">'.'</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span> <span class=\"k\">for</span> <span class=\"n\">suffix</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">:]]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The final path component, minus its last suffix.\"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">with_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return a new path with the file name changed.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> has an empty name\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,))</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">altsep</span><span class=\"p\">]</span>\n            <span class=\"ow\">or</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid name </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span>\n                                       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">with_suffix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return a new path with the file suffix changed.  If the path</span>\n<span class=\"sd\">        has no suffix, add given suffix.  If the given suffix is an empty</span>\n<span class=\"sd\">        string, remove the suffix from the path.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span>\n        <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">sep</span> <span class=\"ow\">in</span> <span class=\"n\">suffix</span> <span class=\"ow\">or</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">altsep</span> <span class=\"ow\">and</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">altsep</span> <span class=\"ow\">in</span> <span class=\"n\">suffix</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid suffix </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">suffix</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">suffix</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">suffix</span> <span class=\"o\">==</span> <span class=\"s1\">'.'</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid suffix </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">))</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> has an empty name\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,))</span>\n        <span class=\"n\">old_suffix</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suffix</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">old_suffix</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">old_suffix</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span>\n                                       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">relative_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return the relative path to another path identified by the passed</span>\n<span class=\"sd\">        arguments.  If the operation is not possible (because this is not</span>\n<span class=\"sd\">        a subpath of the other path), raise ValueError.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># For the purpose of this method, drive and root are considered</span>\n        <span class=\"c1\"># separate parts, i.e.:</span>\n        <span class=\"c1\">#   Path('c:/').relative_to('c:')  gives Path('/')</span>\n        <span class=\"c1\">#   Path('c:/').relative_to('/')   raise ValueError</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">other</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"need at least one argument\"</span><span class=\"p\">)</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span>\n        <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"n\">abs_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">abs_parts</span> <span class=\"o\">=</span> <span class=\"n\">parts</span>\n        <span class=\"n\">to_drv</span><span class=\"p\">,</span> <span class=\"n\">to_root</span><span class=\"p\">,</span> <span class=\"n\">to_parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_args</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">to_root</span><span class=\"p\">:</span>\n            <span class=\"n\">to_abs_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">to_drv</span><span class=\"p\">,</span> <span class=\"n\">to_root</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">to_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">to_abs_parts</span> <span class=\"o\">=</span> <span class=\"n\">to_parts</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">to_abs_parts</span><span class=\"p\">)</span>\n        <span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">casefold_parts</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"ow\">or</span> <span class=\"n\">drv</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">cf</span><span class=\"p\">(</span><span class=\"n\">abs_parts</span><span class=\"p\">[:</span><span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"n\">cf</span><span class=\"p\">(</span><span class=\"n\">to_abs_parts</span><span class=\"p\">):</span>\n            <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_format_parsed_parts</span><span class=\"p\">(</span><span class=\"n\">to_drv</span><span class=\"p\">,</span> <span class=\"n\">to_root</span><span class=\"p\">,</span> <span class=\"n\">to_parts</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{!r}</span><span class=\"s2\"> does not start with </span><span class=\"si\">{!r}</span><span class=\"s2\">\"</span>\n                             <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">root</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n                                       <span class=\"n\">abs_parts</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">:])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"An object providing sequence-like access to the</span>\n<span class=\"sd\">        components in the filesystem path.\"\"\"</span>\n        <span class=\"c1\"># We cache the tuple to avoid building a new one each time .parts</span>\n        <span class=\"c1\"># is accessed.  XXX is this necessary?</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pparts</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pparts</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pparts</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">joinpath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Combine this path with one or several arguments, and return a</span>\n<span class=\"sd\">        new path representing either a subpath (if all arguments are relative</span>\n<span class=\"sd\">        paths) or a totally different path (if one of the arguments is</span>\n<span class=\"sd\">        anchored).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_child</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__truediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_child</span><span class=\"p\">((</span><span class=\"n\">key</span><span class=\"p\">,))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__rtruediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">([</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The logical parent of the path.\"\"\"</span>\n        <span class=\"n\">drv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"A sequence of this path's logical parents.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">_PathParents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_absolute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"True if the path is absolute (has both a root and, if applicable,</span>\n<span class=\"sd\">        a drive).\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">has_drv</span> <span class=\"ow\">or</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_reserved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return True if the path contains one of the special names reserved</span>\n<span class=\"sd\">        by the system, if any.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">is_reserved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path_pattern</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return True if this path matches the given pattern.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">casefold</span>\n        <span class=\"n\">path_pattern</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"p\">(</span><span class=\"n\">path_pattern</span><span class=\"p\">)</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">pat_parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">((</span><span class=\"n\">path_pattern</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pat_parts</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"empty pattern\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">and</span> <span class=\"n\">drv</span> <span class=\"o\">!=</span> <span class=\"n\">cf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">and</span> <span class=\"n\">root</span> <span class=\"o\">!=</span> <span class=\"n\">cf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cparts</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pat_parts</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"n\">pat_parts</span> <span class=\"o\">=</span> <span class=\"n\">pat_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pat_parts</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">part</span><span class=\"p\">,</span> <span class=\"n\">pat</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">),</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">pat_parts</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">fnmatch</span><span class=\"o\">.</span><span class=\"n\">fnmatchcase</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">,</span> <span class=\"n\">pat</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Can't subclass os.PathLike from PurePath and keep the constructor</span>\n<span class=\"c1\"># optimizations in PurePath._parse_args().</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">PurePath</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PurePosixPath</span><span class=\"p\">(</span><span class=\"n\">PurePath</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"PurePath subclass for non-Windows systems.</span>\n\n<span class=\"sd\">    On a POSIX system, instantiating a PurePath should return this object.</span>\n<span class=\"sd\">    However, you can also instantiate it directly on any system.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">_flavour</span> <span class=\"o\">=</span> <span class=\"n\">_posix_flavour</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"n\">PurePath</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"PurePath subclass for Windows systems.</span>\n\n<span class=\"sd\">    On a Windows system, instantiating a PurePath should return this object.</span>\n<span class=\"sd\">    However, you can also instantiate it directly on any system.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">_flavour</span> <span class=\"o\">=</span> <span class=\"n\">_windows_flavour</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Filesystem-accessing classes</span>\n\n\n<div class=\"viewcode-block\" id=\"Path\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">PurePath</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"PurePath subclass that can make system calls.</span>\n\n<span class=\"sd\">    Path represents a filesystem path but unlike PurePath, also offers</span>\n<span class=\"sd\">    methods to do system calls on path objects. Depending on your system,</span>\n<span class=\"sd\">    instantiating a Path will return either a PosixPath or a WindowsPath</span>\n<span class=\"sd\">    object. You can also instantiate a PosixPath or WindowsPath directly,</span>\n<span class=\"sd\">    but cannot instantiate a WindowsPath on a POSIX system or vice versa.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'_accessor'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'_closed'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">cls</span> <span class=\"ow\">is</span> <span class=\"n\">Path</span><span class=\"p\">:</span>\n            <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span> <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'nt'</span> <span class=\"k\">else</span> <span class=\"n\">PosixPath</span>\n        <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">is_supported</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"cannot instantiate </span><span class=\"si\">%r</span><span class=\"s2\"> on your system\"</span>\n                                      <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n              <span class=\"c1\"># Private non-constructor arguments</span>\n              <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n              <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">template</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">_accessor</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span> <span class=\"o\">=</span> <span class=\"n\">_normal_accessor</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_child_relpath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is an optimization used for dir walking.  `part` must be</span>\n        <span class=\"c1\"># a single part relative to this path.</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">part</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parsed_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">,</span> <span class=\"n\">parts</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">tb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_raise_closed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"I/O operation on closed path\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_opener</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"mo\">0o666</span><span class=\"p\">):</span>\n        <span class=\"c1\"># A stub for the opener argument to built-in open()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_raw_open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"mo\">0o777</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file pointed by this path and return a file descriptor,</span>\n<span class=\"sd\">        as os.open() does.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Public API</span>\n\n<div class=\"viewcode-block\" id=\"Path.cwd\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.cwd\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cwd</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return a new path pointing to the current working directory</span>\n<span class=\"sd\">        (as returned by os.getcwd()).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.home\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.home\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return a new path pointing to the user's home directory (as</span>\n<span class=\"sd\">        returned by os.path.expanduser('~')).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">gethomedir</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.samefile\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.samefile\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">samefile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other_path</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return whether other_path is the same or not as this file</span>\n<span class=\"sd\">        (as returned by os.path.samefile()).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">other_st</span> <span class=\"o\">=</span> <span class=\"n\">other_path</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"n\">other_st</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">(</span><span class=\"n\">other_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">samestat</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">other_st</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.iterdir\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.iterdir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">iterdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Iterate over the files in this directory.  Does not yield any</span>\n<span class=\"sd\">        result for the special paths '.' and '..'.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'..'</span><span class=\"p\">}:</span>\n                <span class=\"c1\"># Yielding a path object for these makes little sense</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_child_relpath</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.glob\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.glob\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Iterate over this subtree and yield all existing files (of any</span>\n<span class=\"sd\">        kind, including directories) matching the given relative pattern.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pattern</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Unacceptable pattern: </span><span class=\"si\">{!r}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">pattern_parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">((</span><span class=\"n\">pattern</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Non-relative patterns are unsupported\"</span><span class=\"p\">)</span>\n        <span class=\"n\">selector</span> <span class=\"o\">=</span> <span class=\"n\">_make_selector</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">pattern_parts</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">p</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.rglob\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.rglob\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rglob</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Recursively yield all existing files (of any kind, including</span>\n<span class=\"sd\">        directories) matching the given relative pattern, anywhere in</span>\n<span class=\"sd\">        this subtree.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">drv</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">pattern_parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">parse_parts</span><span class=\"p\">((</span><span class=\"n\">pattern</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">drv</span> <span class=\"ow\">or</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Non-relative patterns are unsupported\"</span><span class=\"p\">)</span>\n        <span class=\"n\">selector</span> <span class=\"o\">=</span> <span class=\"n\">_make_selector</span><span class=\"p\">((</span><span class=\"s2\">\"**\"</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">pattern_parts</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">select_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">p</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.absolute\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.absolute\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">absolute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Return an absolute version of this path.  This function works</span>\n<span class=\"sd\">        even if the path doesn't point to anything.</span>\n\n<span class=\"sd\">        No normalization is done, i.e. all '.' and '..' will be kept along.</span>\n<span class=\"sd\">        Use resolve() to get the canonical path to a file.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># XXX untested yet!</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"c1\"># FIXME this must defer to the specific flavour (and, under Windows,</span>\n        <span class=\"c1\"># use nt._getfullpathname())</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">([</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_init</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.resolve\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.resolve\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Make the path absolute, resolving all symlinks on the way and also</span>\n<span class=\"sd\">        normalizing it (for example turning slashes into backslashes under</span>\n<span class=\"sd\">        Windows).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"n\">strict</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No symlink resolution =&gt; for consistency, raise an error if</span>\n            <span class=\"c1\"># the path doesn't exist or is forbidden</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span>\n        <span class=\"c1\"># Now we have no symlinks in the path, it's safe to normalize it.</span>\n        <span class=\"n\">normed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">pathmod</span><span class=\"o\">.</span><span class=\"n\">normpath</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">((</span><span class=\"n\">normed</span><span class=\"p\">,),</span> <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_init</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.stat\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.stat\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return the result of the stat() system call on this path, like</span>\n<span class=\"sd\">        os.stat() does.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.owner\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.owner\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">owner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return the login name of the file owner.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pwd</span>\n        <span class=\"k\">return</span> <span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">getpwuid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_uid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pw_name</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.group\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.group\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return the group name of the file gid.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">grp</span>\n        <span class=\"k\">return</span> <span class=\"n\">grp</span><span class=\"o\">.</span><span class=\"n\">getgrgid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_gid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">gr_name</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.open\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">buffering</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n             <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file pointed by this path and return a file object, as</span>\n<span class=\"sd\">        the built-in open() function does.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">buffering</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"p\">,</span>\n                       <span class=\"n\">opener</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_opener</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.read_bytes\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.read_bytes\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">read_bytes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file in bytes mode, read it, and close the file.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.read_text\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.read_text\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">read_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file in text mode, read it, and close the file.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.write_bytes\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.write_bytes\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_bytes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file in bytes mode, write to it, and close the file.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># type-check for the buffer interface before truncating the file</span>\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"nb\">memoryview</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.write_text\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.write_text\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Open the file in text mode, write to it, and close the file.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">'data must be str, not </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span>\n                            <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.touch\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.touch\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">touch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"mo\">0o666</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Create this file with the given access mode, if it doesn't exist.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">exist_ok</span><span class=\"p\">:</span>\n            <span class=\"c1\"># First try to bump modification time</span>\n            <span class=\"c1\"># Implementation note: GNU touch uses the UTIME_NOW option of</span>\n            <span class=\"c1\"># the utimensat() / futimens() functions.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">utime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Avoid exception chaining</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">O_CREAT</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">O_WRONLY</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exist_ok</span><span class=\"p\">:</span>\n            <span class=\"n\">flags</span> <span class=\"o\">|=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">O_EXCL</span>\n        <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raw_open</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.mkdir\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.mkdir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">mkdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"mo\">0o777</span><span class=\"p\">,</span> <span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Create a new directory at this given path.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">parents</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"n\">exist_ok</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Cannot rely on checking for EEXIST, since the operating system</span>\n            <span class=\"c1\"># could give priority to other errors like EACCES or EROFS</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exist_ok</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.chmod\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.chmod\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">chmod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Change the permissions of the path, like os.chmod().</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">chmod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.lchmod\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.lchmod\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">lchmod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Like chmod(), except if the path points to a symlink, the symlink's</span>\n<span class=\"sd\">        permissions are changed, rather than its target's.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">lchmod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.unlink\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.unlink\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unlink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">missing_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Remove this file or link.</span>\n<span class=\"sd\">        If the path is a directory, use rmdir() instead.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">missing_ok</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.rmdir\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.rmdir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rmdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Remove this directory.  The directory must be empty.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">rmdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.lstat\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.lstat\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">lstat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Like stat(), except if the path points to a symlink, the symlink's</span>\n<span class=\"sd\">        status information is returned, rather than its target's.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">lstat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.rename\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.rename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Rename this path to the target path.</span>\n\n<span class=\"sd\">        The target path may be absolute or relative. Relative paths are</span>\n<span class=\"sd\">        interpreted relative to the current working directory, *not* the</span>\n<span class=\"sd\">        directory of the Path object.</span>\n\n<span class=\"sd\">        Returns the new Path instance pointing to the target path.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.replace\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.replace\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Rename this path to the target path, overwriting if that path exists.</span>\n\n<span class=\"sd\">        The target path may be absolute or relative. Relative paths are</span>\n<span class=\"sd\">        interpreted relative to the current working directory, *not* the</span>\n<span class=\"sd\">        directory of the Path object.</span>\n\n<span class=\"sd\">        Returns the new Path instance pointing to the target path.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.symlink_to\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.symlink_to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">symlink_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">target_is_directory</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Make this path a symlink pointing to the target path.</span>\n<span class=\"sd\">        Note the order of arguments (link, target) is the reverse of os.symlink.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target_is_directory</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.link_to\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.link_to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">link_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Make the target path a hard link pointing to this path.</span>\n\n<span class=\"sd\">        Note this function does not make this path a hard link to *target*,</span>\n<span class=\"sd\">        despite the implication of the function and argument names. The order</span>\n<span class=\"sd\">        of arguments (target, link) is the reverse of Path.symlink_to, but</span>\n<span class=\"sd\">        matches that of os.link.</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_closed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_raise_closed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accessor</span><span class=\"o\">.</span><span class=\"n\">link_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># Convenience functions for querying the stat results</span>\n\n<div class=\"viewcode-block\" id=\"Path.exists\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.exists\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path exists.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_dir\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_dir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a directory.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISDIR</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_file\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_file\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a regular file (also True for symlinks pointing</span>\n<span class=\"sd\">        to regular files).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISREG</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_mount\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_mount\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_mount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Check if this path is a POSIX mount point</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Need to exist and be a dir</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">parent_dev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_dev</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_dev</span>\n        <span class=\"k\">if</span> <span class=\"n\">dev</span> <span class=\"o\">!=</span> <span class=\"n\">parent_dev</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">ino</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_ino</span>\n        <span class=\"n\">parent_ino</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_ino</span>\n        <span class=\"k\">return</span> <span class=\"n\">ino</span> <span class=\"o\">==</span> <span class=\"n\">parent_ino</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_symlink\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_symlink\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_symlink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a symbolic link.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISLNK</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lstat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_block_device\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_block_device\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_block_device</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a block device.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISBLK</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_char_device\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_char_device\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_char_device</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a character device.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISCHR</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_fifo\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_fifo\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_fifo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a FIFO.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISFIFO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.is_socket\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.is_socket\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_socket</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Whether this path is a socket.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">S_ISSOCK</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\"># Path doesn't exist or is a broken symlink</span>\n            <span class=\"c1\"># (see https://bitbucket.org/pitrou/pathlib/issue/12/)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Non-encodable path</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Path.expanduser\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.Path.html#napari.types.Path.expanduser\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">expanduser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Return a new path with expanded ~ and ~user constructs</span>\n<span class=\"sd\">        (as returned by os.path.expanduser)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_drv</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'~'</span><span class=\"p\">):</span>\n            <span class=\"n\">homedir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flavour</span><span class=\"o\">.</span><span class=\"n\">gethomedir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_parts</span><span class=\"p\">([</span><span class=\"n\">homedir</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PosixPath</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Path subclass for non-Windows systems.</span>\n\n<span class=\"sd\">    On a POSIX system, instantiating a Path should return this object.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WindowsPath</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Path subclass for Windows systems.</span>\n\n<span class=\"sd\">    On a Windows system, instantiating a Path should return this object.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">owner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Path.owner() is unsupported on this system\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Path.group() is unsupported on this system\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_mount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Path.is_mount() is unsupported on this system\"</span><span class=\"p\">)</span>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}