{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari._qt.qthreading","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span><span class=\"p\">,</span> <span class=\"n\">wraps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">,</span> <span class=\"n\">Set</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">toolz</span> <span class=\"k\">as</span> <span class=\"nn\">tz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtCore</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">QObject</span><span class=\"p\">,</span>\n    <span class=\"n\">QRunnable</span><span class=\"p\">,</span>\n    <span class=\"n\">QThread</span><span class=\"p\">,</span>\n    <span class=\"n\">QThreadPool</span><span class=\"p\">,</span>\n    <span class=\"n\">QTimer</span><span class=\"p\">,</span>\n    <span class=\"n\">Signal</span><span class=\"p\">,</span>\n    <span class=\"n\">Slot</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.qprogress</span> <span class=\"kn\">import</span> <span class=\"n\">progress</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">as_generator_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Turns a regular function (single return) into a generator function.\"\"\"</span>\n\n    <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">genwrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">genwrapper</span>\n\n\n<div class=\"viewcode-block\" id=\"WorkerBaseSignals\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBaseSignals.html#napari.qt.threading.WorkerBaseSignals\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">WorkerBaseSignals</span><span class=\"p\">(</span><span class=\"n\">QObject</span><span class=\"p\">):</span>\n\n    <span class=\"n\">started</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>  <span class=\"c1\"># emitted when the work is started</span>\n    <span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>  <span class=\"c1\"># emitted when the work is finished</span>\n    <span class=\"n\">returned</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">)</span>  <span class=\"c1\"># emitted with return value</span>\n    <span class=\"n\">errored</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">)</span>  <span class=\"c1\"># emitted with error object on Exception</span>\n    <span class=\"n\">warned</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">)</span>  <span class=\"c1\"># emitted with showwarning args on warning</span></div>\n\n\n<div class=\"viewcode-block\" id=\"WorkerBase\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">WorkerBase</span><span class=\"p\">(</span><span class=\"n\">QRunnable</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class for creating a Worker that can run in another thread.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    SignalsClass : type, optional</span>\n<span class=\"sd\">        A QObject subclass that contains signals, by default WorkerBaseSignals</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    signals: WorkerBaseSignals</span>\n<span class=\"sd\">        signal emitter object. To allow identify which worker thread emitted signal.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\">#: A set of Workers.  Add to set using :meth:`WorkerBase.start`</span>\n    <span class=\"n\">_worker_set</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"s1\">'WorkerBase'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">SignalsClass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">WorkerBaseSignals</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">WorkerBaseSignals</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_abort_requested</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signals</span> <span class=\"o\">=</span> <span class=\"n\">SignalsClass</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">errored</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relay_error</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">warned</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relay_warning</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_relay_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..utils.notifications</span> <span class=\"kn\">import</span> <span class=\"n\">notification_manager</span>\n\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">receive_error</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">__traceback__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_relay_warning</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">show_warn_args</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..utils.notifications</span> <span class=\"kn\">import</span> <span class=\"n\">notification_manager</span>\n\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">receive_warning</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">show_warn_args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Pass through attr requests to signals to simplify connection API.</span>\n\n<span class=\"sd\">        The goal is to enable ``worker.yielded.connect`` instead of</span>\n<span class=\"sd\">        ``worker.signals.yielded.connect``. Because multiple inheritance of Qt</span>\n<span class=\"sd\">        classes is not well supported in PyQt, we have to use composition here</span>\n<span class=\"sd\">        (signals are provided by QObjects, and QRunnable is not a QObject). So</span>\n<span class=\"sd\">        this passthrough allows us to connect to signals on the ``_signals``</span>\n<span class=\"sd\">        object.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># the Signal object is actually a class attribute</span>\n        <span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">Signal</span><span class=\"p\">):</span>\n            <span class=\"c1\"># but what we need to connect to is the instantiated signal</span>\n            <span class=\"c1\"># (which is of type `SignalInstance` in PySide and</span>\n            <span class=\"c1\"># `pyqtBoundSignal` in PyQt)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signals</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"WorkerBase.quit\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.quit\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">quit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Send a request to abort the worker.</span>\n\n<span class=\"sd\">        .. note::</span>\n\n<span class=\"sd\">            It is entirely up to subclasses to honor this method by checking</span>\n<span class=\"sd\">            ``self.abort_requested`` periodically in their ``worker.work``</span>\n<span class=\"sd\">            method, and exiting if ``True``.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_abort_requested</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">abort_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Whether the worker has been requested to stop.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_abort_requested</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_running</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Whether the worker has been started\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_running</span>\n\n<div class=\"viewcode-block\" id=\"WorkerBase.run\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.run\">[docs]</a>    <span class=\"nd\">@Slot</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Start the worker.</span>\n\n<span class=\"sd\">        The end-user should never need to call this function.</span>\n<span class=\"sd\">        But it cannot be made private or renamed, since it is called by Qt.</span>\n\n<span class=\"sd\">        The order of method calls when starting a worker is:</span>\n\n<span class=\"sd\">        .. code-block:: none</span>\n\n<span class=\"sd\">           calls QThreadPool.globalInstance().start(worker)</span>\n<span class=\"sd\">           |               triggered by the QThreadPool.start() method</span>\n<span class=\"sd\">           |               |             called by worker.run</span>\n<span class=\"sd\">           |               |             |</span>\n<span class=\"sd\">           V               V             V</span>\n<span class=\"sd\">           worker.start -&gt; worker.run -&gt; worker.work</span>\n\n<span class=\"sd\">        **This** is the function that actually gets called when calling</span>\n<span class=\"sd\">        :func:`QThreadPool.start(worker)`.  It simply wraps the :meth:`work`</span>\n<span class=\"sd\">        method, and emits a few signals.  Subclasses should NOT override this</span>\n<span class=\"sd\">        method (except with good reason), and instead should implement</span>\n<span class=\"sd\">        :meth:`work`.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s2\">\"always\"</span><span class=\"p\">)</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">showwarning</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">warned</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">work</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># The Worker object has likely been deleted.</span>\n                    <span class=\"c1\"># A deleted wrapped C/C++ object may result in a runtime</span>\n                    <span class=\"c1\"># error that will cause segfault if we try to do much other</span>\n                    <span class=\"c1\"># than simply notify the user.</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s2\">\"RuntimeError in aborted thread: </span><span class=\"si\">{result}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">return</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">result</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">abort_requested</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returned</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errored</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"WorkerBase.work\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.work\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Main method to execute the worker.</span>\n\n<span class=\"sd\">        The end-user should never need to call this function.</span>\n<span class=\"sd\">        But subclasses must implement this method (See</span>\n<span class=\"sd\">        :meth:`GeneratorFunction.work` for an example implementation).</span>\n<span class=\"sd\">        Minimally, it should check ``self.abort_requested`` periodically and</span>\n<span class=\"sd\">        exit if True.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        .. code-block:: python</span>\n\n<span class=\"sd\">            class MyWorker(WorkerBase):</span>\n\n<span class=\"sd\">                def work(self):</span>\n<span class=\"sd\">                    i = 0</span>\n<span class=\"sd\">                    while True:</span>\n<span class=\"sd\">                        if self.abort_requested:</span>\n<span class=\"sd\">                            self.aborted.emit()</span>\n<span class=\"sd\">                            break</span>\n<span class=\"sd\">                        i += 1</span>\n<span class=\"sd\">                        if i &gt; max_iters:</span>\n<span class=\"sd\">                            break</span>\n<span class=\"sd\">                        time.sleep(0.5)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'\"</span><span class=\"si\">{name}</span><span class=\"s1\">\" failed to define work() method'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"WorkerBase.start\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.WorkerBase.html#napari.qt.threading.WorkerBase.start\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Start this worker in a thread and add it to the global threadpool.</span>\n\n<span class=\"sd\">        The order of method calls when starting a worker is:</span>\n\n<span class=\"sd\">        .. code-block:: none</span>\n\n<span class=\"sd\">           calls QThreadPool.globalInstance().start(worker)</span>\n<span class=\"sd\">           |               triggered by the QThreadPool.start() method</span>\n<span class=\"sd\">           |               |             called by worker.run</span>\n<span class=\"sd\">           |               |             |</span>\n<span class=\"sd\">           V               V             V</span>\n<span class=\"sd\">           worker.start -&gt; worker.run -&gt; worker.work</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">in</span> <span class=\"n\">WorkerBase</span><span class=\"o\">.</span><span class=\"n\">_worker_set</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'This worker is already started!'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># This will raise a RunTimeError if the worker is already deleted</span>\n        <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"n\">WorkerBase</span><span class=\"o\">.</span><span class=\"n\">_worker_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">WorkerBase</span><span class=\"o\">.</span><span class=\"n\">_worker_set</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n        <span class=\"n\">start_</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">QThreadPool</span><span class=\"o\">.</span><span class=\"n\">globalInstance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">QTimer</span><span class=\"o\">.</span><span class=\"n\">singleShot</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">start_</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"FunctionWorker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.FunctionWorker.html#napari.qt.threading.FunctionWorker\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FunctionWorker</span><span class=\"p\">(</span><span class=\"n\">WorkerBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"QRunnable with signals that wraps a simple long-running function.</span>\n\n<span class=\"sd\">    .. note::</span>\n\n<span class=\"sd\">        ``FunctionWorker`` does not provide a way to stop a very long-running</span>\n<span class=\"sd\">        function (e.g. ``time.sleep(10000)``).  So whenever possible, it is</span>\n<span class=\"sd\">        better to implement your long running function as a generator that</span>\n<span class=\"sd\">        yields periodically, and use the :class:`GeneratorWorker` instead.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    func : Callable</span>\n<span class=\"sd\">        A function to call in another thread</span>\n<span class=\"sd\">    *args</span>\n<span class=\"sd\">        will be passed to the function</span>\n<span class=\"sd\">    **kwargs</span>\n<span class=\"sd\">        will be passed to the function</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If ``func`` is a generator function and not a regular function.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isgeneratorfunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Generator function </span><span class=\"si\">{func}</span><span class=\"s2\"> cannot be used with FunctionWorker, use GeneratorWorker instead\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span>\n\n<div class=\"viewcode-block\" id=\"FunctionWorker.work\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.FunctionWorker.html#napari.qt.threading.FunctionWorker.work\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kwargs</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"GeneratorWorkerSignals\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorkerSignals.html#napari.qt.threading.GeneratorWorkerSignals\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GeneratorWorkerSignals</span><span class=\"p\">(</span><span class=\"n\">WorkerBaseSignals</span><span class=\"p\">):</span>\n\n    <span class=\"n\">yielded</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">)</span>  <span class=\"c1\"># emitted with yielded values (if generator used)</span>\n    <span class=\"n\">paused</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>  <span class=\"c1\"># emitted when a running job has successfully paused</span>\n    <span class=\"n\">resumed</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>  <span class=\"c1\"># emitted when a paused job has successfully resumed</span>\n    <span class=\"n\">aborted</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">()</span>  <span class=\"c1\"># emitted when a running job is successfully aborted</span></div>\n\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GeneratorWorker</span><span class=\"p\">(</span><span class=\"n\">WorkerBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"QRunnable with signals that wraps a long-running generator.</span>\n\n<span class=\"sd\">    Provides a convenient way to run a generator function in another thread,</span>\n<span class=\"sd\">    while allowing 2-way communication between threads, using plain-python</span>\n<span class=\"sd\">    generator syntax in the original function.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    func : callable</span>\n<span class=\"sd\">        The function being run in another thread.  May be a generator function.</span>\n<span class=\"sd\">    SignalsClass : type, optional</span>\n<span class=\"sd\">        A QObject subclass that contains signals, by default</span>\n<span class=\"sd\">        GeneratorWorkerSignals</span>\n<span class=\"sd\">    *args</span>\n<span class=\"sd\">        Will be passed to func on instantiation</span>\n<span class=\"sd\">    **kwargs</span>\n<span class=\"sd\">        Will be passed to func on instantiation</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">SignalsClass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">WorkerBaseSignals</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">GeneratorWorkerSignals</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isgeneratorfunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Regular function </span><span class=\"si\">{func}</span><span class=\"s2\"> cannot be used with GeneratorWorker, use FunctionWorker instead\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">SignalsClass</span><span class=\"o\">=</span><span class=\"n\">SignalsClass</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gen</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_incoming_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_requested</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resume_requested</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paused</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"c1\"># polling interval: ONLY relevant if the user paused a running worker</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_interval</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pbar</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker.work\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.work\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Core event loop that calls the original function.</span>\n\n<span class=\"sd\">        Enters a continual loop, yielding and returning from the original</span>\n<span class=\"sd\">        function.  Checks for various events (quit, pause, resume, etc...).</span>\n<span class=\"sd\">        (To clarify: we are creating a rudimentary event loop here because</span>\n<span class=\"sd\">        there IS NO Qt event loop running in the other thread to hook into)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">abort_requested</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aborted</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paused</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resume_requested</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paused</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resume_requested</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resumed</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_interval</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_requested</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paused</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_requested</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paused</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_next_value</span><span class=\"p\">()</span>\n                <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gen</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">value</span>\n            <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n                <span class=\"c1\"># The worker has probably been deleted.  warning will be</span>\n                <span class=\"c1\"># emitted in ``WorkerBase.run``</span>\n                <span class=\"k\">return</span> <span class=\"n\">exc</span></div>\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker.send\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.send\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Send a value into the function (if a generator was used).\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_incoming_value</span> <span class=\"o\">=</span> <span class=\"n\">value</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_next_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_incoming_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_incoming_value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_incoming_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_paused</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Whether the worker is currently paused.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paused</span>\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker.toggle_pause\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.toggle_pause\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">toggle_pause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Request to pause the worker if playing or resume if paused.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_paused</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resume_requested</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_requested</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker.pause\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.pause\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Request to pause the worker.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_paused</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pause_requested</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"GeneratorWorker.resume\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.GeneratorWorker.html#napari.qt.threading.GeneratorWorker.resume\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resume</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Send a request to resume the worker.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_paused</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resume_requested</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div></div>\n\n\n<span class=\"c1\">############################################################################</span>\n\n<span class=\"c1\"># public API</span>\n\n<span class=\"c1\"># For now, the next three functions simply wrap the QThreadPool API, and allow</span>\n<span class=\"c1\"># us to track and cleanup all workers that were started with ``start_worker``,</span>\n<span class=\"c1\"># provided that ``wait_for_workers_to_quit`` is called at shutdown.</span>\n<span class=\"c1\"># In the future, this could wrap any API, or a pure python threadpool.</span>\n\n\n<div class=\"viewcode-block\" id=\"set_max_thread_count\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.html#napari.qt.threading.set_max_thread_count\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">set_max_thread_count</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Set the maximum number of threads used by the thread pool.</span>\n\n<span class=\"sd\">    Note: The thread pool will always use at least 1 thread, even if</span>\n<span class=\"sd\">    maxThreadCount limit is zero or negative.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">QThreadPool</span><span class=\"o\">.</span><span class=\"n\">globalInstance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setMaxThreadCount</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wait_for_workers_to_quit</span><span class=\"p\">(</span><span class=\"n\">msecs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Ask all workers to quit, and wait up to `msec` for quit.</span>\n\n<span class=\"sd\">    Attempts to clean up all running workers by calling ``worker.quit()``</span>\n<span class=\"sd\">    method.  Any workers in the ``WorkerBase._worker_set`` set will have this</span>\n<span class=\"sd\">    method.</span>\n\n<span class=\"sd\">    By default, this function will block indefinitely, until worker threads</span>\n<span class=\"sd\">    finish.  If a timeout is provided, a ``RuntimeError`` will be raised if</span>\n<span class=\"sd\">    the workers do not gracefully exit in the time requests, but the threads</span>\n<span class=\"sd\">    will NOT be killed.  It is (currently) left to the user to use their OS</span>\n<span class=\"sd\">    to force-quit rogue threads.</span>\n\n<span class=\"sd\">    .. important::</span>\n\n<span class=\"sd\">        If the user does not put any yields in their function, and the function</span>\n<span class=\"sd\">        is super long, it will just hang... For instance, there's no graceful</span>\n<span class=\"sd\">        way to kill this thread in python:</span>\n\n<span class=\"sd\">        .. code-block:: python</span>\n\n<span class=\"sd\">            @thread_worker</span>\n<span class=\"sd\">            def ZZZzzz():</span>\n<span class=\"sd\">                time.sleep(10000000)</span>\n\n<span class=\"sd\">        This is why it's always advisable to use a generator that periodically</span>\n<span class=\"sd\">        yields for long-running computations in another thread.</span>\n\n<span class=\"sd\">        See `this stack-overflow post</span>\n<span class=\"sd\">        &lt;https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread&gt;`_</span>\n<span class=\"sd\">        for a good discussion on the difficulty of killing a rogue python thread:</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    msecs : int, optional</span>\n<span class=\"sd\">        Waits up to msecs milliseconds for all threads to exit and removes all</span>\n<span class=\"sd\">        threads from the thread pool. If msecs is `None` (the default), the</span>\n<span class=\"sd\">        timeout is ignored (waits for the last thread to exit).</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    RuntimeError</span>\n<span class=\"sd\">        If a timeout is provided and workers do not quit successfully within</span>\n<span class=\"sd\">        the time allotted.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">worker</span> <span class=\"ow\">in</span> <span class=\"n\">WorkerBase</span><span class=\"o\">.</span><span class=\"n\">_worker_set</span><span class=\"p\">:</span>\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n\n    <span class=\"n\">msecs</span> <span class=\"o\">=</span> <span class=\"n\">msecs</span> <span class=\"k\">if</span> <span class=\"n\">msecs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">QThreadPool</span><span class=\"o\">.</span><span class=\"n\">globalInstance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">waitForDone</span><span class=\"p\">(</span><span class=\"n\">msecs</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Workers did not quit gracefully in the time allotted (</span><span class=\"si\">{msecs}</span><span class=\"s2\"> ms)\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">msecs</span><span class=\"o\">=</span><span class=\"n\">msecs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"active_thread_count\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.html#napari.qt.threading.active_thread_count\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">active_thread_count</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return the number of active threads in the global ThreadPool.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">QThreadPool</span><span class=\"o\">.</span><span class=\"n\">globalInstance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">activeThreadCount</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\">#############################################################################</span>\n\n<span class=\"c1\"># convenience functions for creating Worker instances</span>\n\n\n<div class=\"viewcode-block\" id=\"create_worker\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.qt.threading.html#napari.qt.threading.create_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_worker</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"n\">_start_thread</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_connect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_progress</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_worker_class</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">WorkerBase</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_ignore_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">WorkerBase</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Convenience function to start a function in another thread.</span>\n\n<span class=\"sd\">    By default, uses :class:`Worker`, but a custom ``WorkerBase`` subclass may</span>\n<span class=\"sd\">    be provided.  If so, it must be a subclass of :class:`Worker`, which</span>\n<span class=\"sd\">    defines a standard set of signals and a run method.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    func : Callable</span>\n<span class=\"sd\">        The function to call in another thread.</span>\n<span class=\"sd\">    _start_thread : bool, optional</span>\n<span class=\"sd\">        Whether to immediaetly start the thread.  If False, the returned worker</span>\n<span class=\"sd\">        must be manually started with ``worker.start()``. by default it will be</span>\n<span class=\"sd\">        ``False`` if the ``_connect`` argument is ``None``, otherwise ``True``.</span>\n<span class=\"sd\">    _connect : Dict[str, Union[Callable, Sequence]], optional</span>\n<span class=\"sd\">        A mapping of ``\"signal_name\"`` -&gt; ``callable`` or list of ``callable``:</span>\n<span class=\"sd\">        callback functions to connect to the various signals offered by the</span>\n<span class=\"sd\">        worker class. by default None</span>\n<span class=\"sd\">    _progress : Union[bool, Dict[str, Union[int, bool, str]]], optional</span>\n<span class=\"sd\">        Can be True, to provide indeterminate progress bar, or dictionary.</span>\n<span class=\"sd\">        If dict, requires mapping of 'total' to number of expected yields.</span>\n<span class=\"sd\">        If total is not provided, progress bar will be indeterminate. Will connect</span>\n<span class=\"sd\">        progress bar update to yields and display this progress in the viewer.</span>\n<span class=\"sd\">        Can also take a mapping of 'desc' to the progress bar description.</span>\n<span class=\"sd\">        Progress bar will become indeterminate when number of yields exceeds 'total'.</span>\n<span class=\"sd\">        By default None.</span>\n<span class=\"sd\">    _worker_class : Type[WorkerBase], optional</span>\n<span class=\"sd\">        The :class`WorkerBase` to instantiate, by default</span>\n<span class=\"sd\">        :class:`FunctionWorker` will be used if ``func`` is a regular function,</span>\n<span class=\"sd\">        and :class:`GeneratorWorker` will be used if it is a generator.</span>\n<span class=\"sd\">    _ignore_errors : bool, optional</span>\n<span class=\"sd\">        If ``False`` (the default), errors raised in the other thread will be</span>\n<span class=\"sd\">        reraised in the main thread (makes debugging significantly easier).</span>\n<span class=\"sd\">    *args</span>\n<span class=\"sd\">        will be passed to ``func``</span>\n<span class=\"sd\">    **kwargs</span>\n<span class=\"sd\">        will be passed to ``func``</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    worker : WorkerBase</span>\n<span class=\"sd\">        An instantiated worker.  If ``_start_thread`` was ``False``, the worker</span>\n<span class=\"sd\">        will have a `.start()` method that can be used to start the thread.</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If a worker_class is provided that is not a subclass of WorkerBase.</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If _connect is provided and is not a dict of ``{str: callable}``</span>\n<span class=\"sd\">    TypeError</span>\n<span class=\"sd\">        If _progress is provided and function is not a generator</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        def long_function(duration):</span>\n<span class=\"sd\">            import time</span>\n<span class=\"sd\">            time.sleep(duration)</span>\n\n<span class=\"sd\">        worker = create_worker(long_function, 10)</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_worker_class</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isgeneratorfunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"n\">_worker_class</span> <span class=\"o\">=</span> <span class=\"n\">GeneratorWorker</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_worker_class</span> <span class=\"o\">=</span> <span class=\"n\">FunctionWorker</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span>\n        <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isclass</span><span class=\"p\">(</span><span class=\"n\">_worker_class</span><span class=\"p\">)</span>\n        <span class=\"ow\">and</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">_worker_class</span><span class=\"p\">,</span> <span class=\"n\">WorkerBase</span><span class=\"p\">)</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Worker </span><span class=\"si\">{_worker_class}</span><span class=\"s1\"> must be a subclass of WorkerBase'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">_worker_class</span><span class=\"o\">=</span><span class=\"n\">_worker_class</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">_worker_class</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_connect</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_connect</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"The '_connect' argument must be a dict\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">_start_thread</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">_start_thread</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">_connect</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">_val</span> <span class=\"o\">=</span> <span class=\"n\">val</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">))</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">_val</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s1\">'\"_connect[</span><span class=\"si\">{key!r}</span><span class=\"s1\">]\" must be a function or sequence of functions'</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># either True or a non-empty dictionary</span>\n    <span class=\"k\">if</span> <span class=\"n\">_progress</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_progress</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"n\">_progress</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'total'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">FunctionWorker</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">total</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"_progress total != 0 but worker is FunctionWorker and will not yield. Returning indeterminate progress bar...\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"ne\">RuntimeWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">pbar</span> <span class=\"o\">=</span> <span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"n\">desc</span><span class=\"p\">)</span>\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">GeneratorWorker</span><span class=\"p\">):</span>\n            <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">yielded</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">increment_with_overflow</span><span class=\"p\">)</span>\n\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">pbar</span> <span class=\"o\">=</span> <span class=\"n\">pbar</span>\n\n    <span class=\"c1\"># if the user has not provided a default connection for the \"errored\"</span>\n    <span class=\"c1\"># signal... and they have not explicitly set ``ignore_errors=True``</span>\n    <span class=\"c1\"># Then rereaise any errors from the thread.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ignore_errors</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">_connect</span> <span class=\"ow\">or</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'errored'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">reraise</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">errored</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">reraise</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_start_thread</span><span class=\"p\">:</span>\n        <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">worker</span></div>\n\n\n<span class=\"nd\">@tz</span><span class=\"o\">.</span><span class=\"n\">curry</span>\n<span class=\"k\">def</span> <span class=\"nf\">thread_worker</span><span class=\"p\">(</span>\n    <span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"n\">start_thread</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">connect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">worker_class</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">WorkerBase</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ignore_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Decorator that runs a function in a separate thread when called.</span>\n\n<span class=\"sd\">    When called, the decorated function returns a :class:`WorkerBase`.  See</span>\n<span class=\"sd\">    :func:`create_worker` for additional keyword arguments that can be used</span>\n<span class=\"sd\">    when calling the function.</span>\n\n<span class=\"sd\">    The returned worker will have these signals:</span>\n\n<span class=\"sd\">        - *started*: emitted when the work is started</span>\n<span class=\"sd\">        - *finished*: emitted when the work is finished</span>\n<span class=\"sd\">        - *returned*: emitted with return value</span>\n<span class=\"sd\">        - *errored*: emitted with error object on Exception</span>\n\n<span class=\"sd\">    It will also have a ``worker.start()`` method that can be used to start</span>\n<span class=\"sd\">    execution of the function in another thread. (useful if you need to connect</span>\n<span class=\"sd\">    callbacks to signals prior to execution)</span>\n\n<span class=\"sd\">    If the decorated function is a generator, the returned worker will also</span>\n<span class=\"sd\">    provide these signals:</span>\n\n<span class=\"sd\">        - *yielded*: emitted with yielded values</span>\n<span class=\"sd\">        - *paused*: emitted when a running job has successfully paused</span>\n<span class=\"sd\">        - *resumed*: emitted when a paused job has successfully resumed</span>\n<span class=\"sd\">        - *aborted*: emitted when a running job is successfully aborted</span>\n\n<span class=\"sd\">    And these methods:</span>\n\n<span class=\"sd\">        - *quit*: ask the thread to quit</span>\n<span class=\"sd\">        - *toggle_paused*: toggle the running state of the thread.</span>\n<span class=\"sd\">        - *send*: send a value into the generator.  (This requires that your</span>\n<span class=\"sd\">          decorator function uses the ``value = yield`` syntax)</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    function : callable</span>\n<span class=\"sd\">        Function to call in another thread.  For communication between threads</span>\n<span class=\"sd\">        may be a generator function.</span>\n<span class=\"sd\">    start_thread : bool, optional</span>\n<span class=\"sd\">        Whether to immediaetly start the thread.  If False, the returned worker</span>\n<span class=\"sd\">        must be manually started with ``worker.start()``. by default it will be</span>\n<span class=\"sd\">        ``False`` if the ``_connect`` argument is ``None``, otherwise ``True``.</span>\n<span class=\"sd\">    connect : Dict[str, Union[Callable, Sequence]], optional</span>\n<span class=\"sd\">        A mapping of ``\"signal_name\"`` -&gt; ``callable`` or list of ``callable``:</span>\n<span class=\"sd\">        callback functions to connect to the various signals offered by the</span>\n<span class=\"sd\">        worker class. by default None</span>\n<span class=\"sd\">    progress : Union[bool, Dict[str, Union[int, bool, str]]], optional</span>\n<span class=\"sd\">        Can be True, to provide indeterminate progress bar, or dictionary.</span>\n<span class=\"sd\">        If dict, requires mapping of 'total' to number of expected yields.</span>\n<span class=\"sd\">        If total is not provided, progress bar will be indeterminate. Will connect</span>\n<span class=\"sd\">        progress bar update to yields and display this progress in the viewer.</span>\n<span class=\"sd\">        Can also take a mapping of 'desc' to the progress bar description.</span>\n<span class=\"sd\">        Progress bar will become indeterminate when number of yields exceeds 'total'.</span>\n<span class=\"sd\">        By default None. Must be used in conjunction with a generator function.</span>\n<span class=\"sd\">    worker_class : Type[WorkerBase], optional</span>\n<span class=\"sd\">        The :class`WorkerBase` to instantiate, by default</span>\n<span class=\"sd\">        :class:`FunctionWorker` will be used if ``func`` is a regular function,</span>\n<span class=\"sd\">        and :class:`GeneratorWorker` will be used if it is a generator.</span>\n<span class=\"sd\">    ignore_errors : bool, optional</span>\n<span class=\"sd\">        If ``False`` (the default), errors raised in the other thread will be</span>\n<span class=\"sd\">        reraised in the main thread (makes debugging significantly easier).</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    callable</span>\n<span class=\"sd\">        function that creates a worker, puts it in a new thread and returns</span>\n<span class=\"sd\">        the worker instance.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        @thread_worker</span>\n<span class=\"sd\">        def long_function(start, end):</span>\n<span class=\"sd\">            # do work, periodically yielding</span>\n<span class=\"sd\">            i = start</span>\n<span class=\"sd\">            while i &lt;= end:</span>\n<span class=\"sd\">                time.sleep(0.1)</span>\n<span class=\"sd\">                yield i</span>\n\n<span class=\"sd\">            # do teardown</span>\n<span class=\"sd\">            return 'anything'</span>\n\n<span class=\"sd\">        # call the function to start running in another thread.</span>\n<span class=\"sd\">        worker = long_function()</span>\n<span class=\"sd\">        # connect signals here if desired... or they may be added using the</span>\n<span class=\"sd\">        # `connect` argument in the `@thread_worker` decorator... in which</span>\n<span class=\"sd\">        # case the worker will start immediately when long_function() is called</span>\n<span class=\"sd\">        worker.start()</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">worker_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># decorator kwargs can be overridden at call time by using the</span>\n        <span class=\"c1\"># underscore-prefixed version of the kwarg.</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_start_thread'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_start_thread'</span><span class=\"p\">,</span> <span class=\"n\">start_thread</span><span class=\"p\">)</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_connect'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_connect'</span><span class=\"p\">,</span> <span class=\"n\">connect</span><span class=\"p\">)</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_progress'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_progress'</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">)</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_worker_class'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_worker_class'</span><span class=\"p\">,</span> <span class=\"n\">worker_class</span><span class=\"p\">)</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'_ignore_errors'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'_ignore_errors'</span><span class=\"p\">,</span> <span class=\"n\">ignore_errors</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">create_worker</span><span class=\"p\">(</span>\n            <span class=\"n\">function</span><span class=\"p\">,</span>\n            <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">worker_function</span>\n\n\n<span class=\"c1\">############################################################################</span>\n\n<span class=\"c1\"># This is a variant on the above pattern, it uses QThread instead of Qrunnable</span>\n<span class=\"c1\"># see https://doc.qt.io/qt-5/threads-technologies.html#comparison-of-solutions</span>\n<span class=\"c1\"># (it appears from that table that QRunnable cannot emit or receive signals,</span>\n<span class=\"c1\"># but we circumvent that here with our WorkerBase class that also inherits from</span>\n<span class=\"c1\"># QObject... providing signals/slots).</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># A benefit of the QRunnable pattern is that Qt manages the threads for you,</span>\n<span class=\"c1\"># in the QThreadPool.globalInstance() ... making it easier to reuse threads,</span>\n<span class=\"c1\"># and reduce overhead.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># However, a disadvantage is that you have no access to (and therefore less</span>\n<span class=\"c1\"># control over) the QThread itself.  See for example all of the methods</span>\n<span class=\"c1\"># provided on the QThread object: https://doc.qt.io/qt-5/qthread.html</span>\n\n\n<span class=\"c1\"># TODO: potentially remove this altogether, by refactoring the dims</span>\n<span class=\"c1\"># AnimationWorker to subclass WorkerBase</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_new_worker_qthread</span><span class=\"p\">(</span>\n    <span class=\"n\">Worker</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">QObject</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"n\">_start_thread</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">_connect</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This is a convenience function to start a worker in a Qthread.</span>\n\n<span class=\"sd\">    In most cases, the @thread_worker decorator is sufficient and preferable.</span>\n<span class=\"sd\">    But this allows the user to completely customize the Worker object.</span>\n<span class=\"sd\">    However, they must then maintain control over the thread and clean up</span>\n<span class=\"sd\">    appropriately.</span>\n\n<span class=\"sd\">    It follows the pattern described here:</span>\n<span class=\"sd\">    https://www.qt.io/blog/2010/06/17/youre-doing-it-wrong</span>\n<span class=\"sd\">    and</span>\n<span class=\"sd\">    https://doc.qt.io/qt-5/qthread.html#details</span>\n\n<span class=\"sd\">    see also:</span>\n<span class=\"sd\">    https://mayaposch.wordpress.com/2011/11/01/how-to-really-truly-use-qthreads-the-full-explanation/</span>\n\n<span class=\"sd\">    A QThread object is not a thread! It should be thought of as a class to</span>\n<span class=\"sd\">    *manage* a thread, not as the actual code or object that runs in that</span>\n<span class=\"sd\">    thread.  The QThread object is created on the main thread and lives there.</span>\n\n<span class=\"sd\">    Worker objects which derive from QObject are the things that actually do</span>\n<span class=\"sd\">    the work. They can be moved to a QThread as is done here.</span>\n\n<span class=\"sd\">    .. note:: Mostly ignorable detail</span>\n\n<span class=\"sd\">        While the signals/slots syntax of the worker looks very similar to</span>\n<span class=\"sd\">        standard \"single-threaded\" signals &amp; slots, note that inter-thread</span>\n<span class=\"sd\">        signals and slots (automatically) use an event-based QueuedConnection,</span>\n<span class=\"sd\">        while intra-thread signals use a DirectConnection. See `Signals and</span>\n<span class=\"sd\">        Slots Across Threads</span>\n<span class=\"sd\">        &lt;https://doc.qt.io/qt-5/threads-qobject.html#signals-and-slots-across-threads&gt;`_</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    Worker : QObject</span>\n<span class=\"sd\">        QObject type that implements a work() method.  The Worker should also</span>\n<span class=\"sd\">        emit a finished signal when the work is done.</span>\n<span class=\"sd\">    _start_thread : bool</span>\n<span class=\"sd\">        If True, thread will be started immediately, otherwise, thread must</span>\n<span class=\"sd\">        be manually started with thread.start().</span>\n<span class=\"sd\">    _connect : dict, optional</span>\n<span class=\"sd\">        Optional dictionary of {signal: function} to connect to the new worker.</span>\n<span class=\"sd\">        for instance:  connections = {'incremented': myfunc} will result in:</span>\n<span class=\"sd\">        worker.incremented.connect(myfunc)</span>\n<span class=\"sd\">    *args</span>\n<span class=\"sd\">        will be passed to the Worker class on instantiation.</span>\n<span class=\"sd\">    **kwargs</span>\n<span class=\"sd\">        will be passed to the Worker class on instantiation.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    worker : WorkerBase</span>\n<span class=\"sd\">        The created worker.</span>\n<span class=\"sd\">    thread : QThread</span>\n<span class=\"sd\">        The thread on which the worker is running.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create some QObject that has a long-running work method:</span>\n\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        class Worker(QObject):</span>\n\n<span class=\"sd\">            finished = Signal()</span>\n<span class=\"sd\">            increment = Signal(int)</span>\n\n<span class=\"sd\">            def __init__(self, argument):</span>\n<span class=\"sd\">                super().__init__()</span>\n<span class=\"sd\">                self.argument = argument</span>\n\n<span class=\"sd\">            @Slot()</span>\n<span class=\"sd\">            def work(self):</span>\n<span class=\"sd\">                # some long running task...</span>\n<span class=\"sd\">                import time</span>\n<span class=\"sd\">                for i in range(10):</span>\n<span class=\"sd\">                    time.sleep(1)</span>\n<span class=\"sd\">                    self.increment.emit(i)</span>\n<span class=\"sd\">                self.finished.emit()</span>\n\n<span class=\"sd\">        worker, thread = _new_worker_qthread(</span>\n<span class=\"sd\">            Worker,</span>\n<span class=\"sd\">            'argument',</span>\n<span class=\"sd\">            start_thread=True,</span>\n<span class=\"sd\">            connections={'increment': print},</span>\n<span class=\"sd\">        )</span>\n\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_connect</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_connect</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'_connect parameter must be a dict'</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">QThread</span><span class=\"p\">()</span>\n    <span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">Worker</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">moveToThread</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">)</span>\n    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">work</span><span class=\"p\">)</span>\n    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n    <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">deleteLater</span><span class=\"p\">)</span>\n    <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">deleteLater</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_connect</span><span class=\"p\">:</span>\n        <span class=\"p\">[</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">_connect</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">_start_thread</span><span class=\"p\">:</span>\n        <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>  <span class=\"c1\"># sometimes need to connect stuff before starting</span>\n    <span class=\"k\">return</span> <span class=\"n\">worker</span><span class=\"p\">,</span> <span class=\"n\">thread</span>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}