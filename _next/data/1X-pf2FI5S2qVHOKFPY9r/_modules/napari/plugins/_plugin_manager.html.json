{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html","/tutorials/further-resources/napari-workshops.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.plugins._plugin_manager","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Any</span><span class=\"p\">,</span>\n    <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">Iterable</span><span class=\"p\">,</span>\n    <span class=\"n\">Iterator</span><span class=\"p\">,</span>\n    <span class=\"n\">List</span><span class=\"p\">,</span>\n    <span class=\"n\">Optional</span><span class=\"p\">,</span>\n    <span class=\"n\">Tuple</span><span class=\"p\">,</span>\n    <span class=\"n\">Union</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">warnings</span> <span class=\"kn\">import</span> <span class=\"n\">warn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">HookImplementation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine</span> <span class=\"kn\">import</span> <span class=\"n\">PluginManager</span> <span class=\"k\">as</span> <span class=\"n\">PluginManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">napari_plugin_engine.hooks</span> <span class=\"kn\">import</span> <span class=\"n\">HookCaller</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">TypedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..types</span> <span class=\"kn\">import</span> <span class=\"n\">AugmentedWidget</span><span class=\"p\">,</span> <span class=\"n\">LayerData</span><span class=\"p\">,</span> <span class=\"n\">SampleDict</span><span class=\"p\">,</span> <span class=\"n\">WidgetCallable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils._appdirs</span> <span class=\"kn\">import</span> <span class=\"n\">user_site_packages</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">EmitterGroup</span><span class=\"p\">,</span> <span class=\"n\">EventedSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">camel_to_spaces</span><span class=\"p\">,</span> <span class=\"n\">running_as_bundled_app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.theme</span> <span class=\"kn\">import</span> <span class=\"n\">Theme</span><span class=\"p\">,</span> <span class=\"n\">register_theme</span><span class=\"p\">,</span> <span class=\"n\">unregister_theme</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">_builtins</span><span class=\"p\">,</span> <span class=\"n\">hook_specifications</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PluginHookOption</span><span class=\"p\">(</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Custom type specifying plugin and enabled state.\"\"\"</span>\n\n    <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n\n\n<span class=\"n\">CallOrderDict</span> <span class=\"o\">=</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PluginHookOption</span><span class=\"p\">]]</span>\n\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">NapariPluginManager</span><span class=\"p\">(</span><span class=\"n\">PluginManager</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"PluginManager subclass for napari-specific functionality.</span>\n\n<span class=\"sd\">    Events</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    registered (value: str)</span>\n<span class=\"sd\">        Emitted after plugin named `value` has been registered.</span>\n<span class=\"sd\">    unregistered (value: str)</span>\n<span class=\"sd\">        Emitted after plugin named `value` has been unregistered.</span>\n<span class=\"sd\">    enabled (value: str)</span>\n<span class=\"sd\">        Emitted after plugin named `value` has been removed from the block list.</span>\n<span class=\"sd\">    disabled (value: str)</span>\n<span class=\"sd\">        Emitted after plugin named `value` has been added to the block list.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">ENTRY_POINT</span> <span class=\"o\">=</span> <span class=\"s1\">'napari.plugin'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s1\">'napari'</span><span class=\"p\">,</span> <span class=\"n\">discover_entry_point</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ENTRY_POINT</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">EmitterGroup</span><span class=\"p\">(</span>\n            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">registered</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">unregistered</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blocked</span><span class=\"p\">:</span> <span class=\"n\">EventedSet</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">EventedSet</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blocked</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_blocked_change</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">discovery_blocked</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_hookspecs</span><span class=\"p\">(</span><span class=\"n\">hook_specifications</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># dicts to store maps from extension -&gt; plugin_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2reader</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2writer</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">SampleDict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span>\n            <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">WidgetCallable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span>\n        <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Theme</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'linux'</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">running_as_bundled_app</span><span class=\"p\">():</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">user_site_packages</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">discovery_blocked</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">_builtins</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'builtins'</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">find_spec</span><span class=\"p\">(</span><span class=\"s2\">\"skimage\"</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">_skimage_data</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">_skimage_data</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'scikit-image'</span><span class=\"p\">)</span>\n\n            <span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n\n            <span class=\"c1\"># dicts to store maps from extension -&gt; plugin_name</span>\n            <span class=\"n\">plugin_settings</span> <span class=\"o\">=</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plugins</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2reader</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">plugin_settings</span><span class=\"o\">.</span><span class=\"n\">extension2reader</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2writer</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">plugin_settings</span><span class=\"o\">.</span><span class=\"n\">extension2writer</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.register\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.register\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">registered</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.unregister\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.unregister\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unregister</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name_or_object</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">name_or_object</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name_or_object</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">(</span><span class=\"n\">name_or_object</span><span class=\"p\">)</span>\n\n        <span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">name_or_object</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># unregister any theme that was associated with the</span>\n        <span class=\"c1\"># unregistered plugin</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unregister_theme_colors</span><span class=\"p\">(</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># remove widgets, sample data, theme data</span>\n        <span class=\"k\">for</span> <span class=\"n\">_dict</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">unregistered</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">plugin</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_blocked_change</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"c1\"># things that are \"added to the blocked list\" become disabled</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">added</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">disabled</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># things that are \"removed from the blocked list\" become enabled</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">removed</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">removed</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if an event was removed from the \"disabled\" list...</span>\n            <span class=\"c1\"># let's reregister.  # TODO: might be able to be more direct here.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">discover</span><span class=\"p\">()</span>\n\n        <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">disabled_plugins</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_blocked</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.call_order\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.call_order\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">call_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_result_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">CallOrderDict</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Returns the call order from the plugin manager.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        call_order : CallOrderDict</span>\n<span class=\"sd\">            mapping of hook_specification name, to a list of dicts with keys:</span>\n<span class=\"sd\">            {'plugin', 'enabled'}.  Plugins earlier in the dict are called</span>\n<span class=\"sd\">            sooner.</span>\n<span class=\"sd\">        \"\"\"</span>\n\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">spec_name</span><span class=\"p\">,</span> <span class=\"n\">caller</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># no need to save call order unless we only use first result</span>\n            <span class=\"k\">if</span> <span class=\"n\">first_result_only</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">caller</span><span class=\"o\">.</span><span class=\"n\">is_firstresult</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">impls</span> <span class=\"o\">=</span> <span class=\"n\">caller</span><span class=\"o\">.</span><span class=\"n\">get_hookimpls</span><span class=\"p\">()</span>\n            <span class=\"c1\"># no need to save call order if there is only a single item</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">impls</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"n\">spec_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s1\">'plugin'</span><span class=\"p\">:</span> <span class=\"n\">impl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span> <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"n\">impl</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">}</span>\n                    <span class=\"k\">for</span> <span class=\"n\">impl</span> <span class=\"ow\">in</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">impls</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">order</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.set_call_order\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.set_call_order\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">set_call_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_order</span><span class=\"p\">:</span> <span class=\"n\">CallOrderDict</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Sets the plugin manager call order to match settings plugin values.</span>\n\n<span class=\"sd\">        Note: Run this after load_settings_plugin_defaults, which</span>\n<span class=\"sd\">        sets the default values in settings.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        new_order : CallOrderDict</span>\n<span class=\"sd\">            mapping of hook_specification name, to a list of dicts with keys:</span>\n<span class=\"sd\">            {'plugin', 'enabled'}.  Plugins earlier in the dict are called</span>\n<span class=\"sd\">            sooner.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">spec_name</span><span class=\"p\">,</span> <span class=\"n\">hook_caller</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">spec_name</span> <span class=\"ow\">in</span> <span class=\"n\">new_order</span><span class=\"p\">:</span>\n                <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">new_order</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">spec_name</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># the plugin may not be there if its been disabled.</span>\n                        <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">_set_plugin_enabled</span><span class=\"p\">(</span>\n                            <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'plugin'</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'enabled'</span><span class=\"p\">]</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'plugin'</span><span class=\"p\">])</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">order</span><span class=\"p\">:</span>\n                    <span class=\"n\">hook_caller</span><span class=\"o\">.</span><span class=\"n\">bring_to_front</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># SAMPLE DATA ---------------------------</span>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.register_sample_data\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.register_sample_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">register_sample_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">LayerData</span><span class=\"p\">]]]],</span>\n        <span class=\"n\">hookimpl</span><span class=\"p\">:</span> <span class=\"n\">HookImplementation</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Register sample data dict returned by `napari_provide_sample_data`.</span>\n\n<span class=\"sd\">        Each key in `data` is a `sample_name` (the string that will appear in the</span>\n<span class=\"sd\">        `Open Sample` menu), and the value is either a string, or a callable that</span>\n<span class=\"sd\">        returns an iterable of ``LayerData`` tuples, where each tuple is a 1-, 2-,</span>\n<span class=\"sd\">        or 3-tuple of ``(data,)``, ``(data, meta)``, or ``(data, meta,</span>\n<span class=\"sd\">        layer_type)``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : Dict[str, Union[str, Callable[..., Iterable[LayerData]]]]</span>\n<span class=\"sd\">            A mapping of {sample_name-&gt;data}</span>\n<span class=\"sd\">        hookimpl : HookImplementation</span>\n<span class=\"sd\">            The hook implementation that returned the dict</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">hookimpl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span>\n        <span class=\"n\">hook_name</span> <span class=\"o\">=</span> <span class=\"s1\">'napari_provide_sample_data'</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided a non-dict object to </span><span class=\"si\">{hook_name!r}</span><span class=\"s1\">: data ignored.'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">datum</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">datum</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"s1\">'data'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">datum</span> <span class=\"ow\">or</span> <span class=\"s1\">'display_name'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">datum</span><span class=\"p\">:</span>\n                    <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'In </span><span class=\"si\">{hook_name!r}</span><span class=\"s1\">, plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided an invalid dict object for key </span><span class=\"si\">{name!r}</span><span class=\"s1\"> that does not have required keys: \"data\" and \"display_name\". Ignoring'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                        <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">datum</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">datum</span><span class=\"p\">,</span> <span class=\"s1\">'display_name'</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span>\n                <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">datum</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">])</span>\n                <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">datum</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">))</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided invalid data for key </span><span class=\"si\">{name!r}</span><span class=\"s1\"> in the dict returned by </span><span class=\"si\">{hook_name!r}</span><span class=\"s1\">. (Must be str, callable, or dict), got (</span><span class=\"si\">{dtype}</span><span class=\"s1\">).'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">datum</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">]),</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datum</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.available_samples\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.available_samples\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">available_samples</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Return a tuple of sample data keys provided by plugins.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        sample_keys : Tuple[Tuple[str, str], ...]</span>\n<span class=\"sd\">            A sequence of 2-tuples ``(plugin_name, sample_name)`` showing available</span>\n<span class=\"sd\">            sample data provided by plugins.  To load sample data into the viewer,</span>\n<span class=\"sd\">            use :meth:`napari.Viewer.open_sample`.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        .. code-block:: python</span>\n\n<span class=\"sd\">            from napari.plugins import available_samples</span>\n\n<span class=\"sd\">            sample_keys = available_samples()</span>\n<span class=\"sd\">            if sample_keys:</span>\n<span class=\"sd\">                # load first available sample</span>\n<span class=\"sd\">                viewer.open_sample(*sample_keys[0])</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># THEME DATA ------------------------------------</span>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.register_theme_colors\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.register_theme_colors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">register_theme_colors</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">]]],</span>\n        <span class=\"n\">hookimpl</span><span class=\"p\">:</span> <span class=\"n\">HookImplementation</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Register theme data dict returned by `napari_experimental_provide_theme`.</span>\n\n<span class=\"sd\">        The `theme` data should be provided as an iterable containing dictionary</span>\n<span class=\"sd\">        of values, where the ``folder`` value will be used as theme name.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">hookimpl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span>\n        <span class=\"n\">hook_name</span> <span class=\"o\">=</span> <span class=\"s1\">'`napari_experimental_provide_theme`'</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">):</span>\n            <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided a non-dict object to </span><span class=\"si\">{hook_name!r}</span><span class=\"s1\">: data ignored'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">theme_name</span><span class=\"p\">,</span> <span class=\"n\">theme_colors</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">theme</span> <span class=\"o\">=</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span><span class=\"n\">theme_colors</span><span class=\"p\">)</span>\n                <span class=\"n\">register_theme</span><span class=\"p\">(</span><span class=\"n\">theme_name</span><span class=\"p\">,</span> <span class=\"n\">theme</span><span class=\"p\">)</span>\n                <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">theme_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">theme</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                <span class=\"n\">warn_msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"In </span><span class=\"si\">{hook_name!r}</span><span class=\"s2\">, plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s2\"> provided an invalid dict object\"</span>\n                    <span class=\"s2\">\" for creating themes. </span><span class=\"si\">{err!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">err</span><span class=\"o\">=</span><span class=\"n\">err</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_msg</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.unregister_theme_colors\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.unregister_theme_colors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unregister_theme_colors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Unregister theme data from napari.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"c1\"># unregister all themes that were provided by the plugins</span>\n        <span class=\"k\">for</span> <span class=\"n\">theme_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]:</span>\n            <span class=\"n\">unregister_theme</span><span class=\"p\">(</span><span class=\"n\">theme_name</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># since its possible that disabled/removed plugin was providing the</span>\n        <span class=\"c1\"># current theme, we check for this explicitly and if this the case,</span>\n        <span class=\"c1\"># theme is automatically changed to default `dark` theme</span>\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span>\n        <span class=\"n\">current_theme</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">appearance</span><span class=\"o\">.</span><span class=\"n\">theme</span>\n        <span class=\"k\">if</span> <span class=\"n\">current_theme</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]:</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">appearance</span><span class=\"o\">.</span><span class=\"n\">theme</span> <span class=\"o\">=</span> <span class=\"s2\">\"dark\"</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"The current theme </span><span class=\"si\">{current_theme!r}</span><span class=\"s2\"> was provided by the\"</span>\n                    <span class=\"s2\">\" plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s2\"> which was disabled or removed.\"</span>\n                    <span class=\"s2\">\" Switched theme to the default.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">current_theme</span><span class=\"o\">=</span><span class=\"n\">current_theme</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.discover_themes\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.discover_themes\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">discover_themes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Trigger discovery of theme plugins.</span>\n\n<span class=\"sd\">        As a \"historic\" hook, this should only need to be called once.</span>\n<span class=\"sd\">        (historic here means that even plugins that are discovered after this</span>\n<span class=\"sd\">        is called will be added.)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme_data</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_experimental_provide_theme</span><span class=\"o\">.</span><span class=\"n\">call_historic</span><span class=\"p\">(</span>\n            <span class=\"n\">result_callback</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_theme_colors</span><span class=\"p\">),</span> <span class=\"n\">with_impl</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># FUNCTION &amp; DOCK WIDGETS -----------------------</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">iter_widgets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]]]:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span><span class=\"p\">,</span> <span class=\"n\">repeat</span>\n\n        <span class=\"n\">dock_widgets</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"s2\">\"dock\"</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"n\">func_widgets</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"s2\">\"func\"</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">dock_widgets</span><span class=\"p\">,</span> <span class=\"n\">func_widgets</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register_dock_widget</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">AugmentedWidget</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">AugmentedWidget</span><span class=\"p\">]],</span>\n        <span class=\"n\">hookimpl</span><span class=\"p\">:</span> <span class=\"n\">HookImplementation</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">hookimpl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span>\n        <span class=\"n\">hook_name</span> <span class=\"o\">=</span> <span class=\"s1\">'`napari_experimental_provide_dock_widget`'</span>\n        <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">args</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">arg</span><span class=\"p\">:</span>\n                    <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided an invalid tuple to </span><span class=\"si\">{hook_name}</span><span class=\"s1\">.  Skipping'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                        <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">_cls</span> <span class=\"o\">=</span> <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">{}</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">_cls</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">_cls</span><span class=\"p\">):</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided a non-callable object (widget) to </span><span class=\"si\">{hook_name}</span><span class=\"s1\">: </span><span class=\"si\">{_cls!r}</span><span class=\"s1\">. Widget ignored.'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">_cls</span><span class=\"o\">=</span><span class=\"n\">_cls</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n\n                <span class=\"k\">continue</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided invalid kwargs to </span><span class=\"si\">{hook_name}</span><span class=\"s1\"> for class </span><span class=\"si\">{clsname}</span><span class=\"s1\">. Widget ignored.'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">clsname</span><span class=\"o\">=</span><span class=\"n\">_cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"c1\"># Get widget name</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"n\">camel_to_spaces</span><span class=\"p\">(</span>\n                <span class=\"n\">_cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">:</span>\n                <span class=\"c1\"># tried defaultdict(dict) but got odd KeyErrors...</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]:</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> has already registered a dock widget </span><span class=\"si\">{name!r}</span><span class=\"s1\"> which has now been overwritten'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">][</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">_cls</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register_function_widget</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]],</span>\n        <span class=\"n\">hookimpl</span><span class=\"p\">:</span> <span class=\"n\">HookImplementation</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">plugin_name</span> <span class=\"o\">=</span> <span class=\"n\">hookimpl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span>\n        <span class=\"n\">hook_name</span> <span class=\"o\">=</span> <span class=\"s1\">'`napari_experimental_provide_function`'</span>\n        <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">args</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">args</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">FunctionType</span><span class=\"p\">):</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provided a non-callable type to </span><span class=\"si\">{hook_name}</span><span class=\"s1\">: </span><span class=\"si\">{functype!r}</span><span class=\"s1\">. Function widget ignored.'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">functype</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">),</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">hook_name</span><span class=\"o\">=</span><span class=\"n\">hook_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                    <span class=\"n\">warn_message</span> <span class=\"o\">+=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s2\">\" To provide multiple function widgets please use a LIST of callables\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"c1\"># Get function name</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">plugin_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">:</span>\n                <span class=\"c1\"># tried defaultdict(dict) but got odd KeyErrors...</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">]:</span>\n                <span class=\"n\">warn_message</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> has already registered a function widget </span><span class=\"si\">{name!r}</span><span class=\"s1\"> which has now been overwritten'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">warn_message</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_function_widgets</span><span class=\"p\">[</span><span class=\"n\">plugin_name</span><span class=\"p\">][</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">discover_sample_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_provide_sample_data</span><span class=\"o\">.</span><span class=\"n\">call_historic</span><span class=\"p\">(</span>\n            <span class=\"n\">result_callback</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_sample_data</span><span class=\"p\">),</span> <span class=\"n\">with_impl</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.discover_widgets\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.discover_widgets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">discover_widgets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Trigger discovery of dock_widgets plugins.</span>\n\n<span class=\"sd\">        As a \"historic\" hook, this should only need to be called once.</span>\n<span class=\"sd\">        (historic here means that even plugins that are discovered after this</span>\n<span class=\"sd\">        is called will be added.)</span>\n<span class=\"sd\">        \"\"\"</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_experimental_provide_dock_widget</span><span class=\"o\">.</span><span class=\"n\">call_historic</span><span class=\"p\">(</span>\n            <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_dock_widget</span><span class=\"p\">),</span> <span class=\"n\">with_impl</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">napari_experimental_provide_function</span><span class=\"o\">.</span><span class=\"n\">call_historic</span><span class=\"p\">(</span>\n            <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_function_widget</span><span class=\"p\">),</span> <span class=\"n\">with_impl</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.get_widget\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.get_widget\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_widget</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">widget_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">WidgetCallable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"Get widget `widget_name` provided by plugin `plugin_name`.</span>\n\n<span class=\"sd\">        Note: it's important that :func:`discover_dock_widgets` has been called</span>\n<span class=\"sd\">        first, otherwise plugins may not be found yet.  (Typically, that is done</span>\n<span class=\"sd\">        in qt_main_window)</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        plugin_name : str</span>\n<span class=\"sd\">            Name of a plugin providing a widget</span>\n<span class=\"sd\">        widget_name : str, optional</span>\n<span class=\"sd\">            Name of a widget provided by `plugin_name`. If `None`, and the</span>\n<span class=\"sd\">            specified plugin provides only a single widget, that widget will be</span>\n<span class=\"sd\">            returned, otherwise a ValueError will be raised, by default None</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        plugin_widget : Tuple[Callable, dict]</span>\n<span class=\"sd\">            Tuple of (widget_class, options).</span>\n\n<span class=\"sd\">        Raises</span>\n<span class=\"sd\">        ------</span>\n<span class=\"sd\">        KeyError</span>\n<span class=\"sd\">            If plugin `plugin_name` does not provide any widgets</span>\n<span class=\"sd\">        KeyError</span>\n<span class=\"sd\">            If plugin does not provide a widget named `widget_name`.</span>\n<span class=\"sd\">        ValueError</span>\n<span class=\"sd\">            If `widget_name` is not provided, but `plugin_name` provides more than</span>\n<span class=\"sd\">            one widget</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">plg_wdgs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dock_widgets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">plugin_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plg_wdgs</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> does not provide any dock widgets'</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">widget_name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">plg_wdgs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> provides more than 1 dock_widget. Must also provide \"widget_name\" from </span><span class=\"si\">{avail}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">plg_wdgs</span><span class=\"p\">),</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n            <span class=\"n\">widget_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">plg_wdgs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">widget_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plg_wdgs</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'Plugin </span><span class=\"si\">{plugin_name!r}</span><span class=\"s1\"> does not provide a widget named </span><span class=\"si\">{widget_name!r}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin_name</span><span class=\"o\">=</span><span class=\"n\">plugin_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">widget_name</span><span class=\"o\">=</span><span class=\"n\">widget_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">plg_wdgs</span><span class=\"p\">[</span><span class=\"n\">widget_name</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.get_reader_for_extension\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.get_reader_for_extension\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_reader_for_extension</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Return reader plugin assigned to `extension`, or None.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_plugin_for_extension</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'reader'</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.assign_reader_to_extensions\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.assign_reader_to_extensions\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">assign_reader_to_extensions</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Assign a specific reader plugin to `extensions`.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        reader : str</span>\n<span class=\"sd\">            Name of a plugin offering a reader hook.</span>\n<span class=\"sd\">        extensions : Union[str, Iterable[str]]</span>\n<span class=\"sd\">            Name(s) of extensions to always write with `reader`</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assign_plugin_to_extensions</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'reader'</span><span class=\"p\">)</span>\n        <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">extension2reader</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2reader</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.get_writer_for_extension\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.get_writer_for_extension\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_writer_for_extension</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Return writer plugin assigned to `extension`, or None.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_plugin_for_extension</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'writer'</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NapariPluginManager.assign_writer_to_extensions\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.plugins.NapariPluginManager.html#napari.plugins.NapariPluginManager.assign_writer_to_extensions\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">assign_writer_to_extensions</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Assign a specific writer plugin to `extensions`.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        writer : str</span>\n<span class=\"sd\">            Name of a plugin offering a writer hook.</span>\n<span class=\"sd\">        extensions : Union[str, Iterable[str]]</span>\n<span class=\"sd\">            Name(s) of extensions to always write with `writer`</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assign_plugin_to_extensions</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'writer'</span><span class=\"p\">)</span>\n        <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">extension2writer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extension2writer</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_plugin_for_extension</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"helper method for public get_&lt;type_&gt;_for_extension functions.\"\"\"</span>\n        <span class=\"n\">ext_map</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'_extension2</span><span class=\"si\">{</span><span class=\"n\">type_</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ext_map</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"invalid plugin type: </span><span class=\"si\">{type_!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"n\">type_</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">extension</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">):</span>\n            <span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\".</span><span class=\"si\">{</span><span class=\"n\">extension</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n        <span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">ext_map</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n        <span class=\"c1\"># make sure it's still an active plugin</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">plugin</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"p\">):</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ext_map</span><span class=\"p\">[</span><span class=\"n\">plugin</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">plugin</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_assign_plugin_to_extensions</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">extensions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span>\n        <span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"helper method for public assign_&lt;type_&gt;_to_extensions functions.\"\"\"</span>\n        <span class=\"n\">caller</span><span class=\"p\">:</span> <span class=\"n\">HookCaller</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'napari_get_</span><span class=\"si\">{</span><span class=\"n\">type_</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">caller</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"invalid plugin type: </span><span class=\"si\">{type_!r}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"n\">type_</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">plugins</span> <span class=\"o\">=</span> <span class=\"n\">caller</span><span class=\"o\">.</span><span class=\"n\">get_hookimpls</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">plugin</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">plugins</span><span class=\"p\">}:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"</span><span class=\"si\">{plugin!r}</span><span class=\"s2\"> is not a valid </span><span class=\"si\">{type_}</span><span class=\"s2\"> plugin name\"</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"n\">type_</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ext_map</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'_extension2</span><span class=\"si\">{</span><span class=\"n\">type_</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">extensions</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">extensions</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ext</span> <span class=\"ow\">in</span> <span class=\"n\">extensions</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ext</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">):</span>\n                <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\".</span><span class=\"si\">{</span><span class=\"n\">ext</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"n\">ext_map</span><span class=\"p\">[</span><span class=\"n\">ext</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">plugin</span>\n\n            <span class=\"c1\"># give warning that plugin *may* not be able to read that extension</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">caller</span><span class=\"o\">.</span><span class=\"n\">_call_plugin</span><span class=\"p\">(</span><span class=\"n\">plugin</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">'_testing_</span><span class=\"si\">{</span><span class=\"n\">ext</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">if</span> <span class=\"n\">func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'plugin </span><span class=\"si\">{plugin!r}</span><span class=\"s1\"> did not return a </span><span class=\"si\">{type_}</span><span class=\"s1\"> function when '</span>\n                    <span class=\"s1\">'provided a path ending in </span><span class=\"si\">{ext!r}</span><span class=\"s1\">.  This *may* '</span>\n                    <span class=\"s1\">'indicate a typo?'</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                    <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"n\">type_</span><span class=\"p\">,</span>\n                    <span class=\"n\">ext</span><span class=\"o\">=</span><span class=\"n\">ext</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span></div>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}