{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/release/index.html":{"level":1,"children":["/release/release_0_4_12.html","/release/release_0_4_11.html","/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_4_12.html":{"level":2,"children":[],"href":"/release/release_0_4_12.html","text":"napari 0.4.12"},"/glossary.html":{"level":1,"children":[],"href":"/glossary.html","text":"Glossary"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html","/developers/translations.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/translations.html":{"level":2,"children":[],"href":"/developers/translations.html","text":"Translations"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html","/api/stable/napari.utils.progress.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.progress.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.progress.html","text":"napari.utils.progress"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html","/api/stable/napari.types.partial.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.partial.html":{"level":3,"children":[],"href":"/api/stable/napari.types.partial.html","text":"napari.types.partial"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html","/community/working_groups.html","/community/meeting_schedule.html"],"href":"/community/index.html","text":"Community"},"/community/meeting_schedule.html":{"level":2,"children":[],"href":"/community/meeting_schedule.html","text":"Meeting schedule"},"/community/working_groups.html":{"level":2,"children":[],"href":"/community/working_groups.html","text":"Working groups"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the project and team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/best_practices.html","/plugins/stable/npe2_migration_guide.html","/plugins/stable/guides.html","/plugins/stable/first_plugin.html","/plugins/stable/test_deploy.html","/plugins/stable/npe1.html","/plugins/stable/find_and_install_plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find_and_install_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find_and_install_plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/npe1.html":{"level":2,"children":[],"href":"/plugins/stable/npe1.html","text":"1st Gen Plugin Guide (Deprecated)"},"/plugins/stable/test_deploy.html":{"level":2,"children":[],"href":"/plugins/stable/test_deploy.html","text":"Test and Deploy"},"/plugins/stable/first_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/first_plugin.html","text":"Your First Plugin"},"/plugins/stable/guides.html":{"level":2,"children":[],"href":"/plugins/stable/guides.html","text":"Contribution Guides"},"/plugins/stable/npe2_migration_guide.html":{"level":2,"children":[],"href":"/plugins/stable/npe2_migration_guide.html","text":"npe2 migration guide"},"/plugins/stable/best_practices.html":{"level":2,"children":[],"href":"/plugins/stable/best_practices.html","text":"Best practices"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/magicgui.html","/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/rendering-explanation.html","/guides/stable/rendering.html","/guides/stable/performance.html","/guides/stable/3D_interactivity.html","/guides/stable/events_reference.html","/guides/stable/contexts_expressions.html"],"href":"/guides/stable/index.html","text":"In-depth explanations"},"/guides/stable/contexts_expressions.html":{"level":2,"children":[],"href":"/guides/stable/contexts_expressions.html","text":"Contexts and Expressions in napari"},"/guides/stable/events_reference.html":{"level":2,"children":[],"href":"/guides/stable/events_reference.html","text":"Events reference"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"napari performance"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous rendering"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An introduction to the event loop in napari"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/howtos/index.html":{"level":1,"children":["/howtos/connecting_events.html","/howtos/napari_imageJ.html","/howtos/docker.html","/howtos/perfmon.html"],"href":"/howtos/index.html","text":"How-to guides"},"/howtos/perfmon.html":{"level":2,"children":[],"href":"/howtos/perfmon.html","text":"Performance monitoring"},"/howtos/docker.html":{"level":2,"children":[],"href":"/howtos/docker.html","text":"Napari in Docker"},"/howtos/napari_imageJ.html":{"level":2,"children":[],"href":"/howtos/napari_imageJ.html","text":"napari + ImageJ how-to guide"},"/howtos/connecting_events.html":{"level":2,"children":[],"href":"/howtos/connecting_events.html","text":"Hooking up your own events"},"/tutorials/index.html":{"level":1,"children":["/tutorials/segmentation/index.html","/tutorials/tracking/index.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/further-resources/napari-workshops.html","/tutorials/tracking/cell_tracking.html","/tutorials/segmentation/annotate_segmentation.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/segmentation/annotate_segmentation.html":{"level":2,"children":[],"href":"/tutorials/segmentation/annotate_segmentation.html","text":"Annotating segmentation with text and bounding boxes"},"/tutorials/tracking/cell_tracking.html":{"level":2,"children":[],"href":"/tutorials/tracking/cell_tracking.html","text":"Single cell tracking with napari"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/dask.html":{"level":2,"children":[],"href":"/tutorials/applications/dask.html","text":"Using Dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":2,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"Annotating videos with napari"},"/tutorials/tracking/index.html":{"level":2,"children":[],"href":"/tutorials/tracking/index.html","text":"Tracking"},"/tutorials/segmentation/index.html":{"level":2,"children":[],"href":"/tutorials/segmentation/index.html","text":"Segmentation"},"/tutorials/start_index.html":{"level":1,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/start_index.html","text":"Getting Started"},"/tutorials/fundamentals/vectors.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"Getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"How to install napari on your machine"}},"rootGlobalHeaders":["/tutorials/start_index.html","/tutorials/index.html","/howtos/index.html","/guides/stable/index.html","/plugins/stable/index.html","/community/index.html","/api/stable/index.html","/developers/index.html","/glossary.html","/release/index.html","/roadmaps/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.components.layerlist","pageFrontMatter":{},"previewImage":"","previewDescription":"","appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..layers</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">Labels</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers.image.image</span> <span class=\"kn\">import</span> <span class=\"n\">_ImageBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers.utils._link_layers</span> <span class=\"kn\">import</span> <span class=\"n\">get_linked_layers</span><span class=\"p\">,</span> <span class=\"n\">layer_is_linked</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils._dtype</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_dtype</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.events.containers</span> <span class=\"kn\">import</span> <span class=\"n\">SelectableEventedList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.naming</span> <span class=\"kn\">import</span> <span class=\"n\">inc_name_count</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n\n<span class=\"n\">Extent</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Extent'</span><span class=\"p\">,</span> <span class=\"s1\">'data world step'</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"LayerList\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.LayerList.html#napari.components.LayerList\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LayerList</span><span class=\"p\">(</span><span class=\"n\">SelectableEventedList</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]):</span>\n    <span class=\"sd\">\"\"\"List-like layer collection with built-in reordering and callback hooks.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : iterable</span>\n<span class=\"sd\">        Iterable of napari.layer.Layer</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">()):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">basetype</span><span class=\"o\">=</span><span class=\"n\">Layer</span><span class=\"p\">,</span>\n            <span class=\"n\">lookup</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># temporary: see note in _on_selection_event</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_selection_changed</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_selection_changed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This method is a temporary workaround to the fact that the Points</span>\n        <span class=\"c1\"># layer needs to know when its selection state changes so that it can</span>\n        <span class=\"c1\"># update the highlight state.  This (and the layer._on_selection</span>\n        <span class=\"c1\"># method) can be removed once highlighting logic has been removed from</span>\n        <span class=\"c1\"># the layer model.</span>\n        <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">added</span><span class=\"p\">:</span>\n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">_on_selection</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">removed</span><span class=\"p\">:</span>\n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">_on_selection</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__newlike__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">LayerList</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_coerce_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Coerce a name into a unique equivalent.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Original name.</span>\n<span class=\"sd\">        layer : napari.layers.Layer, optional</span>\n<span class=\"sd\">            Layer for which name is generated.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        new_name : str</span>\n<span class=\"sd\">            Coerced, unique name.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">existing_layers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">layer</span><span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">existing_layers</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">inc_name_count</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Coerce name of the layer in `event.layer`.\"\"\"</span>\n        <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">source</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coerce_name</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"LayerList.insert\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.LayerList.html#napari.components.LayerList.insert\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Layer</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Insert ``value`` before index.\"\"\"</span>\n        <span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_type_check</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coerce_name</span><span class=\"p\">(</span><span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">new_layer</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"LayerList.move_selected\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.LayerList.html#napari.components.LayerList.move_selected\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">move_selected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">insert</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Reorder list by moving the item at index and inserting it</span>\n<span class=\"sd\">        at the insert index. If additional items are selected these will</span>\n<span class=\"sd\">        get inserted at the insert index too. This allows for rearranging</span>\n<span class=\"sd\">        the list based on dragging and dropping a selection of items, where</span>\n<span class=\"sd\">        index is the index of the primary item being dragged, and insert is</span>\n<span class=\"sd\">        the index of the drop location, and the selection indicates if</span>\n<span class=\"sd\">        multiple items are being dragged. If the moved layer is not selected</span>\n<span class=\"sd\">        select it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        index : int</span>\n<span class=\"sd\">            Index of primary item to be moved</span>\n<span class=\"sd\">        insert : int</span>\n<span class=\"sd\">            Index that item(s) will be inserted at</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">select_only</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n            <span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">]</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">insert</span> <span class=\"o\">&gt;=</span> <span class=\"n\">index</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">move_multiple</span><span class=\"p\">(</span><span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">insert</span> <span class=\"o\">+</span> <span class=\"n\">offset</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"LayerList.toggle_selected_visibility\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.LayerList.html#napari.components.LayerList.toggle_selected_visibility\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">toggle_selected_visibility</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Toggle visibility of selected layers\"\"\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">:</span>\n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">visible</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layers in world coordinates.</span>\n\n<span class=\"sd\">        Default to 2D with (-0.5, 511.5) min/ max values if no data is present.</span>\n<span class=\"sd\">        Corresponds to pixels centered at [0, ..., 511].</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_world : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_extent_world</span><span class=\"p\">([</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">extent</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_min_and_max</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mins_list</span><span class=\"p\">,</span> <span class=\"n\">maxes_list</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Reverse dimensions since it is the last dimensions that are</span>\n        <span class=\"c1\"># displayed.</span>\n        <span class=\"n\">mins_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">mins</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">mins</span> <span class=\"ow\">in</span> <span class=\"n\">mins_list</span><span class=\"p\">]</span>\n        <span class=\"n\">maxes_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">maxes</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">maxes</span> <span class=\"ow\">in</span> <span class=\"n\">maxes_list</span><span class=\"p\">]</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Taking the nanmin and nanmax of an axis of all nan</span>\n            <span class=\"c1\"># raises a warning and returns nan for that axis</span>\n            <span class=\"c1\"># as we have do an explicit nan_to_num below this</span>\n            <span class=\"c1\"># behaviour is acceptable and we can filter the</span>\n            <span class=\"c1\"># warning</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span>\n                <span class=\"s1\">'ignore'</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'All-NaN axis encountered'</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">min_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmin</span><span class=\"p\">(</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">mins_list</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)),</span>\n                <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">maxes_list</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)),</span>\n                <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># 512 element default extent as documented in `_get_extent_world`</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">min_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan_to_num</span><span class=\"p\">(</span><span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"o\">=-</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n            <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan_to_num</span><span class=\"p\">(</span><span class=\"n\">max_v</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"o\">=</span><span class=\"mf\">511.5</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># In NumPy &lt; 1.17, nan_to_num doesn't have a nan kwarg</span>\n            <span class=\"n\">min_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">min_v</span><span class=\"p\">)</span>\n            <span class=\"n\">min_v</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">min_v</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span>\n            <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">max_v</span><span class=\"p\">)</span>\n            <span class=\"n\">max_v</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">max_v</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mf\">511.5</span>\n\n        <span class=\"c1\"># switch back to original order</span>\n        <span class=\"k\">return</span> <span class=\"n\">min_v</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">max_v</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Extent of layers in world coordinates.</span>\n\n<span class=\"sd\">        Default to 2D with (-0.5, 511.5) min/ max values if no data is present.</span>\n<span class=\"sd\">        Corresponds to pixels centered at [0, ..., 511].</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        extent_world : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">min_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n            <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"mf\">511.5</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">world</span> <span class=\"k\">for</span> <span class=\"n\">extent</span> <span class=\"ow\">in</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">]</span>\n            <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">extrema</span><span class=\"p\">]</span>\n            <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">extrema</span><span class=\"p\">]</span>\n            <span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_min_and_max</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"n\">max_v</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_step_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Ideal step size between planes in world coordinates.</span>\n\n<span class=\"sd\">        Computes the best step size that allows all data planes to be</span>\n<span class=\"sd\">        sampled if moving through the full range of world coordinates.</span>\n<span class=\"sd\">        The current implementation just takes the minimum scale.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        step_size : array, shape (D,)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_step_size</span><span class=\"p\">([</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">extent</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_step_size_from_scales</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">scales</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Reverse order so last axes of scale with different ndim are aligned</span>\n        <span class=\"n\">scales</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">scale</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">scale</span> <span class=\"ow\">in</span> <span class=\"n\">scales</span><span class=\"p\">]</span>\n        <span class=\"n\">full_scales</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">scales</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)))</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># restore original order</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmin</span><span class=\"p\">(</span><span class=\"n\">full_scales</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_step_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">scales</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">step</span> <span class=\"k\">for</span> <span class=\"n\">extent</span> <span class=\"ow\">in</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">]</span>\n            <span class=\"n\">min_scales</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_step_size_from_scales</span><span class=\"p\">(</span><span class=\"n\">scales</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">min_scales</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Extent</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layers in data and world coordinates.\"\"\"</span>\n        <span class=\"n\">extent_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">extent</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">Extent</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_extent_world</span><span class=\"p\">(</span><span class=\"n\">extent_list</span><span class=\"p\">),</span>\n            <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_step_size</span><span class=\"p\">(</span><span class=\"n\">extent_list</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_ranges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"Get ranges for Dims.range in world coordinates.</span>\n\n<span class=\"sd\">        This shares some code in common with the `extent` property, but</span>\n<span class=\"sd\">        determines Dims.range settings for each dimension such that each</span>\n<span class=\"sd\">        range is aligned to pixel centers at the finest scale.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Determine minimum step size across all layers</span>\n            <span class=\"n\">layer_extent_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">extent</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">]</span>\n            <span class=\"n\">scales</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">step</span> <span class=\"k\">for</span> <span class=\"n\">extent</span> <span class=\"ow\">in</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">]</span>\n            <span class=\"n\">min_steps</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_step_size_from_scales</span><span class=\"p\">(</span><span class=\"n\">scales</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Pixel-based layers need to be offset by 0.5 * min_steps to align</span>\n            <span class=\"c1\"># Dims.range with pixel centers in world coordinates</span>\n            <span class=\"n\">pixel_offsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">min_steps</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">_ImageBase</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">min_steps</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"c1\"># Non-pixel layers need an offset of the range stop by min_steps since the upper</span>\n            <span class=\"c1\"># limit of Dims.range is non-inclusive.</span>\n            <span class=\"n\">point_offsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">min_steps</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">_ImageBase</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"n\">min_steps</span>\n                <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"c1\"># Determine world coordinate extents similarly to</span>\n            <span class=\"c1\"># `_get_extent_world`, but including offsets calculated above.</span>\n            <span class=\"n\">extrema</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">world</span> <span class=\"k\">for</span> <span class=\"n\">extent</span> <span class=\"ow\">in</span> <span class=\"n\">layer_extent_list</span><span class=\"p\">]</span>\n            <span class=\"n\">mins</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">o1</span><span class=\"p\">[:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"k\">for</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">o1</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">extrema</span><span class=\"p\">,</span> <span class=\"n\">pixel_offsets</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">o1</span><span class=\"p\">[:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"o\">+</span> <span class=\"n\">o2</span><span class=\"p\">[:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">o1</span><span class=\"p\">,</span> <span class=\"n\">o2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">extrema</span><span class=\"p\">,</span> <span class=\"n\">pixel_offsets</span><span class=\"p\">,</span> <span class=\"n\">point_offsets</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"n\">max_v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_min_and_max</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"p\">,</span> <span class=\"n\">maxs</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># form range tuples, switching back to original dimension order</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"n\">max_v</span><span class=\"p\">,</span> <span class=\"n\">min_steps</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ndim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Maximum dimensionality of layers.</span>\n\n<span class=\"sd\">        Defaults to 2 if no data is present.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        ndim : int</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">((</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"LayerList.save\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.LayerList.html#napari.components.LayerList.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">selected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Save all or only selected layers to a path using writer plugins.</span>\n\n<span class=\"sd\">        If ``plugin`` is not provided and only one layer is targeted, then we</span>\n<span class=\"sd\">        directly call the corresponding``napari_write_&lt;layer_type&gt;`` hook (see</span>\n<span class=\"sd\">        :ref:`single layer writer hookspecs &lt;write-single-layer-hookspecs&gt;`)</span>\n<span class=\"sd\">        which will loop through implementations and stop when the first one</span>\n<span class=\"sd\">        returns a non-``None`` result. The order in which implementations are</span>\n<span class=\"sd\">        called can be changed with the Plugin sorter in the GUI or with the</span>\n<span class=\"sd\">        corresponding hook's</span>\n<span class=\"sd\">        :meth:`~napari.plugins._hook_callers._HookCaller.bring_to_front`</span>\n<span class=\"sd\">        method.</span>\n\n<span class=\"sd\">        If ``plugin`` is not provided and multiple layers are targeted,</span>\n<span class=\"sd\">        then we call</span>\n<span class=\"sd\">        :meth:`~napari.plugins.hook_specifications.napari_get_writer` which</span>\n<span class=\"sd\">        loops through plugins to find the first one that knows how to handle</span>\n<span class=\"sd\">        the combination of layers and is able to write the file. If no plugins</span>\n<span class=\"sd\">        offer :meth:`~napari.plugins.hook_specifications.napari_get_writer` for</span>\n<span class=\"sd\">        that combination of layers then the default</span>\n<span class=\"sd\">        :meth:`~napari.plugins.hook_specifications.napari_get_writer` will</span>\n<span class=\"sd\">        create a folder and call ``napari_write_&lt;layer_type&gt;`` for each layer</span>\n<span class=\"sd\">        using the ``Layer.name`` variable to modify the path such that the</span>\n<span class=\"sd\">        layers are written to unique files in the folder.</span>\n\n<span class=\"sd\">        If ``plugin`` is provided and a single layer is targeted, then we</span>\n<span class=\"sd\">        call the ``napari_write_&lt;layer_type&gt;`` for that plugin, and if it fails</span>\n<span class=\"sd\">        we error.</span>\n\n<span class=\"sd\">        If ``plugin`` is provided and multiple layers are targeted, then</span>\n<span class=\"sd\">        we call we call</span>\n<span class=\"sd\">        :meth:`~napari.plugins.hook_specifications.napari_get_writer` for</span>\n<span class=\"sd\">        that plugin, and if it doesn’t return a ``WriterFunction`` we error,</span>\n<span class=\"sd\">        otherwise we call it and if that fails if it we error.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path : str</span>\n<span class=\"sd\">            A filepath, directory, or URL to open.  Extensions may be used to</span>\n<span class=\"sd\">            specify output format (provided a plugin is available for the</span>\n<span class=\"sd\">            requested format).</span>\n<span class=\"sd\">        selected : bool</span>\n<span class=\"sd\">            Optional flag to only save selected layers. False by default.</span>\n<span class=\"sd\">        plugin : str, optional</span>\n<span class=\"sd\">            Name of the plugin to use for saving. If None then all plugins</span>\n<span class=\"sd\">            corresponding to appropriate hook specification will be looped</span>\n<span class=\"sd\">            through to find the first one that can save the data.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            File paths of any files that were written.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..plugins.io</span> <span class=\"kn\">import</span> <span class=\"n\">save_layers</span>\n\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">selected</span> <span class=\"k\">else</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">selected</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"No layers selected\"</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"No layers to save\"</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">save_layers</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_selection_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Return context dict for current layerlist.selection\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">_CONTEXT_KEYS</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span></div>\n\n\n<span class=\"c1\"># Each key in this list is \"usable\" as a variable name in the the \"enable_when\"</span>\n<span class=\"c1\"># and \"show_when\" expressions of the napari.layers._layer_actions.LAYER_ACTIONS</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># each value is a function that takes a LayerList.selection, and returns</span>\n<span class=\"c1\"># a value. LayerList._selection_context uses this dict to generate a concrete</span>\n<span class=\"c1\"># context object that can be passed to the</span>\n<span class=\"c1\"># `qt_action_context_menu.QtActionContextMenu` method to update the enabled</span>\n<span class=\"c1\"># and/or visible items based on the state of the layerlist.</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_active_layer_dtype</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">):</span>\n    <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">dtype</span> <span class=\"o\">=</span> <span class=\"n\">normalize_dtype</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">dtype</span>\n\n\n<span class=\"n\">_CONTEXT_KEYS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'selection_count'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span>\n    <span class=\"s1\">'all_layers_linked'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">layer_is_linked</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">),</span>\n    <span class=\"s1\">'linked_layers_unselected'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">get_linked_layers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"p\">),</span>\n    <span class=\"s1\">'active_is_rgb'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"s1\">'rgb'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"s1\">'only_images_selected'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">and</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Image</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">))</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'only_labels_selected'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"ow\">and</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Labels</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">))</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'image_active'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">Image</span><span class=\"p\">),</span>\n    <span class=\"s1\">'ndim'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span> <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'ndim'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"s1\">'active_layer_shape'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span> <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'shape'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'same_shape'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">({</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'shape'</span><span class=\"p\">,</span> <span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'active_layer_dtype'</span><span class=\"p\">:</span> <span class=\"n\">get_active_layer_dtype</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n      ","pageHeaders":[],"ipynbSource":"","mdSource":""}},"__N_SSG":true}