{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/release/index.html":{"level":1,"children":["/release/release_0_4_12.html","/release/release_0_4_11.html","/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_4_12.html":{"level":2,"children":[],"href":"/release/release_0_4_12.html","text":"napari 0.4.12"},"/glossary.html":{"level":1,"children":[],"href":"/glossary.html","text":"Glossary"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html","/developers/translations.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/translations.html":{"level":2,"children":[],"href":"/developers/translations.html","text":"Translations"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html","/api/stable/napari.utils.progress.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.progress.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.progress.html","text":"napari.utils.progress"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html","/api/stable/napari.types.partial.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.partial.html":{"level":3,"children":[],"href":"/api/stable/napari.types.partial.html","text":"napari.types.partial"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html","/community/working_groups.html","/community/meeting_schedule.html"],"href":"/community/index.html","text":"Community"},"/community/meeting_schedule.html":{"level":2,"children":[],"href":"/community/meeting_schedule.html","text":"Meeting schedule"},"/community/working_groups.html":{"level":2,"children":[],"href":"/community/working_groups.html","text":"Working groups"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the project and team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/best_practices.html","/plugins/stable/npe2_migration_guide.html","/plugins/stable/guides.html","/plugins/stable/first_plugin.html","/plugins/stable/test_deploy.html","/plugins/stable/npe1.html","/plugins/stable/find_and_install_plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find_and_install_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find_and_install_plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/npe1.html":{"level":2,"children":[],"href":"/plugins/stable/npe1.html","text":"1st Gen Plugin Guide (Deprecated)"},"/plugins/stable/test_deploy.html":{"level":2,"children":[],"href":"/plugins/stable/test_deploy.html","text":"Test and Deploy"},"/plugins/stable/first_plugin.html":{"level":2,"children":[],"href":"/plugins/stable/first_plugin.html","text":"Your First Plugin"},"/plugins/stable/guides.html":{"level":2,"children":[],"href":"/plugins/stable/guides.html","text":"Contribution Guides"},"/plugins/stable/npe2_migration_guide.html":{"level":2,"children":[],"href":"/plugins/stable/npe2_migration_guide.html","text":"npe2 migration guide"},"/plugins/stable/best_practices.html":{"level":2,"children":[],"href":"/plugins/stable/best_practices.html","text":"Best practices"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/magicgui.html","/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/rendering-explanation.html","/guides/stable/rendering.html","/guides/stable/performance.html","/guides/stable/3D_interactivity.html","/guides/stable/events_reference.html","/guides/stable/contexts_expressions.html"],"href":"/guides/stable/index.html","text":"In-depth explanations"},"/guides/stable/contexts_expressions.html":{"level":2,"children":[],"href":"/guides/stable/contexts_expressions.html","text":"Contexts and Expressions in napari"},"/guides/stable/events_reference.html":{"level":2,"children":[],"href":"/guides/stable/events_reference.html","text":"Events reference"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"napari performance"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous rendering"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An introduction to the event loop in napari"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/howtos/index.html":{"level":1,"children":["/howtos/connecting_events.html","/howtos/napari_imageJ.html","/howtos/docker.html","/howtos/perfmon.html"],"href":"/howtos/index.html","text":"How-to guides"},"/howtos/perfmon.html":{"level":2,"children":[],"href":"/howtos/perfmon.html","text":"Performance monitoring"},"/howtos/docker.html":{"level":2,"children":[],"href":"/howtos/docker.html","text":"Napari in Docker"},"/howtos/napari_imageJ.html":{"level":2,"children":[],"href":"/howtos/napari_imageJ.html","text":"napari + ImageJ how-to guide"},"/howtos/connecting_events.html":{"level":2,"children":[],"href":"/howtos/connecting_events.html","text":"Hooking up your own events"},"/tutorials/index.html":{"level":1,"children":["/tutorials/segmentation/index.html","/tutorials/tracking/index.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/further-resources/napari-workshops.html","/tutorials/tracking/cell_tracking.html","/tutorials/segmentation/annotate_segmentation.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/segmentation/annotate_segmentation.html":{"level":2,"children":[],"href":"/tutorials/segmentation/annotate_segmentation.html","text":"Annotating segmentation with text and bounding boxes"},"/tutorials/tracking/cell_tracking.html":{"level":2,"children":[],"href":"/tutorials/tracking/cell_tracking.html","text":"Single cell tracking with napari"},"/tutorials/further-resources/napari-workshops.html":{"level":2,"children":[],"href":"/tutorials/further-resources/napari-workshops.html","text":"napari workshops"},"/tutorials/applications/dask.html":{"level":2,"children":[],"href":"/tutorials/applications/dask.html","text":"Using Dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":2,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"Annotating videos with napari"},"/tutorials/tracking/index.html":{"level":2,"children":[],"href":"/tutorials/tracking/index.html","text":"Tracking"},"/tutorials/segmentation/index.html":{"level":2,"children":[],"href":"/tutorials/segmentation/index.html","text":"Segmentation"},"/tutorials/start_index.html":{"level":1,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/start_index.html","text":"Getting Started"},"/tutorials/fundamentals/vectors.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"Getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":2,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"How to install napari on your machine"}},"rootGlobalHeaders":["/tutorials/start_index.html","/tutorials/index.html","/howtos/index.html","/guides/stable/index.html","/plugins/stable/index.html","/community/index.html","/api/stable/index.html","/developers/index.html","/glossary.html","/release/index.html","/roadmaps/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari.components.viewer_model","pageFrontMatter":{},"previewImage":"","previewDescription":"","appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"},{"href":"/_static/togglebutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/copybutton.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/mystnb.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/sphinx-thebe.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-main.c949a650a448cc0ae9fd3441c0e17fb0.css","rel":"stylesheet","type":"text/css"},{"href":"/_static/panels-variables.06eb56fa6e07937060861dad626602ad.css","rel":"stylesheet","type":"text/css"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">lru_cache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span>\n    <span class=\"n\">Any</span><span class=\"p\">,</span>\n    <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">List</span><span class=\"p\">,</span>\n    <span class=\"n\">Optional</span><span class=\"p\">,</span>\n    <span class=\"n\">Sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">Set</span><span class=\"p\">,</span>\n    <span class=\"n\">Tuple</span><span class=\"p\">,</span>\n    <span class=\"n\">Union</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Extra</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">validator</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..</span> <span class=\"kn\">import</span> <span class=\"n\">layers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers._source</span> <span class=\"kn\">import</span> <span class=\"n\">layer_source</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers.image._image_utils</span> <span class=\"kn\">import</span> <span class=\"n\">guess_labels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..layers.utils.stack_utils</span> <span class=\"kn\">import</span> <span class=\"n\">split_channels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils._register</span> <span class=\"kn\">import</span> <span class=\"n\">create_func</span> <span class=\"k\">as</span> <span class=\"n\">create_add_method</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.colormaps</span> <span class=\"kn\">import</span> <span class=\"n\">ensure_colormap</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.events</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">EventedModel</span><span class=\"p\">,</span> <span class=\"n\">disconnect_events</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.key_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">KeymapProvider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">is_sequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.mouse_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">MousemapProvider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.progress</span> <span class=\"kn\">import</span> <span class=\"n\">progress</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.theme</span> <span class=\"kn\">import</span> <span class=\"n\">available_themes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">._viewer_mouse_bindings</span> <span class=\"kn\">import</span> <span class=\"n\">dims_scroll</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.axes</span> <span class=\"kn\">import</span> <span class=\"n\">Axes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.camera</span> <span class=\"kn\">import</span> <span class=\"n\">Camera</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.cursor</span> <span class=\"kn\">import</span> <span class=\"n\">Cursor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.dims</span> <span class=\"kn\">import</span> <span class=\"n\">Dims</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.grid</span> <span class=\"kn\">import</span> <span class=\"n\">GridCanvas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.layerlist</span> <span class=\"kn\">import</span> <span class=\"n\">LayerList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.scale_bar</span> <span class=\"kn\">import</span> <span class=\"n\">ScaleBar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.text_overlay</span> <span class=\"kn\">import</span> <span class=\"n\">TextOverlay</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.tooltip</span> <span class=\"kn\">import</span> <span class=\"n\">Tooltip</span>\n\n<span class=\"n\">DEFAULT_THEME</span> <span class=\"o\">=</span> <span class=\"s1\">'dark'</span>\n<span class=\"n\">EXCLUDE_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'keymap'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_mouse_wheel_gen'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_mouse_drag_gen'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_persisted_mouse_event'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'mouse_move_callbacks'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'mouse_drag_callbacks'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'mouse_wheel_callbacks'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">EXCLUDE_JSON</span> <span class=\"o\">=</span> <span class=\"n\">EXCLUDE_DICT</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">({</span><span class=\"s1\">'layers'</span><span class=\"p\">,</span> <span class=\"s1\">'active_layer'</span><span class=\"p\">})</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">..types</span> <span class=\"kn\">import</span> <span class=\"n\">FullLayerData</span><span class=\"p\">,</span> <span class=\"n\">LayerData</span>\n\n<span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">]</span>\n<span class=\"n\">PathOrPaths</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">PathLike</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">PathLike</span><span class=\"p\">]]</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ViewerModel'</span><span class=\"p\">,</span> <span class=\"s1\">'valid_add_kwargs'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_current_theme</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">appearance</span><span class=\"o\">.</span><span class=\"n\">theme</span>\n\n\n<span class=\"c1\"># KeymapProvider &amp; MousemapProvider should eventually be moved off the ViewerModel</span>\n<div class=\"viewcode-block\" id=\"ViewerModel\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ViewerModel</span><span class=\"p\">(</span><span class=\"n\">KeymapProvider</span><span class=\"p\">,</span> <span class=\"n\">MousemapProvider</span><span class=\"p\">,</span> <span class=\"n\">EventedModel</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Viewer containing the rendered scene, layers, and controlling elements</span>\n<span class=\"sd\">    including dimension sliders, and control bars for color limits.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    title : string</span>\n<span class=\"sd\">        The title of the viewer window.</span>\n<span class=\"sd\">    ndisplay : {2, 3}</span>\n<span class=\"sd\">        Number of displayed dimensions.</span>\n<span class=\"sd\">    order : tuple of int</span>\n<span class=\"sd\">        Order in which dimensions are displayed where the last two or last</span>\n<span class=\"sd\">        three dimensions correspond to row x column or plane x row x column if</span>\n<span class=\"sd\">        ndisplay is 2 or 3.</span>\n<span class=\"sd\">    axis_labels : list of str</span>\n<span class=\"sd\">        Dimension names.</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    window : Window</span>\n<span class=\"sd\">        Parent window.</span>\n<span class=\"sd\">    layers : LayerList</span>\n<span class=\"sd\">        List of contained layers.</span>\n<span class=\"sd\">    dims : Dimensions</span>\n<span class=\"sd\">        Contains axes, indices, dimensions and sliders.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\"># Using allow_mutation=False means these attributes aren't settable and don't</span>\n    <span class=\"c1\"># have an event emitter associated with them</span>\n    <span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">Axes</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">Axes</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">camera</span><span class=\"p\">:</span> <span class=\"n\">Camera</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">Camera</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">cursor</span><span class=\"p\">:</span> <span class=\"n\">Cursor</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">Cursor</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">dims</span><span class=\"p\">:</span> <span class=\"n\">Dims</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">Dims</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">GridCanvas</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">GridCanvas</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">layers</span><span class=\"p\">:</span> <span class=\"n\">LayerList</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">LayerList</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>  <span class=\"c1\"># Need to create custom JSON encoder for layer!</span>\n    <span class=\"n\">scale_bar</span><span class=\"p\">:</span> <span class=\"n\">ScaleBar</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">ScaleBar</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">text_overlay</span><span class=\"p\">:</span> <span class=\"n\">TextOverlay</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">TextOverlay</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">help</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'Ready'</span>\n    <span class=\"n\">tooltip</span><span class=\"p\">:</span> <span class=\"n\">Tooltip</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">Tooltip</span><span class=\"p\">,</span> <span class=\"n\">allow_mutation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">_current_theme</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'napari'</span>\n\n    <span class=\"c1\"># 2-tuple indicating height and width</span>\n    <span class=\"n\">_canvas_size</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'napari'</span><span class=\"p\">,</span> <span class=\"n\">ndisplay</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">axis_labels</span><span class=\"o\">=</span><span class=\"p\">()):</span>\n        <span class=\"c1\"># allow extra attributes during model initialization, useful for mixins</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__config__</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">Extra</span><span class=\"o\">.</span><span class=\"n\">allow</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"n\">dims</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">'axis_labels'</span><span class=\"p\">:</span> <span class=\"n\">axis_labels</span><span class=\"p\">,</span>\n                <span class=\"s1\">'ndisplay'</span><span class=\"p\">:</span> <span class=\"n\">ndisplay</span><span class=\"p\">,</span>\n                <span class=\"s1\">'order'</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__config__</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">Extra</span><span class=\"o\">.</span><span class=\"n\">ignore</span>\n\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tooltip</span><span class=\"o\">.</span><span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">appearance</span><span class=\"o\">.</span><span class=\"n\">layer_tooltip_visibility</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">appearance</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">layer_tooltip_visibility</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tooltip_visible_update</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_viewer_grid</span><span class=\"p\">()</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">grid_stride</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_viewer_grid</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">grid_width</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_viewer_grid</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">grid_height</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_viewer_grid</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add extra events - ideally these will be removed too!</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">layers_change</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">reset_view</span><span class=\"o\">=</span><span class=\"n\">Event</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Connect events</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_view</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_grid_change</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_layers</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_view</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_layers</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_view</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">current_step</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_layers</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_cursor_position_change</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">inserted</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_add_layer</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_remove_layer</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">reordered</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_grid_change</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">reordered</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_active_layer</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add mouse callback</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mouse_wheel_callbacks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">dims_scroll</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_tooltip_visible_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tooltip</span><span class=\"o\">.</span><span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_viewer_grid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Keep viewer grid settings up to date with settings values.\"\"\"</span>\n\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">stride</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">grid_stride</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">grid_height</span><span class=\"p\">,</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">grid_width</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@validator</span><span class=\"p\">(</span><span class=\"s1\">'theme'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_valid_theme</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"n\">available_themes</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">available_themes</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Theme '</span><span class=\"si\">{theme_name}</span><span class=\"s2\">' not found; options are </span><span class=\"si\">{themes}</span><span class=\"s2\">.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">theme_name</span><span class=\"o\">=</span><span class=\"n\">v</span><span class=\"p\">,</span>\n                    <span class=\"n\">themes</span><span class=\"o\">=</span><span class=\"n\">themes</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">v</span>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.json\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.json\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Serialize to json.\"\"\"</span>\n        <span class=\"c1\"># Manually exclude the layer list and active layer which cannot be serialized at this point</span>\n        <span class=\"c1\"># and mouse and keybindings don't belong on model</span>\n        <span class=\"c1\"># https://github.com/samuelcolvin/pydantic/pull/2231</span>\n        <span class=\"c1\"># https://github.com/samuelcolvin/pydantic/issues/660#issuecomment-642211017</span>\n        <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'exclude'</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">())</span>\n        <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">exclude</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">EXCLUDE_JSON</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"n\">exclude</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.dict\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.dict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Convert to a dictionary.\"\"\"</span>\n        <span class=\"c1\"># Manually exclude the layer list and active layer which cannot be serialized at this point</span>\n        <span class=\"c1\"># and mouse and keybindings don't belong on model</span>\n        <span class=\"c1\"># https://github.com/samuelcolvin/pydantic/pull/2231</span>\n        <span class=\"c1\"># https://github.com/samuelcolvin/pydantic/issues/660#issuecomment-642211017</span>\n        <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'exclude'</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">())</span>\n        <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">exclude</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">EXCLUDE_DICT</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"n\">exclude</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__hash__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Simple string representation\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'napari.Viewer: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_sliced_extent_world</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Extent of layers in world coordinates after slicing.</span>\n\n<span class=\"sd\">        D is either 2 or 3 depending on if the displayed data is 2D or 3D.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        sliced_extent_world : array, shape (2, D)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If no data is present and dims model has not been reset to 0</span>\n            <span class=\"c1\"># than someone has passed more than two axis labels which are</span>\n            <span class=\"c1\"># being saved and so default values are used.</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"p\">[:,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">displayed</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.reset_view\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.reset_view\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reset_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Reset the camera view.\"\"\"</span>\n\n        <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sliced_extent_world</span>\n        <span class=\"n\">scene_size</span> <span class=\"o\">=</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">corner</span> <span class=\"o\">=</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">grid_size</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">actual_shape</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scene_size</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid_size</span><span class=\"p\">):</span>\n            <span class=\"n\">grid_size</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scene_size</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid_size</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">grid_size</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">scene_size</span><span class=\"p\">,</span> <span class=\"n\">grid_size</span><span class=\"p\">)</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">corner</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))[</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span> <span class=\"p\">:]</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">center</span>\n        <span class=\"c1\"># zoom is definied as the number of canvas pixels per world pixel</span>\n        <span class=\"c1\"># The default value used below will zoom such that the whole field</span>\n        <span class=\"c1\"># of view will occupy 95% of the canvas on the most filled axis</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">zoom</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_canvas_size</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n            <span class=\"n\">scale</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isclose</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">zoom</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_canvas_size</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">scale</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Emit a reset view event, which is no longer used internally, but</span>\n        <span class=\"c1\"># which maybe useful for building on napari.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">reset_view</span><span class=\"p\">(</span>\n            <span class=\"n\">center</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">,</span>\n            <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">,</span>\n            <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">angles</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_new_labels</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Create new labels layer filling full world coordinates space.\"\"\"</span>\n        <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">world</span>\n        <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">step</span>\n        <span class=\"n\">scene_size</span> <span class=\"o\">=</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">corner</span> <span class=\"o\">=</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"o\">.</span><span class=\"n\">step</span>\n        <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">/</span> <span class=\"n\">sc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">'int'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sc</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">scene_size</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">empty_labels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_labels</span><span class=\"p\">(</span><span class=\"n\">empty_labels</span><span class=\"p\">,</span> <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">corner</span><span class=\"p\">),</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Updates the contained layers.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layers : list of napari.layers.Layer, optional</span>\n<span class=\"sd\">            List of layers to update. If none provided updates all.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"n\">layers</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span>\n        <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">_slice_dims</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndisplay</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">order</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_active_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Update viewer state for a new active layer.\"\"\"</span>\n        <span class=\"n\">active_layer</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"n\">active_layer</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"s1\">'standard'</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"n\">active_layer</span><span class=\"o\">.</span><span class=\"n\">help</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">active_layer</span><span class=\"o\">.</span><span class=\"n\">cursor</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">active_layer</span><span class=\"o\">.</span><span class=\"n\">cursor_size</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"n\">active_layer</span><span class=\"o\">.</span><span class=\"n\">interactive</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_layers_change</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ranges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">_ranges</span>\n            <span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ranges</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">=</span> <span class=\"n\">ndim</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">_range</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ranges</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">set_range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">_range</span><span class=\"p\">)</span>\n\n        <span class=\"n\">new_dim</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"n\">dim_diff</span> <span class=\"o\">=</span> <span class=\"n\">new_dim</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">dim_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">[:</span><span class=\"n\">new_dim</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">dim_diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">dim_diff</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">layers_change</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_interactive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the viewer interactivity with the `event.interactive` bool.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">interactive</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_cursor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the viewer cursor with the `event.cursor` string.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">cursor</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_cursor_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the viewer cursor_size with the `event.cursor_size` int.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">cursor_size</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_cursor_position_change</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Set the layer cursor position.\"\"\"</span>\n        <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Catch the deprecation warning on layer.position</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span>\n                <span class=\"s1\">'ignore'</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'layer.position is deprecated'</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">:</span>\n                <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n        <span class=\"c1\"># Update status and help bar based on active layer</span>\n        <span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">active</span>\n        <span class=\"k\">if</span> <span class=\"n\">active</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">get_status</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">,</span>\n                <span class=\"n\">view_direction</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">_view_direction</span><span class=\"p\">,</span>\n                <span class=\"n\">dims_displayed</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"o\">.</span><span class=\"n\">displayed</span><span class=\"p\">),</span>\n                <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">help</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tooltip</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tooltip</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">active</span><span class=\"o\">.</span><span class=\"n\">_get_tooltip_text</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">world</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n                <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_grid_change</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Arrange the current layers is a 2D grid.\"\"\"</span>\n        <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sliced_extent_world</span>\n        <span class=\"n\">n_layers</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">):</span>\n            <span class=\"n\">i_row</span><span class=\"p\">,</span> <span class=\"n\">i_column</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">(</span><span class=\"n\">n_layers</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n_layers</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_subplot</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">i_row</span><span class=\"p\">,</span> <span class=\"n\">i_column</span><span class=\"p\">),</span> <span class=\"n\">extent</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_subplot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">extent</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Shift a layer to a specified position in a 2D grid.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer : napari.layers.Layer</span>\n<span class=\"sd\">            Layer that is to be moved.</span>\n<span class=\"sd\">        position : 2-tuple of int</span>\n<span class=\"sd\">            New position of layer in grid.</span>\n<span class=\"sd\">        extent : array, shape (2, D)</span>\n<span class=\"sd\">            Extent of the world.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">scene_shift</span> <span class=\"o\">=</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">extent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">translate_2d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">scene_shift</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:],</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n        <span class=\"n\">translate</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">translate_2d</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">translate_grid</span> <span class=\"o\">=</span> <span class=\"n\">translate</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">experimental</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Experimental commands for IPython console.</span>\n\n<span class=\"sd\">        For example run \"viewer.experimental.cmds.loader.help\".</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">.experimental.commands</span> <span class=\"kn\">import</span> <span class=\"n\">ExperimentalNamespace</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ExperimentalNamespace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_add_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Connect new layer events.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        event : :class:`napari.layers.Layer`</span>\n<span class=\"sd\">            Layer to add.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n        <span class=\"c1\"># Connect individual layer events to viewer events</span>\n        <span class=\"c1\"># TODO: in a future PR, we should now be able to connect viewer *only*</span>\n        <span class=\"c1\"># to viewer.layers.events... and avoid direct viewer-&gt;layer connections</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_interactive</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_cursor</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">cursor_size</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_cursor_size</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">shear</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">)</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">_update_name</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update dims and grid model</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_grid_change</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Slice current layer based on dims</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_layers</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset_view</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_on_remove_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Disconnect old layer events.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        event : napari.utils.event.Event</span>\n<span class=\"sd\">            Event which will remove a layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layer : :class:`napari.layers.Layer` or list</span>\n<span class=\"sd\">            The layer that was added (same as input).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n        <span class=\"c1\"># Disconnect all connections from layer</span>\n        <span class=\"n\">disconnect_events</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">disconnect_events</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_layers_change</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_grid_change</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.add_layer\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.add_layer\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">Layer</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Layer</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Add a layer to the viewer.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer : :class:`napari.layers.Layer`</span>\n<span class=\"sd\">            Layer to add.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layer : :class:`napari.layers.Layer` or list</span>\n<span class=\"sd\">            The layer that was added (same as input).</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Adding additional functionality inside `add_layer`</span>\n        <span class=\"c1\"># should be avoided to keep full functionality</span>\n        <span class=\"c1\"># from adding a layer through the `layers.append`</span>\n        <span class=\"c1\"># method</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">layer</span></div>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.add_image\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.add_image\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_image</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">channel_axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">contrast_limits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'nearest'</span><span class=\"p\">,</span>\n        <span class=\"n\">rendering</span><span class=\"o\">=</span><span class=\"s1\">'mip'</span><span class=\"p\">,</span>\n        <span class=\"n\">iso_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">attenuation</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">translate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shear</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">blending</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">multiscale</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_slicing_plane</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">experimental_clipping_planes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"p\">]]:</span>\n        <span class=\"sd\">\"\"\"Add an image layer to the layer list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : array or list of array</span>\n<span class=\"sd\">            Image data. Can be N &gt;= 2 dimensional. If the last dimension has length</span>\n<span class=\"sd\">            3 or 4 can be interpreted as RGB or RGBA if rgb is `True`. If a</span>\n<span class=\"sd\">            list and arrays are decreasing in shape then the data is treated as</span>\n<span class=\"sd\">            a multiscale image. Please note multiscale rendering is only</span>\n<span class=\"sd\">            supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">            displayed.</span>\n<span class=\"sd\">        channel_axis : int, optional</span>\n<span class=\"sd\">            Axis to expand image along.  If provided, each channel in the data</span>\n<span class=\"sd\">            will be added as an individual image layer.  In channel_axis mode,</span>\n<span class=\"sd\">            all other parameters MAY be provided as lists, and the Nth value</span>\n<span class=\"sd\">            will be applied to the Nth channel in the data.  If a single value</span>\n<span class=\"sd\">            is provided, it will be broadcast to all Layers.</span>\n<span class=\"sd\">        rgb : bool or list</span>\n<span class=\"sd\">            Whether the image is rgb RGB or RGBA. If not specified by user and</span>\n<span class=\"sd\">            the last dimension of the data has length 3 or 4 it will be set as</span>\n<span class=\"sd\">            `True`. If `False` the image is interpreted as a luminance image.</span>\n<span class=\"sd\">            If a list then must be same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        colormap : str, napari.utils.Colormap, tuple, dict, list</span>\n<span class=\"sd\">            Colormaps to use for luminance images. If a string must be the name</span>\n<span class=\"sd\">            of a supported colormap from vispy or matplotlib. If a tuple the</span>\n<span class=\"sd\">            first value must be a string to assign as a name to a colormap and</span>\n<span class=\"sd\">            the second item must be a Colormap. If a dict the key must be a</span>\n<span class=\"sd\">            string to assign as a name to a colormap and the value must be a</span>\n<span class=\"sd\">            Colormap. If a list then must be same length as the axis that is</span>\n<span class=\"sd\">            being expanded as channels, and each colormap is applied to each</span>\n<span class=\"sd\">            new image layer.</span>\n<span class=\"sd\">        contrast_limits : list (2,)</span>\n<span class=\"sd\">            Color limits to be used for determining the colormap bounds for</span>\n<span class=\"sd\">            luminance images. If not passed is calculated as the min and max of</span>\n<span class=\"sd\">            the image. If list of lists then must be same length as the axis</span>\n<span class=\"sd\">            that is being expanded and then each colormap is applied to each</span>\n<span class=\"sd\">            image.</span>\n<span class=\"sd\">        gamma : list, float</span>\n<span class=\"sd\">            Gamma correction for determining colormap linearity. Defaults to 1.</span>\n<span class=\"sd\">            If a list then must be same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        interpolation : str or list</span>\n<span class=\"sd\">            Interpolation mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">            modes. If a list then must be same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        rendering : str or list</span>\n<span class=\"sd\">            Rendering mode used by vispy. Must be one of our supported</span>\n<span class=\"sd\">            modes. If a list then must be same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        iso_threshold : float or list</span>\n<span class=\"sd\">            Threshold for isosurface. If a list then must be same length as the</span>\n<span class=\"sd\">            axis that is being expanded as channels.</span>\n<span class=\"sd\">        attenuation : float or list</span>\n<span class=\"sd\">            Attenuation rate for attenuated maximum intensity projection. If a</span>\n<span class=\"sd\">            list then must be same length as the axis that is being expanded as</span>\n<span class=\"sd\">            channels.</span>\n<span class=\"sd\">        name : str or list of str</span>\n<span class=\"sd\">            Name of the layer.  If a list then must be same length as the axis</span>\n<span class=\"sd\">            that is being expanded as channels.</span>\n<span class=\"sd\">        metadata : dict or list of dict</span>\n<span class=\"sd\">            Layer metadata. If a list then must be a list of dicts with the</span>\n<span class=\"sd\">            same length as the axis that is being expanded as channels.</span>\n<span class=\"sd\">        scale : tuple of float or list</span>\n<span class=\"sd\">            Scale factors for the layer. If a list then must be a list of</span>\n<span class=\"sd\">            tuples of float with the same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        translate : tuple of float or list</span>\n<span class=\"sd\">            Translation values for the layer. If a list then must be a list of</span>\n<span class=\"sd\">            tuples of float with the same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        rotate : float, 3-tuple of float, n-D array or list.</span>\n<span class=\"sd\">            If a float convert into a 2D rotation matrix using that value as an</span>\n<span class=\"sd\">            angle. If 3-tuple convert into a 3D rotation matrix, using a yaw,</span>\n<span class=\"sd\">            pitch, roll convention. Otherwise assume an nD rotation. Angles are</span>\n<span class=\"sd\">            assumed to be in degrees. They can be converted from radians with</span>\n<span class=\"sd\">            np.degrees if needed. If a list then must have same length as</span>\n<span class=\"sd\">            the axis that is being expanded as channels.</span>\n<span class=\"sd\">        shear : 1-D array or list.</span>\n<span class=\"sd\">            A vector of shear values for an upper triangular n-D shear matrix.</span>\n<span class=\"sd\">            If a list then must have same length as the axis that is being</span>\n<span class=\"sd\">            expanded as channels.</span>\n<span class=\"sd\">        affine : n-D array or napari.utils.transforms.Affine</span>\n<span class=\"sd\">            (N+1, N+1) affine transformation matrix in homogeneous coordinates.</span>\n<span class=\"sd\">            The first (N, N) entries correspond to a linear transform and</span>\n<span class=\"sd\">            the final column is a length N translation vector and a 1 or a</span>\n<span class=\"sd\">            napari `Affine` transform object. Applied as an extra transform on</span>\n<span class=\"sd\">            top of the provided scale, rotate, and shear values.</span>\n<span class=\"sd\">        opacity : float or list</span>\n<span class=\"sd\">            Opacity of the layer visual, between 0.0 and 1.0.  If a list then</span>\n<span class=\"sd\">            must be same length as the axis that is being expanded as channels.</span>\n<span class=\"sd\">        blending : str or list</span>\n<span class=\"sd\">            One of a list of preset blending modes that determines how RGB and</span>\n<span class=\"sd\">            alpha values of the layer visual get mixed. Allowed values are</span>\n<span class=\"sd\">            {'opaque', 'translucent', and 'additive'}. If a list then</span>\n<span class=\"sd\">            must be same length as the axis that is being expanded as channels.</span>\n<span class=\"sd\">        visible : bool or list of bool</span>\n<span class=\"sd\">            Whether the layer visual is currently being displayed.</span>\n<span class=\"sd\">            If a list then must be same length as the axis that is</span>\n<span class=\"sd\">            being expanded as channels.</span>\n<span class=\"sd\">        multiscale : bool</span>\n<span class=\"sd\">            Whether the data is a multiscale image or not. Multiscale data is</span>\n<span class=\"sd\">            represented by a list of array like image data. If not specified by</span>\n<span class=\"sd\">            the user and if the data is a list of arrays that decrease in shape</span>\n<span class=\"sd\">            then it will be taken to be multiscale. The first image in the list</span>\n<span class=\"sd\">            should be the largest. Please note multiscale rendering is only</span>\n<span class=\"sd\">            supported in 2D. In 3D, only the lowest resolution scale is</span>\n<span class=\"sd\">            displayed.</span>\n<span class=\"sd\">        cache : bool</span>\n<span class=\"sd\">            Whether slices of out-of-core datasets should be cached upon</span>\n<span class=\"sd\">            retrieval. Currently, this only applies to dask arrays.</span>\n<span class=\"sd\">        experimental_slicing_plane : dict or SlicingPlane</span>\n<span class=\"sd\">            Properties defining plane rendering in 3D. Properties are defined in</span>\n<span class=\"sd\">            data coordinates. Valid dictionary keys are</span>\n<span class=\"sd\">            {'position', 'normal', 'thickness', and 'enabled'}.</span>\n<span class=\"sd\">        experimental_clipping_planes : list of dicts, list of ClippingPlane, or ClippingPlaneList</span>\n<span class=\"sd\">            Each dict defines a clipping plane in 3D in data coordinates.</span>\n<span class=\"sd\">            Valid dictionary keys are {'position', 'normal', and 'enabled'}.</span>\n<span class=\"sd\">            Values on the negative side of the normal are discarded if the plane is enabled.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layer : :class:`napari.layers.Image` or list</span>\n<span class=\"sd\">            The newly-created image layer or list of image layers.</span>\n<span class=\"sd\">        \"\"\"</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">colormap</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># standardize colormap argument(s) to Colormaps, and make sure they</span>\n            <span class=\"c1\"># are in AVAILABLE_COLORMAPS.  This will raise one of many various</span>\n            <span class=\"c1\"># errors if the colormap argument is invalid.  See</span>\n            <span class=\"c1\"># ensure_colormap for details</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">colormap</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ensure_colormap</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">colormap</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">ensure_colormap</span><span class=\"p\">(</span><span class=\"n\">colormap</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># doing this here for IDE/console autocompletion in add_image function.</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'rgb'</span><span class=\"p\">:</span> <span class=\"n\">rgb</span><span class=\"p\">,</span>\n            <span class=\"s1\">'colormap'</span><span class=\"p\">:</span> <span class=\"n\">colormap</span><span class=\"p\">,</span>\n            <span class=\"s1\">'contrast_limits'</span><span class=\"p\">:</span> <span class=\"n\">contrast_limits</span><span class=\"p\">,</span>\n            <span class=\"s1\">'gamma'</span><span class=\"p\">:</span> <span class=\"n\">gamma</span><span class=\"p\">,</span>\n            <span class=\"s1\">'interpolation'</span><span class=\"p\">:</span> <span class=\"n\">interpolation</span><span class=\"p\">,</span>\n            <span class=\"s1\">'rendering'</span><span class=\"p\">:</span> <span class=\"n\">rendering</span><span class=\"p\">,</span>\n            <span class=\"s1\">'iso_threshold'</span><span class=\"p\">:</span> <span class=\"n\">iso_threshold</span><span class=\"p\">,</span>\n            <span class=\"s1\">'attenuation'</span><span class=\"p\">:</span> <span class=\"n\">attenuation</span><span class=\"p\">,</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s1\">'metadata'</span><span class=\"p\">:</span> <span class=\"n\">metadata</span><span class=\"p\">,</span>\n            <span class=\"s1\">'scale'</span><span class=\"p\">:</span> <span class=\"n\">scale</span><span class=\"p\">,</span>\n            <span class=\"s1\">'translate'</span><span class=\"p\">:</span> <span class=\"n\">translate</span><span class=\"p\">,</span>\n            <span class=\"s1\">'rotate'</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">,</span>\n            <span class=\"s1\">'shear'</span><span class=\"p\">:</span> <span class=\"n\">shear</span><span class=\"p\">,</span>\n            <span class=\"s1\">'affine'</span><span class=\"p\">:</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n            <span class=\"s1\">'opacity'</span><span class=\"p\">:</span> <span class=\"n\">opacity</span><span class=\"p\">,</span>\n            <span class=\"s1\">'blending'</span><span class=\"p\">:</span> <span class=\"n\">blending</span><span class=\"p\">,</span>\n            <span class=\"s1\">'visible'</span><span class=\"p\">:</span> <span class=\"n\">visible</span><span class=\"p\">,</span>\n            <span class=\"s1\">'multiscale'</span><span class=\"p\">:</span> <span class=\"n\">multiscale</span><span class=\"p\">,</span>\n            <span class=\"s1\">'cache'</span><span class=\"p\">:</span> <span class=\"n\">cache</span><span class=\"p\">,</span>\n            <span class=\"s1\">'experimental_slicing_plane'</span><span class=\"p\">:</span> <span class=\"n\">experimental_slicing_plane</span><span class=\"p\">,</span>\n            <span class=\"s1\">'experimental_clipping_planes'</span><span class=\"p\">:</span> <span class=\"n\">experimental_clipping_planes</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># these arguments are *already* iterables in the single-channel case.</span>\n        <span class=\"n\">iterable_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'scale'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'translate'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'rotate'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'shear'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'affine'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'contrast_limits'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'metadata'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'experimental_clipping_planes'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">channel_axis</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'colormap'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'colormap'</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s1\">'gray'</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'blending'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'blending'</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s1\">'translucent'</span>\n            <span class=\"c1\"># Helpful message if someone tries to add mulit-channel kwargs,</span>\n            <span class=\"c1\"># but forget the channel_axis arg</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">iterable_kwargs</span> <span class=\"ow\">and</span> <span class=\"n\">is_sequence</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s2\">\"Received sequence for argument '</span><span class=\"si\">{argument}</span><span class=\"s2\">', did you mean to specify a 'channel_axis'? \"</span><span class=\"p\">,</span>\n                            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">argument</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n            <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">layer</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">layerdata_list</span> <span class=\"o\">=</span> <span class=\"n\">split_channels</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">channel_axis</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n            <span class=\"n\">layer_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">i_kwargs</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">layerdata_list</span><span class=\"p\">:</span>\n                <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">i_kwargs</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n                <span class=\"n\">layer_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">layer_list</span></div>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.open_sample\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.open_sample\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open_sample</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">sample</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">reader_plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Open `sample` from `plugin` and add it to the viewer.</span>\n\n<span class=\"sd\">        To see all available samples registered by plugins, use</span>\n<span class=\"sd\">        :func:`napari.plugins.available_samples`</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        plugin : str</span>\n<span class=\"sd\">            name of a plugin providing a sample</span>\n<span class=\"sd\">        sample : str</span>\n<span class=\"sd\">            name of the sample</span>\n<span class=\"sd\">        reader_plugin : str, optional</span>\n<span class=\"sd\">            reader plugin to pass to viewer.open (only used if the sample data</span>\n<span class=\"sd\">            is a string).  by default None.</span>\n<span class=\"sd\">        **kwargs</span>\n<span class=\"sd\">            additional kwargs will be passed to the sample data loader provided</span>\n<span class=\"sd\">            by `plugin`.  Use of **kwargs may raise an error if the kwargs do</span>\n<span class=\"sd\">            not match the sample data loader.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layers : list</span>\n<span class=\"sd\">            A list of any layers that were added to the viewer.</span>\n\n<span class=\"sd\">        Raises</span>\n<span class=\"sd\">        ------</span>\n<span class=\"sd\">        KeyError</span>\n<span class=\"sd\">            If `plugin` does not provide a sample named `sample`.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..plugins</span> <span class=\"kn\">import</span> <span class=\"n\">plugin_manager</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">_sample_data</span><span class=\"p\">[</span><span class=\"n\">plugin</span><span class=\"p\">][</span><span class=\"n\">sample</span><span class=\"p\">][</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">plugin_manager</span><span class=\"o\">.</span><span class=\"n\">available_samples</span><span class=\"p\">()</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Plugin </span><span class=\"si\">{plugin!r}</span><span class=\"s2\"> does not provide sample data named </span><span class=\"si\">{sample!r}</span><span class=\"s2\">. \"</span><span class=\"p\">,</span>\n                <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">samples</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Plugin </span><span class=\"si\">{plugin!r}</span><span class=\"s2\"> does not provide sample data named </span><span class=\"si\">{sample!r}</span><span class=\"s2\">. Available samples include: </span><span class=\"si\">{samples}</span><span class=\"s2\">.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                    <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n                    <span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"n\">samples</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Plugin </span><span class=\"si\">{plugin!r}</span><span class=\"s2\"> does not provide sample data named </span><span class=\"si\">{sample!r}</span><span class=\"s2\">. No plugin samples have been registered.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                    <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">layer_source</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">plugin</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n                <span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">datum</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                    <span class=\"n\">added</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_layer_from_data</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">datum</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">added</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">)):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">reader_plugin</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                        <span class=\"s1\">'Got unexpected type for sample (</span><span class=\"si\">{plugin!r}</span><span class=\"s1\">, </span><span class=\"si\">{sample!r}</span><span class=\"s1\">): </span><span class=\"si\">{data_type}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n                        <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span>\n                        <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n                        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"ViewerModel.open\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.components.ViewerModel.html#napari.components.ViewerModel.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">PathOrPaths</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">stack</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Open a path or list of paths with plugins, and add layers to viewer.</span>\n\n<span class=\"sd\">        A list of paths will be handed one-by-one to the napari_get_reader hook</span>\n<span class=\"sd\">        if stack is False, otherwise the full list is passed to each plugin</span>\n<span class=\"sd\">        hook.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path : str or list of str</span>\n<span class=\"sd\">            A filepath, directory, or URL (or a list of any) to open.</span>\n<span class=\"sd\">        stack : bool, optional</span>\n<span class=\"sd\">            If a list of strings is passed and ``stack`` is ``True``, then the</span>\n<span class=\"sd\">            entire list will be passed to plugins.  It is then up to individual</span>\n<span class=\"sd\">            plugins to know how to handle a list of paths.  If ``stack`` is</span>\n<span class=\"sd\">            ``False``, then the ``path`` list is broken up and passed to plugin</span>\n<span class=\"sd\">            readers one by one.  by default False.</span>\n<span class=\"sd\">        plugin : str, optional</span>\n<span class=\"sd\">            Name of a plugin to use.  If provided, will force ``path`` to be</span>\n<span class=\"sd\">            read with the specified ``plugin``.  If the requested plugin cannot</span>\n<span class=\"sd\">            read ``path``, an exception will be raised.</span>\n<span class=\"sd\">        layer_type : str, optional</span>\n<span class=\"sd\">            If provided, will force data read from ``path`` to be passed to the</span>\n<span class=\"sd\">            corresponding ``add_&lt;layer_type&gt;`` method (along with any</span>\n<span class=\"sd\">            additional) ``kwargs`` provided to this function.  This *may*</span>\n<span class=\"sd\">            result in exceptions if the data returned from the path is not</span>\n<span class=\"sd\">            compatible with the layer_type.</span>\n<span class=\"sd\">        **kwargs</span>\n<span class=\"sd\">            All other keyword arguments will be passed on to the respective</span>\n<span class=\"sd\">            ``add_layer`` method.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layers : list</span>\n<span class=\"sd\">            A list of any layers that were added to the viewer.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">))</span> <span class=\"k\">else</span> <span class=\"n\">path</span>\n        <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fspath</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]</span>  <span class=\"c1\"># PathObjects -&gt; str</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"'path' argument must be a string, list, or tuple\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_layers_with_plugins</span><span class=\"p\">(</span>\n                <span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">added</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># for layers that get added</span>\n        <span class=\"k\">with</span> <span class=\"n\">progress</span><span class=\"p\">(</span>\n            <span class=\"n\">paths</span><span class=\"p\">,</span>\n            <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">'Opening Files'</span><span class=\"p\">,</span>\n            <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># indeterminate bar for 1 file</span>\n        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pbr</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">_path</span> <span class=\"ow\">in</span> <span class=\"n\">pbr</span><span class=\"p\">:</span>\n                <span class=\"n\">added</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_layers_with_plugins</span><span class=\"p\">(</span>\n                        <span class=\"n\">_path</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">added</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_layers_with_plugins</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">path_or_paths</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Load a path or a list of paths into the viewer using plugins.</span>\n\n<span class=\"sd\">        This function is mostly called from self.open_path, where the ``stack``</span>\n<span class=\"sd\">        argument determines whether a list of strings is handed to plugins one</span>\n<span class=\"sd\">        at a time, or en-masse.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path_or_paths : str or list of str</span>\n<span class=\"sd\">            A filepath, directory, or URL (or a list of any) to open. If a</span>\n<span class=\"sd\">            list, the assumption is that the list is to be treated as a stack.</span>\n<span class=\"sd\">        kwargs : dict, optional</span>\n<span class=\"sd\">            keyword arguments that will be used to overwrite any of those that</span>\n<span class=\"sd\">            are returned in the meta dict from plugins.</span>\n<span class=\"sd\">        plugin : str, optional</span>\n<span class=\"sd\">            Name of a plugin to use.  If provided, will force ``path`` to be</span>\n<span class=\"sd\">            read with the specified ``plugin``.  If the requested plugin cannot</span>\n<span class=\"sd\">            read ``path``, an exception will be raised.</span>\n<span class=\"sd\">        layer_type : str, optional</span>\n<span class=\"sd\">            If provided, will force data read from ``path`` to be passed to the</span>\n<span class=\"sd\">            corresponding ``add_&lt;layer_type&gt;`` method (along with any</span>\n<span class=\"sd\">            additional) ``kwargs`` provided to this function.  This *may*</span>\n<span class=\"sd\">            result in exceptions if the data returned from the path is not</span>\n<span class=\"sd\">            compatible with the layer_type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List[Layer]</span>\n<span class=\"sd\">            A list of any layers that were added to the viewer.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..plugins.io</span> <span class=\"kn\">import</span> <span class=\"n\">read_data_with_plugins</span>\n\n        <span class=\"n\">layer_data</span><span class=\"p\">,</span> <span class=\"n\">hookimpl</span> <span class=\"o\">=</span> <span class=\"n\">read_data_with_plugins</span><span class=\"p\">(</span>\n            <span class=\"n\">path_or_paths</span><span class=\"p\">,</span> <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># glean layer names from filename. These will be used as *fallback*</span>\n        <span class=\"c1\"># names, if the plugin does not return a name kwarg in their meta dict.</span>\n        <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">is_sequence</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">):</span>\n                <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># if a list of paths has been returned as a list of layer data</span>\n                <span class=\"c1\"># without a 1:1 relationship between the two lists we iterate</span>\n                <span class=\"c1\"># over the first name</span>\n                <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">path_or_paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># add each layer to the viewer</span>\n        <span class=\"n\">added</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># for layers that get added</span>\n        <span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">hookimpl</span><span class=\"o\">.</span><span class=\"n\">plugin_name</span> <span class=\"k\">if</span> <span class=\"n\">hookimpl</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">layer_data</span><span class=\"p\">,</span> <span class=\"n\">filenames</span><span class=\"p\">):</span>\n            <span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">_ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n            <span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">_unify_data_and_user_kwargs</span><span class=\"p\">(</span>\n                <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">,</span> <span class=\"n\">fallback_name</span><span class=\"o\">=</span><span class=\"n\">basename</span>\n            <span class=\"p\">)</span>\n            <span class=\"c1\"># actually add the layer</span>\n            <span class=\"k\">with</span> <span class=\"n\">layer_source</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">reader_plugin</span><span class=\"o\">=</span><span class=\"n\">plugin</span><span class=\"p\">):</span>\n                <span class=\"n\">added</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_layer_from_data</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_data</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">added</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_layer_from_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"Add arbitrary layer data to the viewer.</span>\n\n<span class=\"sd\">        Primarily intended for usage by reader plugin hooks.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        data : Any</span>\n<span class=\"sd\">            Data in a format that is valid for the corresponding `add_*` method</span>\n<span class=\"sd\">            of the specified ``layer_type``.</span>\n<span class=\"sd\">        meta : dict, optional</span>\n<span class=\"sd\">            Dict of keyword arguments that will be passed to the corresponding</span>\n<span class=\"sd\">            `add_*` method.  MUST NOT contain any keyword arguments that are</span>\n<span class=\"sd\">            not valid for the corresponding method.</span>\n<span class=\"sd\">        layer_type : str</span>\n<span class=\"sd\">            Type of layer to add.  MUST have a corresponding add_* method on</span>\n<span class=\"sd\">            on the viewer instance.  If not provided, the layer is assumed to</span>\n<span class=\"sd\">            be \"image\", unless data.dtype is one of (np.int32, np.uint32,</span>\n<span class=\"sd\">            np.int64, np.uint64), in which case it is assumed to be \"labels\".</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        layers : list of layers</span>\n<span class=\"sd\">            A list of layers added to the viewer.</span>\n\n<span class=\"sd\">        Raises</span>\n<span class=\"sd\">        ------</span>\n<span class=\"sd\">        ValueError</span>\n<span class=\"sd\">            If ``layer_type`` is not one of the recognized layer types.</span>\n<span class=\"sd\">        TypeError</span>\n<span class=\"sd\">            If any keyword arguments in ``meta`` are unexpected for the</span>\n<span class=\"sd\">            corresponding `add_*` method for this layer_type.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        A typical use case might be to upack a tuple of layer data with a</span>\n<span class=\"sd\">        specified layer_type.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; viewer = napari.Viewer()</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = (</span>\n<span class=\"sd\">        ...     np.random.random((10, 2)) * 20,</span>\n<span class=\"sd\">        ...     {'face_color': 'blue'},</span>\n<span class=\"sd\">        ...     'points',</span>\n<span class=\"sd\">        ... )</span>\n<span class=\"sd\">        &gt;&gt;&gt; viewer._add_layer_from_data(*data)</span>\n\n<span class=\"sd\">        \"\"\"</span>\n\n        <span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">layer_type</span> <span class=\"ow\">or</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># assumes that big integer type arrays are likely labels.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span>\n            <span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"n\">guess_labels</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Unrecognized layer_type: '</span><span class=\"si\">{layer_type}</span><span class=\"s2\">'. Must be one of: </span><span class=\"si\">{layer_names}</span><span class=\"s2\">.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">layer_names</span><span class=\"o\">=</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">add_method</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">'add_'</span> <span class=\"o\">+</span> <span class=\"n\">layer_type</span><span class=\"p\">)</span>\n            <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">add_method</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">meta</span> <span class=\"ow\">or</span> <span class=\"p\">{}))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s1\">'unexpected keyword argument'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n            <span class=\"n\">bad_key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'keyword argument '</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"_add_layer_from_data received an unexpected keyword argument (</span><span class=\"si\">{bad_key}</span><span class=\"s2\">) for layer type </span><span class=\"si\">{layer_type}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">bad_key</span><span class=\"o\">=</span><span class=\"n\">bad_key</span><span class=\"p\">,</span>\n                    <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">exc</span>\n        <span class=\"k\">return</span> <span class=\"n\">layer</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_normalize_layer_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">LayerData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FullLayerData</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Accepts any layerdata tuple, and returns a fully qualified tuple.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : LayerData</span>\n<span class=\"sd\">        1-, 2-, or 3-tuple with (data, meta, layer_type).</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    FullLayerData</span>\n<span class=\"sd\">        3-tuple with (data, meta, layer_type)</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    ValueError</span>\n<span class=\"sd\">        If data has len &lt; 1 or len &gt; 3, or if the second item in ``data`` is</span>\n<span class=\"sd\">        not a ``dict``, or the third item is not a valid layer_type ``str``</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"LayerData must be a 1-, 2-, or 3-tuple\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"The second item in a LayerData tuple must be a dict\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"The third item in a LayerData tuple must be one of: </span><span class=\"si\">{layers!r}</span><span class=\"s2\">.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">NAMES</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">guess_labels</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n    <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_unify_data_and_user_kwargs</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">LayerData</span><span class=\"p\">,</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">fallback_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FullLayerData</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Merge data returned from plugins with options specified by user.</span>\n\n<span class=\"sd\">    If ``data == (_data, _meta, _type)``.  Then:</span>\n\n<span class=\"sd\">    - ``kwargs`` will be used to update ``_meta``</span>\n<span class=\"sd\">    - ``layer_type`` will replace ``_type`` and, if provided, ``_meta`` keys</span>\n<span class=\"sd\">        will be pruned to layer_type-appropriate kwargs</span>\n<span class=\"sd\">    - ``fallback_name`` is used if ``not _meta.get('name')``</span>\n\n<span class=\"sd\">    .. note:</span>\n\n<span class=\"sd\">        If a user specified both layer_type and additional keyword arguments</span>\n<span class=\"sd\">        to viewer.open(), it is their responsibility to make sure the kwargs</span>\n<span class=\"sd\">        match the layer_type.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    data : LayerData</span>\n<span class=\"sd\">        1-, 2-, or 3-tuple with (data, meta, layer_type) returned from plugin.</span>\n<span class=\"sd\">    kwargs : dict, optional</span>\n<span class=\"sd\">        User-supplied keyword arguments, to override those in ``meta`` supplied</span>\n<span class=\"sd\">        by plugins.</span>\n<span class=\"sd\">    layer_type : str, optional</span>\n<span class=\"sd\">        A user-supplied layer_type string, to override the ``layer_type``</span>\n<span class=\"sd\">        declared by the plugin.</span>\n<span class=\"sd\">    fallback_name : str, optional</span>\n<span class=\"sd\">        A name for the layer, to override any name in ``meta`` supplied by the</span>\n<span class=\"sd\">        plugin.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    FullLayerData</span>\n<span class=\"sd\">        Fully qualified LayerData tuple with user-provided overrides.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"n\">_meta</span><span class=\"p\">,</span> <span class=\"n\">_type</span> <span class=\"o\">=</span> <span class=\"n\">_normalize_layer_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span>\n        <span class=\"c1\"># the user has explicitly requested this be a certain layer type</span>\n        <span class=\"c1\"># strip any kwargs from the plugin that are no longer relevant</span>\n        <span class=\"n\">_meta</span> <span class=\"o\">=</span> <span class=\"n\">prune_kwargs</span><span class=\"p\">(</span><span class=\"n\">_meta</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">)</span>\n        <span class=\"n\">_type</span> <span class=\"o\">=</span> <span class=\"n\">layer_type</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if user provided kwargs, use to override any meta dict values that</span>\n        <span class=\"c1\"># were returned by the plugin. We only prune kwargs if the user did</span>\n        <span class=\"c1\"># *not* specify the layer_type. This means that if a user specified</span>\n        <span class=\"c1\"># both layer_type and additional keyword arguments to viewer.open(),</span>\n        <span class=\"c1\"># it is their responsibility to make sure the kwargs match the</span>\n        <span class=\"c1\"># layer_type.</span>\n        <span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">prune_kwargs</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">_type</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_type</span> <span class=\"k\">else</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">fallback_name</span><span class=\"p\">:</span>\n        <span class=\"n\">_meta</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fallback_name</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"n\">_meta</span><span class=\"p\">,</span> <span class=\"n\">_type</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">prune_kwargs</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Return copy of ``kwargs`` with only keys valid for ``add_&lt;layer_type&gt;``</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    kwargs : dict</span>\n<span class=\"sd\">        A key: value mapping where some or all of the keys are parameter names</span>\n<span class=\"sd\">        for the corresponding ``Viewer.add_&lt;layer_type&gt;`` method.</span>\n<span class=\"sd\">    layer_type : str</span>\n<span class=\"sd\">        The type of layer that is going to be added with these ``kwargs``.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    pruned_kwargs : dict</span>\n<span class=\"sd\">        A key: value mapping where all of the keys are valid parameter names</span>\n<span class=\"sd\">        for the corresponding ``Viewer.add_&lt;layer_type&gt;`` method.</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    ValueError</span>\n<span class=\"sd\">        If ``ViewerModel`` does not provide an ``add_&lt;layer_type&gt;`` method</span>\n<span class=\"sd\">        for the provided ``layer_type``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; test_kwargs = {</span>\n<span class=\"sd\">    ...     'scale': (0.75, 1),</span>\n<span class=\"sd\">    ...     'blending': 'additive',</span>\n<span class=\"sd\">    ...     'num_colors': 10,</span>\n<span class=\"sd\">    ... }</span>\n<span class=\"sd\">    &gt;&gt;&gt; prune_kwargs(test_kwargs, 'image')</span>\n<span class=\"sd\">    {'scale': (0.75, 1), 'blending': 'additive'}</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; # only labels has the ``num_colors`` argument</span>\n<span class=\"sd\">    &gt;&gt;&gt; prune_kwargs(test_kwargs, 'labels')</span>\n<span class=\"sd\">    {'scale': (0.75, 1), 'blending': 'additive', 'num_colors': 10}</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">add_method</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">ViewerModel</span><span class=\"p\">,</span> <span class=\"s1\">'add_'</span> <span class=\"o\">+</span> <span class=\"n\">layer_type</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">add_method</span> <span class=\"ow\">or</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s1\">'layer'</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Invalid layer_type: </span><span class=\"si\">{layer_type}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># get valid params for the corresponding add_&lt;layer_type&gt; method</span>\n    <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">valid_add_kwargs</span><span class=\"p\">()[</span><span class=\"n\">layer_type</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">valid</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">valid_add_kwargs</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]:</span>\n    <span class=\"sd\">\"\"\"Return a dict where keys are layer types &amp; values are valid kwargs.\"\"\"</span>\n    <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">meth</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">ViewerModel</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">meth</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'add_'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">meth</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:]</span> <span class=\"o\">==</span> <span class=\"s1\">'layer'</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">ViewerModel</span><span class=\"p\">,</span> <span class=\"n\">meth</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">parameters</span>\n        <span class=\"n\">valid</span><span class=\"p\">[</span><span class=\"n\">meth</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:]]</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"s1\">'self'</span><span class=\"p\">,</span> <span class=\"s1\">'kwargs'</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">valid</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">_layer</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Labels</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Points</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Shapes</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Surface</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Tracks</span><span class=\"p\">,</span>\n    <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Vectors</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">create_add_method</span><span class=\"p\">(</span><span class=\"n\">_layer</span><span class=\"p\">)</span>\n    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">ViewerModel</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span>\n</pre></div>\n      ","pageHeaders":[],"ipynbSource":"","mdSource":""}},"__N_SSG":true}