{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for napari._qt.qt_event_loop","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../../../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">contextmanager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span>\n<span class=\"kn\">from</span> <span class=\"nn\">warnings</span> <span class=\"kn\">import</span> <span class=\"n\">warn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtCore</span> <span class=\"kn\">import</span> <span class=\"n\">Qt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtGui</span> <span class=\"kn\">import</span> <span class=\"n\">QIcon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"n\">QApplication</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..settings</span> <span class=\"kn\">import</span> <span class=\"n\">get_settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">perf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.notifications</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">notification_manager</span><span class=\"p\">,</span>\n    <span class=\"n\">show_console_notification</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.perf</span> <span class=\"kn\">import</span> <span class=\"n\">perf_config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..utils.translations</span> <span class=\"kn\">import</span> <span class=\"n\">trans</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.dialogs.qt_notification</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">NapariQtNotification</span><span class=\"p\">,</span>\n    <span class=\"n\">NotificationDispatcher</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.qt_resources</span> <span class=\"kn\">import</span> <span class=\"n\">_register_napari_resources</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.qthreading</span> <span class=\"kn\">import</span> <span class=\"n\">wait_for_workers_to_quit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_maybe_allow_interrupt</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">IPython</span> <span class=\"kn\">import</span> <span class=\"n\">InteractiveShell</span>\n\n<span class=\"n\">NAPARI_ICON_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'..'</span><span class=\"p\">,</span> <span class=\"s1\">'resources'</span><span class=\"p\">,</span> <span class=\"s1\">'logo.png'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">NAPARI_APP_ID</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'napari.napari.viewer.</span><span class=\"si\">{</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_app_id</span><span class=\"p\">(</span><span class=\"n\">app_id</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"nt\"</span> <span class=\"ow\">and</span> <span class=\"n\">app_id</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">,</span> <span class=\"s1\">'frozen'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n\n        <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">windll</span><span class=\"o\">.</span><span class=\"n\">shell32</span><span class=\"o\">.</span><span class=\"n\">SetCurrentProcessExplicitAppUserModelID</span><span class=\"p\">(</span><span class=\"n\">app_id</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'app_name'</span><span class=\"p\">:</span> <span class=\"s1\">'napari'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'app_version'</span><span class=\"p\">:</span> <span class=\"n\">__version__</span><span class=\"p\">,</span>\n    <span class=\"s1\">'icon'</span><span class=\"p\">:</span> <span class=\"n\">NAPARI_ICON_PATH</span><span class=\"p\">,</span>\n    <span class=\"s1\">'org_name'</span><span class=\"p\">:</span> <span class=\"s1\">'napari'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'org_domain'</span><span class=\"p\">:</span> <span class=\"s1\">'napari.org'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'app_id'</span><span class=\"p\">:</span> <span class=\"n\">NAPARI_APP_ID</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\"># store reference to QApplication to prevent garbage collection</span>\n<span class=\"n\">_app_ref</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">_IPYTHON_WAS_HERE_FIRST</span> <span class=\"o\">=</span> <span class=\"s2\">\"IPython\"</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_app</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span>\n    <span class=\"n\">app_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">app_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">org_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">org_domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">app_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ipy_interactive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">QApplication</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Get or create the Qt QApplication.</span>\n\n<span class=\"sd\">    There is only one global QApplication instance, which can be retrieved by</span>\n<span class=\"sd\">    calling get_app again, (or by using QApplication.instance())</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app_name : str, optional</span>\n<span class=\"sd\">        Set app name (if creating for the first time), by default 'napari'</span>\n<span class=\"sd\">    app_version : str, optional</span>\n<span class=\"sd\">        Set app version (if creating for the first time), by default __version__</span>\n<span class=\"sd\">    icon : str, optional</span>\n<span class=\"sd\">        Set app icon (if creating for the first time), by default</span>\n<span class=\"sd\">        NAPARI_ICON_PATH</span>\n<span class=\"sd\">    org_name : str, optional</span>\n<span class=\"sd\">        Set organization name (if creating for the first time), by default</span>\n<span class=\"sd\">        'napari'</span>\n<span class=\"sd\">    org_domain : str, optional</span>\n<span class=\"sd\">        Set organization domain (if creating for the first time), by default</span>\n<span class=\"sd\">        'napari.org'</span>\n<span class=\"sd\">    app_id : str, optional</span>\n<span class=\"sd\">        Set organization domain (if creating for the first time).  Will be</span>\n<span class=\"sd\">        passed to set_app_id (which may also be called independently), by</span>\n<span class=\"sd\">        default NAPARI_APP_ID</span>\n<span class=\"sd\">    ipy_interactive : bool, optional</span>\n<span class=\"sd\">        Use the IPython Qt event loop ('%gui qt' magic) if running in an</span>\n<span class=\"sd\">        interactive IPython terminal.</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    QApplication</span>\n<span class=\"sd\">        [description]</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    Substitutes QApplicationWithTracing when the NAPARI_PERFMON env variable</span>\n<span class=\"sd\">    is set.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># napari defaults are all-or nothing.  If any of the keywords are used</span>\n    <span class=\"c1\"># then they are all used.</span>\n    <span class=\"n\">set_values</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">locals</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">}</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">set_values</span> <span class=\"k\">else</span> <span class=\"n\">_defaults</span>\n    <span class=\"k\">global</span> <span class=\"n\">_app_ref</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n        <span class=\"n\">set_values</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">(</span><span class=\"s2\">\"ipy_interactive\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">set_values</span><span class=\"p\">:</span>\n\n            <span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"QApplication already existed, these arguments to to 'get_app' were ignored: </span><span class=\"si\">{args}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">set_values</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">perf_config</span> <span class=\"ow\">and</span> <span class=\"n\">perf_config</span><span class=\"o\">.</span><span class=\"n\">trace_qt_events</span><span class=\"p\">:</span>\n            <span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Using NAPARI_PERFMON with an already-running QtApp (--gui qt?) is not supported.\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># automatically determine monitor DPI.</span>\n        <span class=\"c1\"># Note: this MUST be set before the QApplication is instantiated</span>\n        <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">setAttribute</span><span class=\"p\">(</span><span class=\"n\">Qt</span><span class=\"o\">.</span><span class=\"n\">AA_EnableHighDpiScaling</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">perf_config</span> <span class=\"ow\">and</span> <span class=\"n\">perf_config</span><span class=\"o\">.</span><span class=\"n\">trace_qt_events</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.perf.qt_event_tracing</span> <span class=\"kn\">import</span> <span class=\"n\">QApplicationWithTracing</span>\n\n            <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QApplicationWithTracing</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QApplication</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># if this is the first time the Qt app is being instantiated, we set</span>\n        <span class=\"c1\"># the name and metadata</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setApplicationName</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'app_name'</span><span class=\"p\">))</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setApplicationVersion</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'app_version'</span><span class=\"p\">))</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setOrganizationName</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'org_name'</span><span class=\"p\">))</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setOrganizationDomain</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'org_domain'</span><span class=\"p\">))</span>\n        <span class=\"n\">set_app_id</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'app_id'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_ipython_has_eventloop</span><span class=\"p\">():</span>\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">notification_ready</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"n\">NapariQtNotification</span><span class=\"o\">.</span><span class=\"n\">show_notification</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">notification_ready</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n            <span class=\"n\">show_console_notification</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">windowIcon</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isNull</span><span class=\"p\">():</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">setWindowIcon</span><span class=\"p\">(</span><span class=\"n\">QIcon</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'icon'</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ipy_interactive</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ipy_interactive</span> <span class=\"o\">=</span> <span class=\"n\">get_settings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">ipy_interactive</span>\n    <span class=\"k\">if</span> <span class=\"n\">_IPYTHON_WAS_HERE_FIRST</span><span class=\"p\">:</span>\n        <span class=\"n\">_try_enable_ipython_gui</span><span class=\"p\">(</span><span class=\"s1\">'qt'</span> <span class=\"k\">if</span> <span class=\"n\">ipy_interactive</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">perf_config</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">perf_config</span><span class=\"o\">.</span><span class=\"n\">patched</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Will patch based on config file.</span>\n        <span class=\"n\">perf_config</span><span class=\"o\">.</span><span class=\"n\">patch_callables</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_app_ref</span><span class=\"p\">:</span>  <span class=\"c1\"># running get_app for the first time</span>\n        <span class=\"c1\"># see docstring of `wait_for_workers_to_quit` for caveats on killing</span>\n        <span class=\"c1\"># workers at shutdown.</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">aboutToQuit</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">wait_for_workers_to_quit</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># this will register all of our resources (icons) with Qt, so that they</span>\n        <span class=\"c1\"># can be used in qss files and elsewhere.</span>\n        <span class=\"n\">_register_napari_resources</span><span class=\"p\">()</span>\n\n    <span class=\"n\">_app_ref</span> <span class=\"o\">=</span> <span class=\"n\">app</span>  <span class=\"c1\"># prevent garbage collection</span>\n\n    <span class=\"c1\"># Add the dispatcher attribute to the application to be able to dispatch</span>\n    <span class=\"c1\"># notifications coming from threads</span>\n    <span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s2\">\"_dispatcher\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">dispatcher</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">NotificationDispatcher</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">quit_app</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Close all windows and quit the QApplication if napari started it.\"\"\"</span>\n    <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">closeAllWindows</span><span class=\"p\">()</span>\n    <span class=\"c1\"># if we started the application then the app will be named 'napari'.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">applicationName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'napari'</span>\n        <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_ipython_has_eventloop</span><span class=\"p\">()</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># otherwise, something else created the QApp before us (such as</span>\n    <span class=\"c1\"># %gui qt IPython magic).  If we quit the app in this case, then</span>\n    <span class=\"c1\"># *later* attempts to instantiate a napari viewer won't work until</span>\n    <span class=\"c1\"># the event loop is restarted with app.exec_().  So rather than</span>\n    <span class=\"c1\"># quit just close all the windows (and clear our app icon).</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">setWindowIcon</span><span class=\"p\">(</span><span class=\"n\">QIcon</span><span class=\"p\">())</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">perf</span><span class=\"o\">.</span><span class=\"n\">USE_PERFMON</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Write trace file before exit, if we were writing one.</span>\n        <span class=\"c1\"># Is there a better place to make sure this is done on exit?</span>\n        <span class=\"n\">perf</span><span class=\"o\">.</span><span class=\"n\">timers</span><span class=\"o\">.</span><span class=\"n\">stop_trace_file</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Stop the monitor service if we were using it</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..components.experimental.monitor</span> <span class=\"kn\">import</span> <span class=\"n\">monitor</span>\n\n        <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">async_loading</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Shutdown the chunkloader</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">..components.experimental.chunk</span> <span class=\"kn\">import</span> <span class=\"n\">chunk_loader</span>\n\n        <span class=\"n\">chunk_loader</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"gui_qt\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.html#napari.gui_qt\">[docs]</a><span class=\"nd\">@contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">gui_qt</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">startup_logo</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">gui_exceptions</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Start a Qt event loop in which to run the application.</span>\n\n<span class=\"sd\">    NOTE: This context manager is deprecated!. Prefer using :func:`napari.run`.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    startup_logo : bool, optional</span>\n<span class=\"sd\">        Show a splash screen with the napari logo during startup.</span>\n<span class=\"sd\">    gui_exceptions : bool, optional</span>\n<span class=\"sd\">        Whether to show uncaught exceptions in the GUI, by default they will be</span>\n<span class=\"sd\">        shown in the console that launched the event loop.</span>\n<span class=\"sd\">    force : bool, optional</span>\n<span class=\"sd\">        Force the application event_loop to start, even if there are no top</span>\n<span class=\"sd\">        level widgets to show.</span>\n\n<span class=\"sd\">    Notes</span>\n<span class=\"sd\">    -----</span>\n<span class=\"sd\">    This context manager is not needed if running napari within an interactive</span>\n<span class=\"sd\">    IPython session. In this case, use the ``%gui qt`` magic command, or start</span>\n<span class=\"sd\">    IPython with the Qt GUI event loop enabled by default by using</span>\n<span class=\"sd\">    ``ipython --gui=qt``.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">warn</span><span class=\"p\">(</span>\n        <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">The 'gui_qt()' context manager is deprecated.</span><span class=\"se\">\\n</span><span class=\"s2\">If you are running napari from a script, please use 'napari.run()' as follows:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">    import napari</span><span class=\"se\">\\n\\n</span><span class=\"s2\">    viewer = napari.Viewer()  # no prior setup needed</span><span class=\"se\">\\n</span><span class=\"s2\">    # other code using the viewer...</span><span class=\"se\">\\n</span><span class=\"s2\">    napari.run()</span><span class=\"se\">\\n\\n</span><span class=\"s2\">In IPython or Jupyter, 'napari.run()' is not necessary. napari will automatically</span><span class=\"se\">\\n</span><span class=\"s2\">start an interactive event loop for you: </span><span class=\"se\">\\n\\n</span><span class=\"s2\">    import napari</span><span class=\"se\">\\n</span><span class=\"s2\">    viewer = napari.Viewer()  # that's it!</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"ne\">FutureWarning</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">get_app</span><span class=\"p\">()</span>\n    <span class=\"n\">splash</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">startup_logo</span> <span class=\"ow\">and</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">applicationName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'napari'</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">.widgets.qt_splash_screen</span> <span class=\"kn\">import</span> <span class=\"n\">NapariSplashScreen</span>\n\n        <span class=\"n\">splash</span> <span class=\"o\">=</span> <span class=\"n\">NapariSplashScreen</span><span class=\"p\">()</span>\n        <span class=\"n\">splash</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">app</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"n\">notification_manager</span><span class=\"o\">.</span><span class=\"n\">receive_error</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">())</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">,</span> <span class=\"n\">gui_exceptions</span><span class=\"o\">=</span><span class=\"n\">gui_exceptions</span><span class=\"p\">,</span> <span class=\"n\">_func_name</span><span class=\"o\">=</span><span class=\"s1\">'gui_qt'</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_ipython_has_eventloop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return True if IPython %gui qt is active.</span>\n\n<span class=\"sd\">    Using this is better than checking ``QApp.thread().loopLevel() &gt; 0``,</span>\n<span class=\"sd\">    because IPython starts and stops the event loop continuously to accept code</span>\n<span class=\"sd\">    at the prompt.  So it will likely \"appear\" like there is no event loop</span>\n<span class=\"sd\">    running, but we still don't need to start one.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">ipy_module</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"IPython\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ipy_module</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">shell</span><span class=\"p\">:</span> <span class=\"n\">InteractiveShell</span> <span class=\"o\">=</span> <span class=\"n\">ipy_module</span><span class=\"o\">.</span><span class=\"n\">get_ipython</span><span class=\"p\">()</span>  <span class=\"c1\"># type: ignore</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">shell</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">active_eventloop</span> <span class=\"o\">==</span> <span class=\"s1\">'qt'</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_pycharm_has_eventloop</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">:</span> <span class=\"n\">QApplication</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return true if running in PyCharm and eventloop is active.</span>\n\n<span class=\"sd\">    Explicit checking is necessary because PyCharm runs a custom interactive</span>\n<span class=\"sd\">    shell which overrides `InteractiveShell.enable_gui()`, breaking some</span>\n<span class=\"sd\">    superclass behaviour.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">in_pycharm</span> <span class=\"o\">=</span> <span class=\"s1\">'PYCHARM_HOSTED'</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span>\n    <span class=\"n\">in_event_loop</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'_in_event_loop'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">in_pycharm</span> <span class=\"ow\">and</span> <span class=\"n\">in_event_loop</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_try_enable_ipython_gui</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"o\">=</span><span class=\"s1\">'qt'</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Start %gui qt the eventloop.\"\"\"</span>\n    <span class=\"n\">ipy_module</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"IPython\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ipy_module</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">shell</span><span class=\"p\">:</span> <span class=\"n\">InteractiveShell</span> <span class=\"o\">=</span> <span class=\"n\">ipy_module</span><span class=\"o\">.</span><span class=\"n\">get_ipython</span><span class=\"p\">()</span>  <span class=\"c1\"># type: ignore</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">shell</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">if</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">active_eventloop</span> <span class=\"o\">!=</span> <span class=\"n\">gui</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">enable_gui</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"run\"><a class=\"viewcode-back\" href=\"../../../api/stable/napari.html#napari.run\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">gui_exceptions</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">max_loop_level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_func_name</span><span class=\"o\">=</span><span class=\"s1\">'run'</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Start the Qt Event Loop</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    force : bool, optional</span>\n<span class=\"sd\">        Force the application event_loop to start, even if there are no top</span>\n<span class=\"sd\">        level widgets to show.</span>\n<span class=\"sd\">    gui_exceptions : bool, optional</span>\n<span class=\"sd\">        Whether to show uncaught exceptions in the GUI. By default they will be</span>\n<span class=\"sd\">        shown in the console that launched the event loop.</span>\n<span class=\"sd\">    max_loop_level : int, optional</span>\n<span class=\"sd\">        The maximum allowable \"loop level\" for the execution thread.  Every</span>\n<span class=\"sd\">        time `QApplication.exec_()` is called, Qt enters the event loop,</span>\n<span class=\"sd\">        increments app.thread().loopLevel(), and waits until exit() is called.</span>\n<span class=\"sd\">        This function will prevent calling `exec_()` if the application already</span>\n<span class=\"sd\">        has at least ``max_loop_level`` event loops running.  By default, 1.</span>\n<span class=\"sd\">    _func_name : str, optional</span>\n<span class=\"sd\">        name of calling function, by default 'run'.  This is only here to</span>\n<span class=\"sd\">        provide functions like `gui_qt` a way to inject their name into the</span>\n<span class=\"sd\">        warning message.</span>\n\n<span class=\"sd\">    Raises</span>\n<span class=\"sd\">    ------</span>\n<span class=\"sd\">    RuntimeError</span>\n<span class=\"sd\">        (To avoid confusion) if no widgets would be shown upon starting the</span>\n<span class=\"sd\">        event loop.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">_ipython_has_eventloop</span><span class=\"p\">():</span>\n        <span class=\"c1\"># If %gui qt is active, we don't need to block again.</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">_pycharm_has_eventloop</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"c1\"># explicit check for PyCharm pydev console</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s1\">'No Qt app has been created. One can be created by calling `get_app()` or `qtpy.QtWidgets.QApplication([])`'</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">topLevelWidgets</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n        <span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Refusing to run a QApplication with no topLevelWidgets. To run the app anyway, use `</span><span class=\"si\">{_func_name}</span><span class=\"s2\">(force=True)`\"</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">_func_name</span><span class=\"o\">=</span><span class=\"n\">_func_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">thread</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">loopLevel</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max_loop_level</span><span class=\"p\">:</span>\n        <span class=\"n\">loops</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">thread</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">loopLevel</span><span class=\"p\">()</span>\n        <span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"n\">trans</span><span class=\"o\">.</span><span class=\"n\">_n</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"A QApplication is already running with 1 event loop. To enter *another* event loop, use `</span><span class=\"si\">{_func_name}</span><span class=\"s2\">(max_loop_level=</span><span class=\"si\">{max_loop_level}</span><span class=\"s2\">)`\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"A QApplication is already running with </span><span class=\"si\">{n}</span><span class=\"s2\"> event loops. To enter *another* event loop, use `</span><span class=\"si\">{_func_name}</span><span class=\"s2\">(max_loop_level=</span><span class=\"si\">{max_loop_level}</span><span class=\"s2\">)`\"</span><span class=\"p\">,</span>\n                <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">loops</span><span class=\"p\">,</span>\n                <span class=\"n\">deferred</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">_func_name</span><span class=\"o\">=</span><span class=\"n\">_func_name</span><span class=\"p\">,</span>\n                <span class=\"n\">max_loop_level</span><span class=\"o\">=</span><span class=\"n\">loops</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">with</span> <span class=\"n\">notification_manager</span><span class=\"p\">,</span> <span class=\"n\">_maybe_allow_interrupt</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span></div>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}