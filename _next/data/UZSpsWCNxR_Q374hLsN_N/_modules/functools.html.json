{"pageProps":{"state":{"globalHeaders":{"https://napari-hub.org":{"level":1,"children":[],"href":"https://napari-hub.org","text":"napari hub"},"https://github.com/napari/napari":{"level":1,"children":[],"href":"https://github.com/napari/napari","text":"napari source code"},"/developers/index.html":{"level":1,"children":["/developers/benchmarks.html","/developers/contributing.html","/developers/core_dev_guide.html","/developers/profiling.html","/developers/release.html","/developers/testing.html","/developers/docs.html"],"href":"/developers/index.html","text":"Developer resources"},"/developers/docs.html":{"level":2,"children":[],"href":"/developers/docs.html","text":"Organization of Documentation for napari"},"/developers/testing.html":{"level":2,"children":[],"href":"/developers/testing.html","text":"Testing"},"/developers/release.html":{"level":2,"children":[],"href":"/developers/release.html","text":"Release Guide"},"/developers/profiling.html":{"level":2,"children":[],"href":"/developers/profiling.html","text":"Profiling"},"/developers/core_dev_guide.html":{"level":2,"children":[],"href":"/developers/core_dev_guide.html","text":"Core Developer Guide"},"/developers/contributing.html":{"level":2,"children":[],"href":"/developers/contributing.html","text":"Contributing Guide"},"/developers/benchmarks.html":{"level":2,"children":[],"href":"/developers/benchmarks.html","text":"Benchmarks"},"/guides/stable/index.html":{"level":1,"children":["/guides/stable/event_loop.html","/guides/stable/threading.html","/guides/stable/perfmon.html","/guides/stable/rendering.html","/guides/stable/docker.html","/guides/stable/performance.html","/guides/stable/magicgui.html","/guides/stable/translations.html","/guides/stable/rendering-explanation.html","/guides/stable/connecting_events.html","/guides/stable/connecting_events.html#long-running-blocking-functions","/guides/stable/3D_interactivity.html"],"href":"/guides/stable/index.html","text":"Developer guides"},"/guides/stable/3D_interactivity.html":{"level":2,"children":[],"href":"/guides/stable/3D_interactivity.html","text":"3D interactivity"},"/guides/stable/connecting_events.html#long-running-blocking-functions":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html#long-running-blocking-functions","text":"Long-running, blocking functions"},"/guides/stable/connecting_events.html":{"level":2,"children":[],"href":"/guides/stable/connecting_events.html","text":"Hooking up your own events"},"/guides/stable/rendering-explanation.html":{"level":2,"children":[],"href":"/guides/stable/rendering-explanation.html","text":"Rendering in napari"},"/guides/stable/translations.html":{"level":2,"children":[],"href":"/guides/stable/translations.html","text":"Translations"},"/guides/stable/magicgui.html":{"level":2,"children":[],"href":"/guides/stable/magicgui.html","text":"Using magicgui in napari"},"/guides/stable/performance.html":{"level":2,"children":[],"href":"/guides/stable/performance.html","text":"Napari Performance"},"/guides/stable/docker.html":{"level":2,"children":[],"href":"/guides/stable/docker.html","text":"Napari in Docker (WIP)"},"/guides/stable/rendering.html":{"level":2,"children":[],"href":"/guides/stable/rendering.html","text":"Asynchronous Rendering"},"/guides/stable/perfmon.html":{"level":2,"children":[],"href":"/guides/stable/perfmon.html","text":"Performance Monitoring"},"/guides/stable/threading.html":{"level":2,"children":[],"href":"/guides/stable/threading.html","text":"Multithreading in napari"},"/guides/stable/event_loop.html":{"level":2,"children":[],"href":"/guides/stable/event_loop.html","text":"An Introduction to the Event Loop in napari"},"/roadmaps/index.html":{"level":1,"children":["/roadmaps/0_4.html","/roadmaps/0_3_retrospective.html","/roadmaps/0_3.html"],"href":"/roadmaps/index.html","text":"Roadmaps"},"/roadmaps/0_3.html":{"level":2,"children":[],"href":"/roadmaps/0_3.html","text":"Roadmap 0.3"},"/roadmaps/0_3_retrospective.html":{"level":2,"children":[],"href":"/roadmaps/0_3_retrospective.html","text":"Roadmap 0.3 Retrospective"},"/roadmaps/0_4.html":{"level":2,"children":[],"href":"/roadmaps/0_4.html","text":"Roadmap 0.4"},"/api/stable/index.html":{"level":1,"children":["/api/stable/napari.layers.html","/api/stable/napari.view_layers.html","/api/stable/napari.types.html","/api/stable/napari.utils.html","/api/stable/napari.plugins.html","/api/stable/napari.components.html","/api/stable/napari.qt.threading.html","/api/stable/napari.utils.perf.html","/api/stable/napari.html"],"href":"/api/stable/index.html","text":"API reference"},"/api/stable/napari.html":{"level":2,"children":["/api/stable/napari.Viewer.html"],"href":"/api/stable/napari.html","text":"napari"},"/api/stable/napari.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.Viewer.html","text":"napari.Viewer"},"/api/stable/napari.utils.perf.html":{"level":2,"children":["/api/stable/napari.utils.perf.PerfEvent.html"],"href":"/api/stable/napari.utils.perf.html","text":"napari.utils.perf"},"/api/stable/napari.utils.perf.PerfEvent.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.perf.PerfEvent.html","text":"napari.utils.perf.PerfEvent"},"/api/stable/napari.qt.threading.html":{"level":2,"children":["/api/stable/napari.qt.threading.FunctionWorker.html","/api/stable/napari.qt.threading.GeneratorWorker.html","/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","/api/stable/napari.qt.threading.WorkerBase.html","/api/stable/napari.qt.threading.WorkerBaseSignals.html"],"href":"/api/stable/napari.qt.threading.html","text":"napari.qt.threading"},"/api/stable/napari.qt.threading.WorkerBaseSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBaseSignals.html","text":"napari.qt.threading.WorkerBaseSignals"},"/api/stable/napari.qt.threading.WorkerBase.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.WorkerBase.html","text":"napari.qt.threading.WorkerBase"},"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorkerSignals.html","text":"napari.qt.threading.GeneratorWorkerSignals"},"/api/stable/napari.qt.threading.GeneratorWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.GeneratorWorker.html","text":"napari.qt.threading.GeneratorWorker"},"/api/stable/napari.qt.threading.FunctionWorker.html":{"level":3,"children":[],"href":"/api/stable/napari.qt.threading.FunctionWorker.html","text":"napari.qt.threading.FunctionWorker"},"/api/stable/napari.components.html":{"level":2,"children":["/api/stable/napari.components.Camera.html","/api/stable/napari.components.Dims.html","/api/stable/napari.components.LayerList.html","/api/stable/napari.components.ViewerModel.html"],"href":"/api/stable/napari.components.html","text":"napari.components"},"/api/stable/napari.components.ViewerModel.html":{"level":3,"children":[],"href":"/api/stable/napari.components.ViewerModel.html","text":"napari.components.ViewerModel"},"/api/stable/napari.components.LayerList.html":{"level":3,"children":[],"href":"/api/stable/napari.components.LayerList.html","text":"napari.components.LayerList"},"/api/stable/napari.components.Dims.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Dims.html","text":"napari.components.Dims"},"/api/stable/napari.components.Camera.html":{"level":3,"children":[],"href":"/api/stable/napari.components.Camera.html","text":"napari.components.Camera"},"/api/stable/napari.plugins.html":{"level":2,"children":["/api/stable/napari.plugins.NapariPluginManager.html"],"href":"/api/stable/napari.plugins.html","text":"napari.plugins"},"/api/stable/napari.plugins.NapariPluginManager.html":{"level":3,"children":[],"href":"/api/stable/napari.plugins.NapariPluginManager.html","text":"napari.plugins.NapariPluginManager"},"/api/stable/napari.utils.html":{"level":2,"children":["/api/stable/napari.utils.Colormap.html","/api/stable/napari.utils.nbscreenshot.html"],"href":"/api/stable/napari.utils.html","text":"napari.utils"},"/api/stable/napari.utils.nbscreenshot.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.nbscreenshot.html","text":"napari.utils.nbscreenshot"},"/api/stable/napari.utils.Colormap.html":{"level":3,"children":[],"href":"/api/stable/napari.utils.Colormap.html","text":"napari.utils.Colormap"},"/api/stable/napari.types.html":{"level":2,"children":["/api/stable/napari.types.ArrayBase.html","/api/stable/napari.types.Path.html","/api/stable/napari.types.SampleDict.html","/api/stable/napari.types.TracebackType.html","/api/stable/napari.types.TypedDict.html"],"href":"/api/stable/napari.types.html","text":"napari.types"},"/api/stable/napari.types.TypedDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TypedDict.html","text":"napari.types.TypedDict"},"/api/stable/napari.types.TracebackType.html":{"level":3,"children":[],"href":"/api/stable/napari.types.TracebackType.html","text":"napari.types.TracebackType"},"/api/stable/napari.types.SampleDict.html":{"level":3,"children":[],"href":"/api/stable/napari.types.SampleDict.html","text":"napari.types.SampleDict"},"/api/stable/napari.types.Path.html":{"level":3,"children":[],"href":"/api/stable/napari.types.Path.html","text":"napari.types.Path"},"/api/stable/napari.types.ArrayBase.html":{"level":3,"children":[],"href":"/api/stable/napari.types.ArrayBase.html","text":"napari.types.ArrayBase"},"/api/stable/napari.view_layers.html":{"level":2,"children":["/api/stable/napari.view_layers.Viewer.html"],"href":"/api/stable/napari.view_layers.html","text":"napari.view_layers"},"/api/stable/napari.view_layers.Viewer.html":{"level":3,"children":[],"href":"/api/stable/napari.view_layers.Viewer.html","text":"napari.view_layers.Viewer"},"/api/stable/napari.layers.html":{"level":2,"children":["/api/stable/napari.layers.Image.html","/api/stable/napari.layers.Labels.html","/api/stable/napari.layers.Layer.html","/api/stable/napari.layers.Points.html","/api/stable/napari.layers.Shapes.html","/api/stable/napari.layers.Surface.html","/api/stable/napari.layers.Tracks.html","/api/stable/napari.layers.Vectors.html"],"href":"/api/stable/napari.layers.html","text":"napari.layers"},"/api/stable/napari.layers.Vectors.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Vectors.html","text":"napari.layers.Vectors"},"/api/stable/napari.layers.Tracks.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Tracks.html","text":"napari.layers.Tracks"},"/api/stable/napari.layers.Surface.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Surface.html","text":"napari.layers.Surface"},"/api/stable/napari.layers.Shapes.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Shapes.html","text":"napari.layers.Shapes"},"/api/stable/napari.layers.Points.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Points.html","text":"napari.layers.Points"},"/api/stable/napari.layers.Layer.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Layer.html","text":"napari.layers.Layer"},"/api/stable/napari.layers.Labels.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Labels.html","text":"napari.layers.Labels"},"/api/stable/napari.layers.Image.html":{"level":3,"children":[],"href":"/api/stable/napari.layers.Image.html","text":"napari.layers.Image"},"/release/index.html":{"level":1,"children":["/release/release_0_4_10.html","/release/release_0_4_9.html","/release/release_0_4_8.html","/release/release_0_4_7.html","/release/release_0_4_6.html","/release/release_0_4_5.html","/release/release_0_4_4.html","/release/release_0_4_3.html","/release/release_0_4_2.html","/release/release_0_4_1.html","/release/release_0_4_0.html","/release/release_0_3_8.html","/release/release_0_3_7.html","/release/release_0_3_6.html","/release/release_0_3_5.html","/release/release_0_3_4.html","/release/release_0_3_3.html","/release/release_0_3_2.html","/release/release_0_3_1.html","/release/release_0_3_0.html","/release/release_0_2_12.html","/release/release_0_2_11.html","/release/release_0_2_10.html","/release/release_0_2_9.html","/release/release_0_2_8.html","/release/release_0_2_7.html","/release/release_0_2_6.html","/release/release_0_2_5.html","/release/release_0_2_4.html","/release/release_0_2_3.html","/release/release_0_2_1.html","/release/release_0_2_0.html","/release/release_0_1_5.html","/release/release_0_1_3.html","/release/release_0_1_0.html","/release/release_0_4_11.html"],"href":"/release/index.html","text":"Release notes"},"/release/release_0_4_11.html":{"level":2,"children":[],"href":"/release/release_0_4_11.html","text":"napari 0.4.11"},"/release/release_0_1_0.html":{"level":2,"children":[],"href":"/release/release_0_1_0.html","text":"napari 0.1.0"},"/release/release_0_1_3.html":{"level":2,"children":[],"href":"/release/release_0_1_3.html","text":"napari 0.1.3"},"/release/release_0_1_5.html":{"level":2,"children":[],"href":"/release/release_0_1_5.html","text":"napari 0.1.5"},"/release/release_0_2_0.html":{"level":2,"children":[],"href":"/release/release_0_2_0.html","text":"napari 0.2.0"},"/release/release_0_2_1.html":{"level":2,"children":[],"href":"/release/release_0_2_1.html","text":"napari 0.2.1"},"/release/release_0_2_3.html":{"level":2,"children":[],"href":"/release/release_0_2_3.html","text":"napari 0.2.3"},"/release/release_0_2_4.html":{"level":2,"children":[],"href":"/release/release_0_2_4.html","text":"napari 0.2.4"},"/release/release_0_2_5.html":{"level":2,"children":[],"href":"/release/release_0_2_5.html","text":"napari 0.2.5"},"/release/release_0_2_6.html":{"level":2,"children":[],"href":"/release/release_0_2_6.html","text":"napari 0.2.6"},"/release/release_0_2_7.html":{"level":2,"children":[],"href":"/release/release_0_2_7.html","text":"napari 0.2.7"},"/release/release_0_2_8.html":{"level":2,"children":[],"href":"/release/release_0_2_8.html","text":"napari 0.2.8"},"/release/release_0_2_9.html":{"level":2,"children":[],"href":"/release/release_0_2_9.html","text":"napari 0.2.9"},"/release/release_0_2_10.html":{"level":2,"children":[],"href":"/release/release_0_2_10.html","text":"napari 0.2.10"},"/release/release_0_2_11.html":{"level":2,"children":[],"href":"/release/release_0_2_11.html","text":"napari 0.2.11"},"/release/release_0_2_12.html":{"level":2,"children":[],"href":"/release/release_0_2_12.html","text":"napari 0.2.12"},"/release/release_0_3_0.html":{"level":2,"children":[],"href":"/release/release_0_3_0.html","text":"napari 0.3.0"},"/release/release_0_3_1.html":{"level":2,"children":[],"href":"/release/release_0_3_1.html","text":"napari 0.3.1"},"/release/release_0_3_2.html":{"level":2,"children":[],"href":"/release/release_0_3_2.html","text":"napari 0.3.2"},"/release/release_0_3_3.html":{"level":2,"children":[],"href":"/release/release_0_3_3.html","text":"napari 0.3.3"},"/release/release_0_3_4.html":{"level":2,"children":[],"href":"/release/release_0_3_4.html","text":"napari 0.3.4"},"/release/release_0_3_5.html":{"level":2,"children":[],"href":"/release/release_0_3_5.html","text":"napari 0.3.5"},"/release/release_0_3_6.html":{"level":2,"children":[],"href":"/release/release_0_3_6.html","text":"napari 0.3.6"},"/release/release_0_3_7.html":{"level":2,"children":[],"href":"/release/release_0_3_7.html","text":"napari 0.3.7"},"/release/release_0_3_8.html":{"level":2,"children":[],"href":"/release/release_0_3_8.html","text":"napari 0.3.8"},"/release/release_0_4_0.html":{"level":2,"children":[],"href":"/release/release_0_4_0.html","text":"napari 0.4.0"},"/release/release_0_4_1.html":{"level":2,"children":[],"href":"/release/release_0_4_1.html","text":"napari 0.4.1"},"/release/release_0_4_2.html":{"level":2,"children":[],"href":"/release/release_0_4_2.html","text":"napari 0.4.2"},"/release/release_0_4_3.html":{"level":2,"children":[],"href":"/release/release_0_4_3.html","text":"napari 0.4.3"},"/release/release_0_4_4.html":{"level":2,"children":[],"href":"/release/release_0_4_4.html","text":"napari 0.4.4"},"/release/release_0_4_5.html":{"level":2,"children":[],"href":"/release/release_0_4_5.html","text":"napari 0.4.5"},"/release/release_0_4_6.html":{"level":2,"children":[],"href":"/release/release_0_4_6.html","text":"napari 0.4.6"},"/release/release_0_4_7.html":{"level":2,"children":[],"href":"/release/release_0_4_7.html","text":"napari 0.4.7"},"/release/release_0_4_8.html":{"level":2,"children":[],"href":"/release/release_0_4_8.html","text":"napari 0.4.8"},"/release/release_0_4_9.html":{"level":2,"children":[],"href":"/release/release_0_4_9.html","text":"napari 0.4.9"},"/release/release_0_4_10.html":{"level":2,"children":[],"href":"/release/release_0_4_10.html","text":"napari 0.4.10"},"/plugins/stable/index.html":{"level":1,"children":["/plugins/stable/for_napari_developers.html","/plugins/stable/for_plugin_developers.html","/plugins/stable/hook_specifications.html","/plugins/stable/find-and-install-plugin.html"],"href":"/plugins/stable/index.html","text":"Plugins"},"/plugins/stable/find-and-install-plugin.html":{"level":2,"children":[],"href":"/plugins/stable/find-and-install-plugin.html","text":"Finding and installing a napari plugin"},"/plugins/stable/hook_specifications.html":{"level":2,"children":[],"href":"/plugins/stable/hook_specifications.html","text":"napari hook specification reference"},"/plugins/stable/for_plugin_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_plugin_developers.html","text":"creating a napari plugin"},"/plugins/stable/for_napari_developers.html":{"level":2,"children":[],"href":"/plugins/stable/for_napari_developers.html","text":"napari plugin architecture"},"/tutorials/index.html":{"level":1,"children":["/tutorials/fundamentals/index.html","/tutorials/applications/index.html"],"href":"/tutorials/index.html","text":"Tutorials"},"/tutorials/applications/index.html":{"level":2,"children":["/tutorials/applications/annotate_segmentation.html","/tutorials/applications/annotate_points.html","/tutorials/applications/dask.html","/tutorials/applications/napari_imageJ.html","/tutorials/applications/cell_tracking.html"],"href":"/tutorials/applications/index.html","text":"Applications"},"/tutorials/applications/cell_tracking.html":{"level":3,"children":[],"href":"/tutorials/applications/cell_tracking.html","text":"single cell tracking with napari"},"/tutorials/applications/napari_imageJ.html":{"level":3,"children":[],"href":"/tutorials/applications/napari_imageJ.html","text":"Napari + ImageJ How-to-Guide"},"/tutorials/applications/dask.html":{"level":3,"children":[],"href":"/tutorials/applications/dask.html","text":"using dask and napari to process & view large datasets"},"/tutorials/applications/annotate_points.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_points.html","text":"annotating videos with napari"},"/tutorials/applications/annotate_segmentation.html":{"level":3,"children":[],"href":"/tutorials/applications/annotate_segmentation.html","text":"annotating segmentation with text and bounding boxes"},"/tutorials/fundamentals/index.html":{"level":2,"children":["/tutorials/fundamentals/installation.html","/tutorials/fundamentals/getting_started.html","/tutorials/fundamentals/viewer.html","/tutorials/fundamentals/image.html","/tutorials/fundamentals/labels.html","/tutorials/fundamentals/points.html","/tutorials/fundamentals/shapes.html","/tutorials/fundamentals/surface.html","/tutorials/fundamentals/tracks.html","/tutorials/fundamentals/vectors.html"],"href":"/tutorials/fundamentals/index.html","text":"Fundamentals"},"/tutorials/fundamentals/vectors.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/vectors.html","text":"vectors layer tutorial"},"/tutorials/fundamentals/tracks.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/tracks.html","text":"tracks layer tutorial"},"/tutorials/fundamentals/surface.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/surface.html","text":"surface layer tutorial"},"/tutorials/fundamentals/shapes.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/shapes.html","text":"shapes layer tutorial"},"/tutorials/fundamentals/points.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/points.html","text":"points layer tutorial"},"/tutorials/fundamentals/labels.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/labels.html","text":"labels layer tutorial"},"/tutorials/fundamentals/image.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/image.html","text":"image layer tutorial"},"/tutorials/fundamentals/viewer.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/viewer.html","text":"napari viewer tutorial"},"/tutorials/fundamentals/getting_started.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/getting_started.html","text":"getting started with napari"},"/tutorials/fundamentals/installation.html":{"level":3,"children":[],"href":"/tutorials/fundamentals/installation.html","text":"napari installation tutorial"},"/community/index.html":{"level":1,"children":["/community/mission_and_values.html","/community/team.html","/community/code_of_conduct.html","/community/code_of_conduct_reporting.html","/community/governance.html"],"href":"/community/index.html","text":"Community"},"/community/governance.html":{"level":2,"children":[],"href":"/community/governance.html","text":"Governance Model"},"/community/code_of_conduct_reporting.html":{"level":2,"children":[],"href":"/community/code_of_conduct_reporting.html","text":"Handling Code of Conduct Reports"},"/community/code_of_conduct.html":{"level":2,"children":[],"href":"/community/code_of_conduct.html","text":"Code of Conduct"},"/community/team.html":{"level":2,"children":[],"href":"/community/team.html","text":"About the Project and Team"},"/community/mission_and_values.html":{"level":2,"children":[],"href":"/community/mission_and_values.html","text":"Mission and Values"}},"rootGlobalHeaders":["/community/index.html","/tutorials/index.html","/plugins/stable/index.html","/release/index.html","/api/stable/index.html","/roadmaps/index.html","/guides/stable/index.html","/developers/index.html","https://github.com/napari/napari","https://napari-hub.org"],"pageTitle":"Source code for functools","pageFrontMatter":{},"appScripts":[{"src":"/_static/documentation_options.js"},{"src":"/_static/jquery.js"},{"src":"/_static/underscore.js"},{"src":"/_static/doctools.js"},{"src":"/_static/togglebutton.js"},{"src":"/_static/clipboard.min.js"},{"src":"/_static/copybutton.js"},{"children":"var togglebuttonSelector = '.toggle, .admonition.dropdown, .tag_hide_input div.cell_input, .tag_hide-input div.cell_input, .tag_hide_output div.cell_output, .tag_hide-output div.cell_output, .tag_hide_cell.cell, .tag_hide-cell.cell';"}],"appStyleSheets":[{"href":"/_static/pygments.css","rel":"stylesheet"}],"pageBodyHtml":"\n        <div id=\"documentation_options\" data-url_root=\"../\"></div>\n        <div class=\"highlight\"><pre><span></span><span class=\"sd\">\"\"\"functools.py - Tools for working with functions and callable objects</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"c1\"># Python module wrapper for _functools C module</span>\n<span class=\"c1\"># to allow utilities written in Python to be added</span>\n<span class=\"c1\"># to the functools module.</span>\n<span class=\"c1\"># Written by Nick Coghlan &lt;ncoghlan at gmail.com&gt;,</span>\n<span class=\"c1\"># Raymond Hettinger &lt;python at rcn.com&gt;,</span>\n<span class=\"c1\"># and Łukasz Langa &lt;lukasz at langa.pl&gt;.</span>\n<span class=\"c1\">#   Copyright (C) 2006-2013 Python Software Foundation.</span>\n<span class=\"c1\"># See C source code for _functools credits/copyright</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'update_wrapper'</span><span class=\"p\">,</span> <span class=\"s1\">'wraps'</span><span class=\"p\">,</span> <span class=\"s1\">'WRAPPER_ASSIGNMENTS'</span><span class=\"p\">,</span> <span class=\"s1\">'WRAPPER_UPDATES'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'total_ordering'</span><span class=\"p\">,</span> <span class=\"s1\">'cmp_to_key'</span><span class=\"p\">,</span> <span class=\"s1\">'lru_cache'</span><span class=\"p\">,</span> <span class=\"s1\">'reduce'</span><span class=\"p\">,</span> <span class=\"s1\">'partial'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'partialmethod'</span><span class=\"p\">,</span> <span class=\"s1\">'singledispatch'</span><span class=\"p\">,</span> <span class=\"s1\">'singledispatchmethod'</span><span class=\"p\">,</span>\n           <span class=\"s2\">\"cached_property\"</span><span class=\"p\">]</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">get_cache_token</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n<span class=\"c1\"># import types, weakref  # Deferred to single_dispatch()</span>\n<span class=\"kn\">from</span> <span class=\"nn\">reprlib</span> <span class=\"kn\">import</span> <span class=\"n\">recursive_repr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">_thread</span> <span class=\"kn\">import</span> <span class=\"n\">RLock</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### update_wrapper() and wraps() decorator</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"c1\"># update_wrapper() and wraps() are tools to help write</span>\n<span class=\"c1\"># wrapper functions that can handle naive introspection</span>\n\n<span class=\"n\">WRAPPER_ASSIGNMENTS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'__module__'</span><span class=\"p\">,</span> <span class=\"s1\">'__name__'</span><span class=\"p\">,</span> <span class=\"s1\">'__qualname__'</span><span class=\"p\">,</span> <span class=\"s1\">'__doc__'</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'__annotations__'</span><span class=\"p\">)</span>\n<span class=\"n\">WRAPPER_UPDATES</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'__dict__'</span><span class=\"p\">,)</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span>\n                   <span class=\"n\">wrapped</span><span class=\"p\">,</span>\n                   <span class=\"n\">assigned</span> <span class=\"o\">=</span> <span class=\"n\">WRAPPER_ASSIGNMENTS</span><span class=\"p\">,</span>\n                   <span class=\"n\">updated</span> <span class=\"o\">=</span> <span class=\"n\">WRAPPER_UPDATES</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Update a wrapper function to look like the wrapped function</span>\n\n<span class=\"sd\">       wrapper is the function to be updated</span>\n<span class=\"sd\">       wrapped is the original function</span>\n<span class=\"sd\">       assigned is a tuple naming the attributes assigned directly</span>\n<span class=\"sd\">       from the wrapped function to the wrapper function (defaults to</span>\n<span class=\"sd\">       functools.WRAPPER_ASSIGNMENTS)</span>\n<span class=\"sd\">       updated is a tuple naming the attributes of the wrapper that</span>\n<span class=\"sd\">       are updated with the corresponding attribute from the wrapped</span>\n<span class=\"sd\">       function (defaults to functools.WRAPPER_UPDATES)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">assigned</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">wrapped</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">updated</span><span class=\"p\">:</span>\n        <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">wrapped</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n    <span class=\"c1\"># Issue #17482: set __wrapped__ last so we don't inadvertently copy it</span>\n    <span class=\"c1\"># from the wrapped function when updating __dict__</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">__wrapped__</span> <span class=\"o\">=</span> <span class=\"n\">wrapped</span>\n    <span class=\"c1\"># Return the wrapper so this can be used as a decorator via partial()</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n<div class=\"viewcode-block\" id=\"wraps\"><a class=\"viewcode-back\" href=\"../api/stable/napari.types.html#napari.types.wraps\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">wraps</span><span class=\"p\">(</span><span class=\"n\">wrapped</span><span class=\"p\">,</span>\n          <span class=\"n\">assigned</span> <span class=\"o\">=</span> <span class=\"n\">WRAPPER_ASSIGNMENTS</span><span class=\"p\">,</span>\n          <span class=\"n\">updated</span> <span class=\"o\">=</span> <span class=\"n\">WRAPPER_UPDATES</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Decorator factory to apply update_wrapper() to a wrapper function</span>\n\n<span class=\"sd\">       Returns a decorator that invokes update_wrapper() with the decorated</span>\n<span class=\"sd\">       function as the wrapper argument and the arguments to wraps() as the</span>\n<span class=\"sd\">       remaining arguments. Default arguments are as for update_wrapper().</span>\n<span class=\"sd\">       This is a convenience function to simplify applying partial() to</span>\n<span class=\"sd\">       update_wrapper().</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">update_wrapper</span><span class=\"p\">,</span> <span class=\"n\">wrapped</span><span class=\"o\">=</span><span class=\"n\">wrapped</span><span class=\"p\">,</span>\n                   <span class=\"n\">assigned</span><span class=\"o\">=</span><span class=\"n\">assigned</span><span class=\"p\">,</span> <span class=\"n\">updated</span><span class=\"o\">=</span><span class=\"n\">updated</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### total_ordering class decorator</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"c1\"># The total ordering functions all invoke the root magic method directly</span>\n<span class=\"c1\"># rather than using the corresponding operator.  This avoids possible</span>\n<span class=\"c1\"># infinite recursion that could occur when the operator dispatch logic</span>\n<span class=\"c1\"># detects a NotImplemented result and then calls a reflected method.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_gt_from_lt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt; b.  Computed by @total_ordering from (not a &lt; b) and (a != b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span> <span class=\"o\">!=</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_le_from_lt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt;= b.  Computed by @total_ordering from (a &lt; b) or (a == b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_result</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span> <span class=\"o\">==</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_ge_from_lt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt;= b.  Computed by @total_ordering from (not a &lt; b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_ge_from_le</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt;= b.  Computed by @total_ordering from (not a &lt;= b) or (a == b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span> <span class=\"o\">==</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_lt_from_le</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt; b.  Computed by @total_ordering from (a &lt;= b) and (a != b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_result</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span> <span class=\"o\">!=</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_gt_from_le</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt; b.  Computed by @total_ordering from (not a &lt;= b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_lt_from_gt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt; b.  Computed by @total_ordering from (not a &gt; b) and (a != b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span> <span class=\"o\">!=</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_ge_from_gt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt;= b.  Computed by @total_ordering from (a &gt; b) or (a == b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_result</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span> <span class=\"o\">==</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_le_from_gt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt;= b.  Computed by @total_ordering from (not a &gt; b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_le_from_ge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt;= b.  Computed by @total_ordering from (not a &gt;= b) or (a == b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span> <span class=\"o\">==</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_gt_from_ge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &gt; b.  Computed by @total_ordering from (a &gt;= b) and (a != b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"n\">op_result</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span> <span class=\"o\">!=</span> <span class=\"n\">other</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_lt_from_ge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">NotImplemented</span><span class=\"o\">=</span><span class=\"bp\">NotImplemented</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Return a &lt; b.  Computed by @total_ordering from (not a &gt;= b).'</span>\n    <span class=\"n\">op_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">op_result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op_result</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">op_result</span>\n\n<span class=\"n\">_convert</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'__lt__'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'__gt__'</span><span class=\"p\">,</span> <span class=\"n\">_gt_from_lt</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__le__'</span><span class=\"p\">,</span> <span class=\"n\">_le_from_lt</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__ge__'</span><span class=\"p\">,</span> <span class=\"n\">_ge_from_lt</span><span class=\"p\">)],</span>\n    <span class=\"s1\">'__le__'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'__ge__'</span><span class=\"p\">,</span> <span class=\"n\">_ge_from_le</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__lt__'</span><span class=\"p\">,</span> <span class=\"n\">_lt_from_le</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__gt__'</span><span class=\"p\">,</span> <span class=\"n\">_gt_from_le</span><span class=\"p\">)],</span>\n    <span class=\"s1\">'__gt__'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'__lt__'</span><span class=\"p\">,</span> <span class=\"n\">_lt_from_gt</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__ge__'</span><span class=\"p\">,</span> <span class=\"n\">_ge_from_gt</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__le__'</span><span class=\"p\">,</span> <span class=\"n\">_le_from_gt</span><span class=\"p\">)],</span>\n    <span class=\"s1\">'__ge__'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'__le__'</span><span class=\"p\">,</span> <span class=\"n\">_le_from_ge</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__gt__'</span><span class=\"p\">,</span> <span class=\"n\">_gt_from_ge</span><span class=\"p\">),</span>\n               <span class=\"p\">(</span><span class=\"s1\">'__lt__'</span><span class=\"p\">,</span> <span class=\"n\">_lt_from_ge</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">total_ordering</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Class decorator that fills in missing ordering methods\"\"\"</span>\n    <span class=\"c1\"># Find user-defined comparisons (not those inherited from object).</span>\n    <span class=\"n\">roots</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">op</span> <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">_convert</span> <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)}</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">roots</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'must define at least one ordering operation: &lt; &gt; &lt;= &gt;='</span><span class=\"p\">)</span>\n    <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">roots</span><span class=\"p\">)</span>       <span class=\"c1\"># prefer __lt__ to __le__ to __gt__ to __ge__</span>\n    <span class=\"k\">for</span> <span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">opfunc</span> <span class=\"ow\">in</span> <span class=\"n\">_convert</span><span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">opname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">roots</span><span class=\"p\">:</span>\n            <span class=\"n\">opfunc</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"n\">opname</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">opfunc</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">cls</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### cmp_to_key() function converter</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cmp_to_key</span><span class=\"p\">(</span><span class=\"n\">mycmp</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Convert a cmp= function into a key= function\"\"\"</span>\n    <span class=\"k\">class</span> <span class=\"nc\">K</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'obj'</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__lt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">mycmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__gt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">mycmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">mycmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__le__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">mycmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__ge__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">mycmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n        <span class=\"fm\">__hash__</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">K</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">_functools</span> <span class=\"kn\">import</span> <span class=\"n\">cmp_to_key</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### reduce() sequence to a single item</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"n\">_initial_missing</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"n\">_initial_missing</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    reduce(function, sequence[, initial]) -&gt; value</span>\n\n<span class=\"sd\">    Apply a function of two arguments cumulatively to the items of a sequence,</span>\n<span class=\"sd\">    from left to right, so as to reduce the sequence to a single value.</span>\n<span class=\"sd\">    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates</span>\n<span class=\"sd\">    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items</span>\n<span class=\"sd\">    of the sequence in the calculation, and serves as a default when the</span>\n<span class=\"sd\">    sequence is empty.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">initial</span> <span class=\"ow\">is</span> <span class=\"n\">_initial_missing</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"reduce() of empty sequence with no initial value\"</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"bp\">None</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">initial</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">_functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### partial() argument application</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"c1\"># Purely functional, no descriptor behaviour</span>\n<span class=\"k\">class</span> <span class=\"nc\">partial</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"New function with partial application of the given arguments</span>\n<span class=\"sd\">    and keywords.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"s2\">\"func\"</span><span class=\"p\">,</span> <span class=\"s2\">\"args\"</span><span class=\"p\">,</span> <span class=\"s2\">\"keywords\"</span><span class=\"p\">,</span> <span class=\"s2\">\"__dict__\"</span><span class=\"p\">,</span> <span class=\"s2\">\"__weakref__\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"the first argument must be callable\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">\"func\"</span><span class=\"p\">):</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">+</span> <span class=\"n\">args</span>\n            <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">}</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">func</span>\n\n        <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">partial</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"n\">keywords</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">):</span>\n        <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@recursive_repr</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">qualname</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">)]</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\">=</span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">!r}</span><span class=\"s2\">\"</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">==</span> <span class=\"s2\">\"functools\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"functools.</span><span class=\"si\">{</span><span class=\"n\">qualname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">qualname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,),</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n               <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"argument to __setstate__ must be a tuple\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"expected 4 items in state, got </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwds</span><span class=\"p\">,</span> <span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"n\">state</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span> <span class=\"ow\">or</span>\n           <span class=\"p\">(</span><span class=\"n\">kwds</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">kwds</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">))</span> <span class=\"ow\">or</span>\n           <span class=\"p\">(</span><span class=\"n\">namespace</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">))):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"invalid partial state\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"c1\"># just in case it's a subclass</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwds</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">kwds</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">kwds</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">dict</span><span class=\"p\">:</span> <span class=\"c1\"># XXX does it need to be *exactly* dict?</span>\n            <span class=\"n\">kwds</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">namespace</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"o\">=</span> <span class=\"n\">namespace</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"n\">kwds</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">_functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Descriptor version</span>\n<span class=\"k\">class</span> <span class=\"nc\">partialmethod</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Method descriptor with partial application of the given arguments</span>\n<span class=\"sd\">    and keywords.</span>\n\n<span class=\"sd\">    Supports wrapping existing descriptors and handles non-descriptor</span>\n<span class=\"sd\">    callables as instance methods.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"descriptor '__init__' of partialmethod \"</span>\n                            <span class=\"s2\">\"needs an argument\"</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"s1\">'func'</span> <span class=\"ow\">in</span> <span class=\"n\">keywords</span><span class=\"p\">:</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">keywords</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'func'</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">\"Passing 'func' as keyword argument is deprecated\"</span><span class=\"p\">,</span>\n                          <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span> <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"type 'partialmethod' takes at least one argument, \"</span>\n                            <span class=\"s2\">\"got </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">\"__get__\"</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{!r}</span><span class=\"s2\"> is not callable or a descriptor\"</span>\n                                 <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># func could be a descriptor like classmethod which isn't callable,</span>\n        <span class=\"c1\"># so we can't inherit from partial (it verifies func is callable)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">partialmethod</span><span class=\"p\">):</span>\n            <span class=\"c1\"># flattening is mandatory in order to place cls/self before all</span>\n            <span class=\"c1\"># other arguments</span>\n            <span class=\"c1\"># it's also more efficient since only one function will be called</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">func</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">+</span> <span class=\"n\">args</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">}</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"n\">keywords</span>\n    <span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">__text_signature__</span> <span class=\"o\">=</span> <span class=\"s1\">'($self, func, /, *args, **keywords)'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">))</span>\n        <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">=</span><span class=\"si\">{!r}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                                 <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{module}</span><span class=\"s2\">.</span><span class=\"si\">{cls}</span><span class=\"s2\">(</span><span class=\"si\">{func}</span><span class=\"s2\">, </span><span class=\"si\">{args}</span><span class=\"s2\">, </span><span class=\"si\">{keywords}</span><span class=\"s2\">)\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">format_string</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span>\n                                    <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n                                    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span>\n                                    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                                    <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_unbound_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_method</span><span class=\"p\">(</span><span class=\"n\">cls_or_self</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">):</span>\n            <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">cls_or_self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n        <span class=\"n\">_method</span><span class=\"o\">.</span><span class=\"n\">__isabstractmethod__</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__isabstractmethod__</span>\n        <span class=\"n\">_method</span><span class=\"o\">.</span><span class=\"n\">_partialmethod</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">_method</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">get</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">\"__get__\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">get</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">new_func</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Assume __get__ returning something new indicates the</span>\n                <span class=\"c1\"># creation of an appropriate callable</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">new_func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">)</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"vm\">__self__</span> <span class=\"o\">=</span> <span class=\"n\">new_func</span><span class=\"o\">.</span><span class=\"vm\">__self__</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n        <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If the underlying descriptor didn't do anything, treat this</span>\n            <span class=\"c1\"># like an instance method</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_unbound_method</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__isabstractmethod__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">\"__isabstractmethod__\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Helper functions</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_unwrap_partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">):</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">func</span>\n    <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### LRU Cache function decorator</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"n\">_CacheInfo</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s2\">\"CacheInfo\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"hits\"</span><span class=\"p\">,</span> <span class=\"s2\">\"misses\"</span><span class=\"p\">,</span> <span class=\"s2\">\"maxsize\"</span><span class=\"p\">,</span> <span class=\"s2\">\"currsize\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_HashedSeq</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" This class guarantees that hash() will be called no more than once</span>\n<span class=\"sd\">        per element.  This is important because the lru_cache() will hash</span>\n<span class=\"sd\">        the key multiple times on a cache miss.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"s1\">'hashvalue'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tup</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"o\">=</span><span class=\"nb\">hash</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"n\">tup</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hashvalue</span> <span class=\"o\">=</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__hash__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hashvalue</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_key</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwds</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">,</span>\n             <span class=\"n\">kwd_mark</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">(),),</span>\n             <span class=\"n\">fasttypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">},</span>\n             <span class=\"nb\">tuple</span><span class=\"o\">=</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Make a cache key from optionally typed positional and keyword arguments</span>\n\n<span class=\"sd\">    The key is constructed in a way that is flat as possible rather than</span>\n<span class=\"sd\">    as a nested structure that would take more memory.</span>\n\n<span class=\"sd\">    If there is only a single argument and its data type is known to cache</span>\n<span class=\"sd\">    its hash value, then that argument is returned without a wrapper.  This</span>\n<span class=\"sd\">    saves space and improves lookup speed.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># All of code below relies on kwds preserving the order input by the user.</span>\n    <span class=\"c1\"># Formerly, we sorted() the kwds before looping.  The new way is *much*</span>\n    <span class=\"c1\"># faster; however, it means that f(x=1, y=2) will now be treated as a</span>\n    <span class=\"c1\"># distinct call from f(y=2, x=1) which will be cached separately.</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwds</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">+=</span> <span class=\"n\">kwd_mark</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">kwds</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">key</span> <span class=\"o\">+=</span> <span class=\"n\">item</span>\n    <span class=\"k\">if</span> <span class=\"n\">typed</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">+=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwds</span><span class=\"p\">:</span>\n            <span class=\"n\">key</span> <span class=\"o\">+=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwds</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"n\">fasttypes</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">_HashedSeq</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Least-recently-used cache decorator.</span>\n\n<span class=\"sd\">    If *maxsize* is set to None, the LRU features are disabled and the cache</span>\n<span class=\"sd\">    can grow without bound.</span>\n\n<span class=\"sd\">    If *typed* is True, arguments of different types will be cached separately.</span>\n<span class=\"sd\">    For example, f(3.0) and f(3) will be treated as distinct calls with</span>\n<span class=\"sd\">    distinct results.</span>\n\n<span class=\"sd\">    Arguments to the cached function must be hashable.</span>\n\n<span class=\"sd\">    View the cache statistics named tuple (hits, misses, maxsize, currsize)</span>\n<span class=\"sd\">    with f.cache_info().  Clear the cache and statistics with f.cache_clear().</span>\n<span class=\"sd\">    Access the underlying function with f.__wrapped__.</span>\n\n<span class=\"sd\">    See:  http://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)</span>\n\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\"># Users should only access the lru_cache through its public API:</span>\n    <span class=\"c1\">#       cache_info, cache_clear, and f.__wrapped__</span>\n    <span class=\"c1\"># The internals of the lru_cache are encapsulated for thread safety and</span>\n    <span class=\"c1\"># to allow the implementation to change (including a possible C version).</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Negative maxsize is treated as 0</span>\n        <span class=\"k\">if</span> <span class=\"n\">maxsize</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">maxsize</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">typed</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The user_function was passed in directly via the maxsize argument</span>\n        <span class=\"n\">user_function</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span> <span class=\"o\">=</span> <span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"mi\">128</span>\n        <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">_lru_cache_wrapper</span><span class=\"p\">(</span><span class=\"n\">user_function</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">,</span> <span class=\"n\">_CacheInfo</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">user_function</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">maxsize</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"s1\">'Expected first argument to be an integer, a callable, or None'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decorating_function</span><span class=\"p\">(</span><span class=\"n\">user_function</span><span class=\"p\">):</span>\n        <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">_lru_cache_wrapper</span><span class=\"p\">(</span><span class=\"n\">user_function</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">,</span> <span class=\"n\">_CacheInfo</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">user_function</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">decorating_function</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_lru_cache_wrapper</span><span class=\"p\">(</span><span class=\"n\">user_function</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">,</span> <span class=\"n\">_CacheInfo</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Constants shared by all lru cache instances:</span>\n    <span class=\"n\">sentinel</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>          <span class=\"c1\"># unique object used to signal cache misses</span>\n    <span class=\"n\">make_key</span> <span class=\"o\">=</span> <span class=\"n\">_make_key</span>         <span class=\"c1\"># build a key from the function arguments</span>\n    <span class=\"n\">PREV</span><span class=\"p\">,</span> <span class=\"n\">NEXT</span><span class=\"p\">,</span> <span class=\"n\">KEY</span><span class=\"p\">,</span> <span class=\"n\">RESULT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>   <span class=\"c1\"># names for the link fields</span>\n\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">hits</span> <span class=\"o\">=</span> <span class=\"n\">misses</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">cache_get</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span>    <span class=\"c1\"># bound method to lookup a key or return None</span>\n    <span class=\"n\">cache_len</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"fm\">__len__</span>  <span class=\"c1\"># get cache size without calling len()</span>\n    <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"n\">RLock</span><span class=\"p\">()</span>           <span class=\"c1\"># because linkedlist updates aren't threadsafe</span>\n    <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>                <span class=\"c1\"># root of the circular doubly linked list</span>\n    <span class=\"n\">root</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>     <span class=\"c1\"># initialize by pointing to self</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">maxsize</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n            <span class=\"c1\"># No caching -- just a statistics update</span>\n            <span class=\"k\">nonlocal</span> <span class=\"n\">misses</span>\n            <span class=\"n\">misses</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">user_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">maxsize</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Simple caching without ordering or size limit</span>\n            <span class=\"k\">nonlocal</span> <span class=\"n\">hits</span><span class=\"p\">,</span> <span class=\"n\">misses</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">make_key</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwds</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cache_get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">sentinel</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">sentinel</span><span class=\"p\">:</span>\n                <span class=\"n\">hits</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">return</span> <span class=\"n\">result</span>\n            <span class=\"n\">misses</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">user_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n            <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Size limited caching that tracks accesses by recency</span>\n            <span class=\"k\">nonlocal</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">hits</span><span class=\"p\">,</span> <span class=\"n\">misses</span><span class=\"p\">,</span> <span class=\"n\">full</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">make_key</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwds</span><span class=\"p\">,</span> <span class=\"n\">typed</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n                <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">cache_get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">link</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Move the link to the front of the circular queue</span>\n                    <span class=\"n\">link_prev</span><span class=\"p\">,</span> <span class=\"n\">link_next</span><span class=\"p\">,</span> <span class=\"n\">_key</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">link</span>\n                    <span class=\"n\">link_prev</span><span class=\"p\">[</span><span class=\"n\">NEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">link_next</span>\n                    <span class=\"n\">link_next</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">link_prev</span>\n                    <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span>\n                    <span class=\"n\">last</span><span class=\"p\">[</span><span class=\"n\">NEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">link</span>\n                    <span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">last</span>\n                    <span class=\"n\">link</span><span class=\"p\">[</span><span class=\"n\">NEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n                    <span class=\"n\">hits</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">return</span> <span class=\"n\">result</span>\n                <span class=\"n\">misses</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">user_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cache</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Getting here means that this same key was added to the</span>\n                    <span class=\"c1\"># cache while the lock was released.  Since the link</span>\n                    <span class=\"c1\"># update is already done, we need only return the</span>\n                    <span class=\"c1\"># computed result and update the count of misses.</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">elif</span> <span class=\"n\">full</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Use the old root to store the new key and result.</span>\n                    <span class=\"n\">oldroot</span> <span class=\"o\">=</span> <span class=\"n\">root</span>\n                    <span class=\"n\">oldroot</span><span class=\"p\">[</span><span class=\"n\">KEY</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n                    <span class=\"n\">oldroot</span><span class=\"p\">[</span><span class=\"n\">RESULT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n                    <span class=\"c1\"># Empty the oldest link and make it the new root.</span>\n                    <span class=\"c1\"># Keep a reference to the old key and old result to</span>\n                    <span class=\"c1\"># prevent their ref counts from going to zero during the</span>\n                    <span class=\"c1\"># update. That will prevent potentially arbitrary object</span>\n                    <span class=\"c1\"># clean-up code (i.e. __del__) from running while we're</span>\n                    <span class=\"c1\"># still adjusting the links.</span>\n                    <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">oldroot</span><span class=\"p\">[</span><span class=\"n\">NEXT</span><span class=\"p\">]</span>\n                    <span class=\"n\">oldkey</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">KEY</span><span class=\"p\">]</span>\n                    <span class=\"n\">oldresult</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">RESULT</span><span class=\"p\">]</span>\n                    <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">KEY</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">RESULT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                    <span class=\"c1\"># Now update the cache dictionary.</span>\n                    <span class=\"k\">del</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">oldkey</span><span class=\"p\">]</span>\n                    <span class=\"c1\"># Save the potentially reentrant cache[key] assignment</span>\n                    <span class=\"c1\"># for last, after the root and links have been put in</span>\n                    <span class=\"c1\"># a consistent state.</span>\n                    <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">oldroot</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Put result in a new link at the front of the queue.</span>\n                    <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span>\n                    <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">]</span>\n                    <span class=\"n\">last</span><span class=\"p\">[</span><span class=\"n\">NEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"n\">PREV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">link</span>\n                    <span class=\"c1\"># Use the cache_len bound method instead of the len() function</span>\n                    <span class=\"c1\"># which could potentially be wrapped in an lru_cache itself.</span>\n                    <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">cache_len</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxsize</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">cache_info</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\"Report cache statistics\"\"\"</span>\n        <span class=\"k\">with</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">_CacheInfo</span><span class=\"p\">(</span><span class=\"n\">hits</span><span class=\"p\">,</span> <span class=\"n\">misses</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">cache_len</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">cache_clear</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\"Clear the cache and cache statistics\"\"\"</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">hits</span><span class=\"p\">,</span> <span class=\"n\">misses</span><span class=\"p\">,</span> <span class=\"n\">full</span>\n        <span class=\"k\">with</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n            <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n            <span class=\"n\">root</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n            <span class=\"n\">hits</span> <span class=\"o\">=</span> <span class=\"n\">misses</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">cache_info</span> <span class=\"o\">=</span> <span class=\"n\">cache_info</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span> <span class=\"o\">=</span> <span class=\"n\">cache_clear</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">_functools</span> <span class=\"kn\">import</span> <span class=\"n\">_lru_cache_wrapper</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### singledispatch() - single-dispatch generic function decorator</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_c3_merge</span><span class=\"p\">(</span><span class=\"n\">sequences</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Merges MROs in *sequences* to a single MRO using the C3 algorithm.</span>\n\n<span class=\"sd\">    Adapted from http://www.python.org/download/releases/2.3/mro/.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">sequences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">sequences</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"c1\"># purge empty sequences</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sequences</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n        <span class=\"k\">for</span> <span class=\"n\">s1</span> <span class=\"ow\">in</span> <span class=\"n\">sequences</span><span class=\"p\">:</span>   <span class=\"c1\"># find merge candidates among seq heads</span>\n            <span class=\"n\">candidate</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">s2</span> <span class=\"ow\">in</span> <span class=\"n\">sequences</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n                    <span class=\"n\">candidate</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                    <span class=\"k\">break</span>      <span class=\"c1\"># reject the current head, it appears later</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">candidate</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Inconsistent hierarchy\"</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">)</span>\n        <span class=\"c1\"># remove the chosen candidate</span>\n        <span class=\"k\">for</span> <span class=\"n\">seq</span> <span class=\"ow\">in</span> <span class=\"n\">sequences</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">candidate</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_c3_mro</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">abcs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Computes the method resolution order using extended C3 linearization.</span>\n\n<span class=\"sd\">    If no *abcs* are given, the algorithm works exactly like the built-in C3</span>\n<span class=\"sd\">    linearization used for method resolution.</span>\n\n<span class=\"sd\">    If given, *abcs* is a list of abstract base classes that should be inserted</span>\n<span class=\"sd\">    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the</span>\n<span class=\"sd\">    result. The algorithm inserts ABCs where their functionality is introduced,</span>\n<span class=\"sd\">    i.e. issubclass(cls, abc) returns True for the class itself but returns</span>\n<span class=\"sd\">    False for all its direct base classes. Implicit ABCs for a given class</span>\n<span class=\"sd\">    (either registered or inferred from the presence of a special method like</span>\n<span class=\"sd\">    __len__) are inserted directly after the last ABC explicitly listed in the</span>\n<span class=\"sd\">    MRO of said class. If two implicit ABCs end up next to each other in the</span>\n<span class=\"sd\">    resulting MRO, their ordering depends on the order of types in *abcs*.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"s1\">'__abstractmethods__'</span><span class=\"p\">):</span>\n            <span class=\"n\">boundary</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">i</span>\n            <span class=\"k\">break</span>   <span class=\"c1\"># Bases up to the last explicit ABC are considered first.</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">boundary</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">abcs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">abcs</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">abcs</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n    <span class=\"n\">explicit_bases</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">[:</span><span class=\"n\">boundary</span><span class=\"p\">])</span>\n    <span class=\"n\">abstract_bases</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">other_bases</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">[</span><span class=\"n\">boundary</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">abcs</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n                <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span>\n            <span class=\"p\">):</span>\n            <span class=\"c1\"># If *cls* is the class that introduces behaviour described by</span>\n            <span class=\"c1\"># an ABC *base*, insert said ABC to its MRO.</span>\n            <span class=\"n\">abstract_bases</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">abstract_bases</span><span class=\"p\">:</span>\n        <span class=\"n\">abcs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">explicit_c3_mros</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_c3_mro</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">abcs</span><span class=\"o\">=</span><span class=\"n\">abcs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">explicit_bases</span><span class=\"p\">]</span>\n    <span class=\"n\">abstract_c3_mros</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_c3_mro</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">abcs</span><span class=\"o\">=</span><span class=\"n\">abcs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">abstract_bases</span><span class=\"p\">]</span>\n    <span class=\"n\">other_c3_mros</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_c3_mro</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">abcs</span><span class=\"o\">=</span><span class=\"n\">abcs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">other_bases</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">_c3_merge</span><span class=\"p\">(</span>\n        <span class=\"p\">[[</span><span class=\"bp\">cls</span><span class=\"p\">]]</span> <span class=\"o\">+</span>\n        <span class=\"n\">explicit_c3_mros</span> <span class=\"o\">+</span> <span class=\"n\">abstract_c3_mros</span> <span class=\"o\">+</span> <span class=\"n\">other_c3_mros</span> <span class=\"o\">+</span>\n        <span class=\"p\">[</span><span class=\"n\">explicit_bases</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">abstract_bases</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">other_bases</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_compose_mro</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Calculates the method resolution order for a given class *cls*.</span>\n\n<span class=\"sd\">    Includes relevant abstract base classes (with their respective bases) from</span>\n<span class=\"sd\">    the *types* iterable. Uses a modified C3 linearization algorithm.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">bases</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove entries which are already present in the __mro__ or unrelated.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_related</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">typ</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">bases</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"s1\">'__mro__'</span><span class=\"p\">)</span>\n                                 <span class=\"ow\">and</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">typ</span><span class=\"p\">))</span>\n    <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">types</span> <span class=\"k\">if</span> <span class=\"n\">is_related</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"c1\"># Remove entries which are strict bases of other entries (they will end up</span>\n    <span class=\"c1\"># in the MRO anyway.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_strict_base</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">other</span> <span class=\"ow\">in</span> <span class=\"n\">types</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">typ</span> <span class=\"o\">!=</span> <span class=\"n\">other</span> <span class=\"ow\">and</span> <span class=\"n\">typ</span> <span class=\"ow\">in</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">types</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_strict_base</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"c1\"># Subclasses of the ABCs in *types* which are also implemented by</span>\n    <span class=\"c1\"># *cls* can be used to stabilize ABC ordering.</span>\n    <span class=\"n\">type_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">)</span>\n    <span class=\"n\">mro</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">typ</span> <span class=\"ow\">in</span> <span class=\"n\">types</span><span class=\"p\">:</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">sub</span> <span class=\"ow\">in</span> <span class=\"n\">typ</span><span class=\"o\">.</span><span class=\"n\">__subclasses__</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">sub</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">bases</span> <span class=\"ow\">and</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">sub</span><span class=\"p\">):</span>\n                <span class=\"n\">found</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">type_set</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n            <span class=\"n\">mro</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">typ</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># Favor subclasses with the biggest number of useful bases</span>\n        <span class=\"n\">found</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">sub</span> <span class=\"ow\">in</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">subcls</span> <span class=\"ow\">in</span> <span class=\"n\">sub</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">subcls</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">mro</span><span class=\"p\">:</span>\n                    <span class=\"n\">mro</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">subcls</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">_c3_mro</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">abcs</span><span class=\"o\">=</span><span class=\"n\">mro</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_find_impl</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Returns the best matching implementation from *registry* for type *cls*.</span>\n\n<span class=\"sd\">    Where there is no registered implementation for a specific type, its method</span>\n<span class=\"sd\">    resolution order is used to find a more generic implementation.</span>\n\n<span class=\"sd\">    Note: if *registry* does not contain an implementation for the base</span>\n<span class=\"sd\">    *object* type, this function may return None.</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">mro</span> <span class=\"o\">=</span> <span class=\"n\">_compose_mro</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">mro</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If *match* is an implicit ABC but there is another unrelated,</span>\n            <span class=\"c1\"># equally matching implicit ABC, refuse the temptation to guess.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">registry</span> <span class=\"ow\">and</span> <span class=\"n\">t</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span>\n                              <span class=\"ow\">and</span> <span class=\"n\">match</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span>\n                              <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"Ambiguous dispatch: </span><span class=\"si\">{}</span><span class=\"s2\"> or </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">registry</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n    <span class=\"k\">return</span> <span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">singledispatch</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Single-dispatch generic function decorator.</span>\n\n<span class=\"sd\">    Transforms a function into a generic function, which can have different</span>\n<span class=\"sd\">    behaviours depending upon the type of its first argument. The decorated</span>\n<span class=\"sd\">    function acts as the default implementation, and additional</span>\n<span class=\"sd\">    implementations can be registered using the register() attribute of the</span>\n<span class=\"sd\">    generic function.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># There are many programs that use functools without singledispatch, so we</span>\n    <span class=\"c1\"># trade-off making singledispatch marginally slower for the benefit of</span>\n    <span class=\"c1\"># making start-up of such applications slightly faster.</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">types</span><span class=\"o\">,</span> <span class=\"nn\">weakref</span>\n\n    <span class=\"n\">registry</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">dispatch_cache</span> <span class=\"o\">=</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">WeakKeyDictionary</span><span class=\"p\">()</span>\n    <span class=\"n\">cache_token</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"generic_func.dispatch(cls) -&gt; &lt;function implementation&gt;</span>\n\n<span class=\"sd\">        Runs the dispatch algorithm to return the best available implementation</span>\n<span class=\"sd\">        for the given *cls* registered on *generic_func*.</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">cache_token</span>\n        <span class=\"k\">if</span> <span class=\"n\">cache_token</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">current_token</span> <span class=\"o\">=</span> <span class=\"n\">get_cache_token</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">cache_token</span> <span class=\"o\">!=</span> <span class=\"n\">current_token</span><span class=\"p\">:</span>\n                <span class=\"n\">dispatch_cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n                <span class=\"n\">cache_token</span> <span class=\"o\">=</span> <span class=\"n\">current_token</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">impl</span> <span class=\"o\">=</span> <span class=\"n\">dispatch_cache</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">impl</span> <span class=\"o\">=</span> <span class=\"n\">registry</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">impl</span> <span class=\"o\">=</span> <span class=\"n\">_find_impl</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">registry</span><span class=\"p\">)</span>\n            <span class=\"n\">dispatch_cache</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">impl</span>\n        <span class=\"k\">return</span> <span class=\"n\">impl</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"generic_func.register(cls, func) -&gt; func</span>\n\n<span class=\"sd\">        Registers a new implementation for the given *cls* on a *generic_func*.</span>\n\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">nonlocal</span> <span class=\"n\">cache_token</span>\n        <span class=\"k\">if</span> <span class=\"n\">func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">register</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n            <span class=\"n\">ann</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"s1\">'__annotations__'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ann</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">\"Invalid first argument to `register()`: </span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"si\">!r}</span><span class=\"s2\">. \"</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">\"Use either `@register(some_class)` or plain `@register` \"</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">\"on an annotated function.\"</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span>\n\n            <span class=\"c1\"># only import typing if annotation parsing is necessary</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">get_type_hints</span>\n            <span class=\"n\">argname</span><span class=\"p\">,</span> <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">get_type_hints</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">\"Invalid annotation for </span><span class=\"si\">{</span><span class=\"n\">argname</span><span class=\"si\">!r}</span><span class=\"s2\">. \"</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"si\">!r}</span><span class=\"s2\"> is not a class.\"</span>\n                <span class=\"p\">)</span>\n        <span class=\"n\">registry</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"k\">if</span> <span class=\"n\">cache_token</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"s1\">'__abstractmethods__'</span><span class=\"p\">):</span>\n            <span class=\"n\">cache_token</span> <span class=\"o\">=</span> <span class=\"n\">get_cache_token</span><span class=\"p\">()</span>\n        <span class=\"n\">dispatch_cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">funcname</span><span class=\"si\">}</span><span class=\"s1\"> requires at least '</span>\n                            <span class=\"s1\">'1 positional argument'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n\n    <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s1\">'__name__'</span><span class=\"p\">,</span> <span class=\"s1\">'singledispatch function'</span><span class=\"p\">)</span>\n    <span class=\"n\">registry</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">register</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">dispatch</span> <span class=\"o\">=</span> <span class=\"n\">dispatch</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">registry</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MappingProxyType</span><span class=\"p\">(</span><span class=\"n\">registry</span><span class=\"p\">)</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">_clear_cache</span> <span class=\"o\">=</span> <span class=\"n\">dispatch_cache</span><span class=\"o\">.</span><span class=\"n\">clear</span>\n    <span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n\n<span class=\"c1\"># Descriptor version</span>\n<span class=\"k\">class</span> <span class=\"nc\">singledispatchmethod</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Single-dispatch generic method descriptor.</span>\n\n<span class=\"sd\">    Supports wrapping existing descriptors and handles non-descriptor</span>\n<span class=\"sd\">    callables as instance methods.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">\"__get__\"</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">func</span><span class=\"si\">!r}</span><span class=\"s2\"> is not callable or a descriptor\"</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">singledispatch</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"generic_method.register(cls, func) -&gt; func</span>\n\n<span class=\"sd\">        Registers a new implementation for the given *cls* on a *generic_method*.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">method</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_method</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">_method</span><span class=\"o\">.</span><span class=\"n\">__isabstractmethod__</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__isabstractmethod__</span>\n        <span class=\"n\">_method</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register</span>\n        <span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">_method</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_method</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__isabstractmethod__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s1\">'__isabstractmethod__'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">################################################################################</span>\n<span class=\"c1\">### cached_property() - computed once per instance, cached as attribute</span>\n<span class=\"c1\">################################################################################</span>\n\n<span class=\"n\">_NOT_FOUND</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">cached_property</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"n\">RLock</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__set_name__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Cannot assign the same cached_property to two different names \"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"si\">!r}</span><span class=\"s2\"> and </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">!r}</span><span class=\"s2\">).\"</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">owner</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">instance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Cannot use cached_property instance without calling __set_name__ on it.\"</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>  <span class=\"c1\"># not all objects have __dict__ (e.g. class defines slots)</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"No '__dict__' attribute on </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">!r}</span><span class=\"s2\"> \"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"instance to cache </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"si\">!r}</span><span class=\"s2\"> property.\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"bp\">None</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"p\">,</span> <span class=\"n\">_NOT_FOUND</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"n\">_NOT_FOUND</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">:</span>\n                <span class=\"c1\"># check if another thread filled cache while we awaited lock</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"p\">,</span> <span class=\"n\">_NOT_FOUND</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"n\">_NOT_FOUND</span><span class=\"p\">:</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n                        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"sa\">f</span><span class=\"s2\">\"The '__dict__' attribute on </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">!r}</span><span class=\"s2\"> instance \"</span>\n                            <span class=\"sa\">f</span><span class=\"s2\">\"does not support item assignment for caching </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attrname</span><span class=\"si\">!r}</span><span class=\"s2\"> property.\"</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"bp\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n</pre></div>\n      ","pageHeaders":[]}},"__N_SSG":true}